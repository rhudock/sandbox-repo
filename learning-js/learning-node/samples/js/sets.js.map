{"version":3,"sources":["sets.js"],"names":["Departments","_depts","Set","dept","has","add","console","log","delete","clear","set","name","desc","size","depts","addDepartment","allDepts","getSet","forEach","val","values","next","value","depts2","clearDepartments"],"mappings":";;;;;;AAAA;IACMA,W;AAEF,2BAAc;AAAA;;AACV,aAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACH;;;;sCAEaC,I,EAAM;AAChB,gBAAI,CAAC,KAAKF,MAAL,CAAYG,GAAZ,CAAgBD,IAAhB,CAAL,EAA4B;AACxB,qBAAKF,MAAL,CAAYI,GAAZ,CAAgBF,IAAhB;AACH,aAFD,MAGK;AACDG,wBAAQC,GAAR,CAAY,uCAAuCJ,IAAnD;AACH;AACJ;;;yCAEgBA,I,EAAM;AACnB,iBAAKF,MAAL,CAAYO,MAAZ,CAAmBL,IAAnB;AACH;;;2CAEkB;AACf,iBAAKF,MAAL,CAAYQ,KAAZ;AACH;;;iCAEQ;AACL,mBAAO,KAAKR,MAAZ;AACH;;;;;;AAGL;;;AACA,IAAIS,MAAM,IAAIR,GAAJ,EAAV;AACAQ,IAAIL,GAAJ,CAAQ,IAAR;AACAK,IAAIL,GAAJ,CAAQ,SAAR;AACAK,IAAIL,GAAJ,CAAQ,SAAR,E,CAAoB;AACpBK,IAAIL,GAAJ,CAAQ,EAACM,MAAM,KAAP,EAAcC,MAAM,SAApB,EAAR;AACAN,QAAQC,GAAR,CAAYG,IAAIG,IAAhB;AACA,IAAIH,IAAIN,GAAJ,CAAQ,SAAR,CAAJ,EAAwBE,QAAQC,GAAR,CAAY,WAAZ;AACxBG,IAAIF,MAAJ,CAAW,SAAX,E,CAAuB;AACvBE,IAAID,KAAJ,G,CAAa;;;AAGb;AACA,IAAIK,QAAQ,IAAId,WAAJ,EAAZ;AACAc,MAAMC,aAAN,CAAoB,IAApB;AACAD,MAAMC,aAAN,CAAoB,SAApB;AACAD,MAAMC,aAAN,CAAoB,SAApB;;AAEA,IAAIC,WAAWF,MAAMG,MAAN,EAAf;;AAEA;AACAD,SAASE,OAAT,CAAiB,UAASf,IAAT,EAAe;AAC5BG,YAAQC,GAAR,CAAY,oCAAoCJ,IAAhD;AACH,CAFD;;AAIAG,QAAQC,GAAR,CAAY,IAAZ;AACAS,SAASE,OAAT,CAAiB;AAAA,WAAQZ,QAAQC,GAAR,CAAY,oCACL,uBADK,GACqBJ,IADjC,CAAR;AAAA,CAAjB;;AAGAG,QAAQC,GAAR,CAAY,IAAZ;;;;;;AACA,yBAAiBS,QAAjB,8HAA2B;AAAA,YAAlBb,IAAkB;;AACvBG,gBAAQC,GAAR,CAAY,yCAAyCJ,IAArD;AACH;;;;;;;;;;;;;;;;AAED,IAAIgB,MAAMH,SAASI,MAAT,GAAkBC,IAAlB,GAAyBC,KAAnC;AACAhB,QAAQC,GAAR,CAAYY,GAAZ;;AAGA;AACAb,QAAQC,GAAR,CAAY,IAAZ;AACA,IAAIa,SAASJ,SAASI,MAAtB;AACA,IAAIG,SAAS,IAAIrB,GAAJ,CAAQc,QAAR,CAAb;AACAO,OAAOL,OAAP,CAAe,UAASf,IAAT,EAAe;AAC1BG,YAAQC,GAAR,CAAY,sCAAsCJ,IAAlD;AACH,CAFD;;AAIAW,MAAMU,gBAAN;AACAlB,QAAQC,GAAR,CAAY,8CAA8CO,MAAMG,MAAN,GAAeJ,IAAzE","file":"sets.js","sourcesContent":["//Using Set\r\nclass Departments {\r\n\r\n    constructor() {\r\n        this._depts = new Set();\r\n    }\r\n\r\n    addDepartment(dept) {\r\n        if (!this._depts.has(dept)) {\r\n            this._depts.add(dept);\r\n        }\r\n        else {\r\n            console.log('Duplicate department was blocked: ' + dept);\r\n        }\r\n    }\r\n\r\n    removeDepartment(dept) {\r\n        this._depts.delete(dept);\r\n    }\r\n\r\n    clearDepartments() {\r\n        this._depts.clear();\r\n    }\r\n\r\n    getSet() {\r\n        return this._depts;\r\n    }\r\n}\r\n\r\n//Simple example of Set\r\nvar set = new Set();\r\nset.add('HR');\r\nset.add('Finance');\r\nset.add('Finance'); //Duplicate ignored\r\nset.add({name: 'GIS', desc: 'Mapping'});\r\nconsole.log(set.size);\r\nif (set.has('Finance')) console.log('Found it!');\r\nset.delete('Finance'); //Delete single item\r\nset.clear(); //Clear all items\r\n\r\n\r\n//Using Departments (which wraps a Set)\r\nvar depts = new Departments();\r\ndepts.addDepartment('HR');\r\ndepts.addDepartment('Finance');\r\ndepts.addDepartment('Finance');\r\n\r\nlet allDepts = depts.getSet();\r\n\r\n//Iterate through the set\r\nallDepts.forEach(function(dept) {\r\n    console.log('Found department using forEach ' + dept);\r\n});\r\n\r\nconsole.log('\\n');\r\nallDepts.forEach(dept => console.log('Found department using forEach ' + \r\n                                'with arrow function: ' + dept));\r\n\r\nconsole.log('\\n');\r\nfor (let dept of allDepts) {\r\n    console.log('Found department using for of loop: ' + dept);\r\n}\r\n\r\nlet val = allDepts.values().next().value;\r\nconsole.log(val);\r\n\r\n\r\n//Add current set into a new one using value\r\nconsole.log('\\n');\r\nvar values = allDepts.values;\r\nvar depts2 = new Set(allDepts);\r\ndepts2.forEach(function(dept) {\r\n    console.log('Iterating through depts2 values: ' + dept);\r\n});\r\n\r\ndepts.clearDepartments();\r\nconsole.log('\\nClearing all departments: Size is now: ' + depts.getSet().size);"]}