<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:view="com.inq.flash.agent.view.*"
         textAlign="left"
         fontFamily="Arial"
         fontSize="12"
         width="100%"
         height="64"
         paddingLeft="11">
    <mx:VBox>
        <mx:HBox paddingTop="5"
                 paddingLeft="10">
            <mx:ComboBox id="scriptTreeSelector"
                         textAlign="left"
                         width="0"
                         dropdownWidth="300"
                         change="changeScriptTree()"
                         labelField="@name"
                         fontSize="12"
                         cornerRadius="0"
                         height="28" />
            <mx:Image source="@Embed('../images/gear.png')"
                      id="gearIcon"
                      click="{scriptTreeSelector.open()}"
                      toolTip="{L10.n.getString('select.script.tree')}" />
            <view:ProgrammaticMenuBar id="menu"
                                      showRoot="false"
                                      height="100%"
                                      visible="true"
                                      itemClick="scriptSelected(event);"
                                      labelFunction="menuItemLabel"
                                      fontSize="12"
                                      fillColors="[#CCCCCC, #CCCCCC]"
                                      cornerRadius="0" />
            <mx:Label text="{selectedScriptLabel}"
                      fontFamily="Arial"
                      fontSize="12"
                      height="100%"
                      paddingTop="5" />
        </mx:HBox>
        <mx:HBox>
            <mx:TextInput id="searchText"
                          width="100%"
                          enter="search()"
                          keyDown="checkCancelKey(event)">
            </mx:TextInput>
            <mx:Button label="{L10.n.getString('search')}"
                       click="search()"
                       enabled="{Boolean(searchText.text)}" />
            <mx:Button label="{L10.n.getString('back')}"
                       click="clearFilter()"
                       visible="{Boolean(searchText.text)}" />
            <mx:Label text="{L10.n.getString('hotkey')}"
                      visible="false"
                      id="hotKeyLabel" />
            <mx:PopUpMenuButton id="hotKeyCombo"
                                label="{hotKeySeq}"
                                itemClick="hotKeyClickHandler(event)"
                                focusOut="hotKeyFocusOut(event)"
                                visible="false" />
        </mx:HBox>
    </mx:VBox>
    <mx:Script>
        <![CDATA[
            import com.inq.flash.agent.control.ChatPanelController;
            import com.inq.flash.agent.control.messagehandlers.ScriptHandler;
            import com.inq.flash.agent.view.BreadCrumbMenuBarItem;
            import com.inq.flash.common.beans.ScriptLine;
            import com.inq.flash.common.beans.ScriptPage;
            import flash.events.FocusEvent;
            import flash.events.MouseEvent;
            import mx.collections.ArrayCollection;
            import mx.collections.XMLListCollection;
            import mx.controls.Alert;
            import mx.controls.List;
            import mx.controls.menuClasses.MenuBarItem;
            import mx.events.DropdownEvent;
            import mx.events.MenuEvent;

            private static var scriptHandler:ScriptHandler;

            [Bindable]
            private var menuXML:XML;
            private var originalMenuXML:XML;
            [Bindable]
            private var allScriptLines:ArrayCollection = new ArrayCollection();
            [Bindable]
            private var currentScriptPageLines:ArrayCollection;

            private var selectedItem:XML;

            [Bindable]
            [Embed("../images/down_arrow.png")]
            private var downIcon:Class;

            [Bindable]
            [Embed("../images/right_arrow.png")]
            private var rightIcon:Class;

            [Bindable]
            private var selectedScriptLabel:String = "";
            public var scriptPageList:List;
            private var controller:ChatPanelController;
            private var showInit:Boolean;
            private var showingMenu:Boolean;

            [Bindable]
            private var hotKeySeq:String = "";
            private var allHotKeys:Array; // = [101, 102, 103, 104, 201, 202, 234];
            
            private var selectedPageID:String;

            public static function setScriptHandler(handler:ScriptHandler):void {
                scriptHandler = handler;
            }

            public function setController(controller:ChatPanelController):void {
                this.controller = controller;
                menu.addEventListener(MenuEvent.MENU_HIDE, hideMenu);
                menu.addEventListener(MenuEvent.MENU_SHOW, showMenu);
                menu.setStyle("upIcon", rightIcon);
                menu.setStyle("downIcon", downIcon);
                menu.setStyle("overIcon", downIcon);
                BreadCrumbMenuBarItem.downIcon = downIcon;
                BreadCrumbMenuBarItem.rightIcon = rightIcon;
            }

            private function hideMenu(event:MenuEvent):void {
                showingMenu = false;
            }

            private function showMenu(event:MenuEvent):void {
                showingMenu = true;
            }

            public function setScriptCategories(scriptCategories:XML, hasAccess:Boolean, defaultScriptTreeID:String = ""):void {
                scriptTreeSelector.visible = hasAccess;
                scriptTreeSelector.includeInLayout = hasAccess;
                gearIcon.visible = hasAccess;
                gearIcon.includeInLayout = hasAccess;
                if (scriptCategories == null) {
                    //This is rare case when site doesn't have Script Groups at all.
                    setScriptTree();
                    scriptTreeSelector.dataProvider = null;
                } else {
                    scriptTreeSelector.dataProvider = hasAccess ? scriptCategories..categories : null;
                    scriptTreeSelector.selectedIndex = -1;
                    var preferredScripts:XMLList = scriptCategories..categories.(@id == defaultScriptTreeID);
                    if (preferredScripts.length() > 0) {
                        setScriptTree(preferredScripts[0]);
                    } else {
                        setScriptTree(scriptCategories..categories[0]);
                    }
                }
            }

            private function setScriptTree(scriptTree:XML = null):void {
                if (scriptTree == null) {
                    menu.dataProvider = null;
                } else {
                    menuXML = XML("<root>" + scriptTree + "</root>");
                    menu.dataProvider = menuXML;
                }
                selectedScriptLabel = "";
                selectedItem = null;
                showInit = true;
            }

            public function reset():void {
                showInit = true;
                hotKeySeq = "";
                hotKeyCombo.visible = false;
                hotKeyLabel.visible = false;
            }

            public function showOpeners():Boolean {
                if (!showInit)
                    return false;
                showInit = false;
                if (menu.dataProvider == null || menu.dataProvider.length == 0 || menu.dataProvider[0] == null)
                    return false;
                var rootChildren:XMLList = XML(XMLListCollection(menu.dataProvider)[0]).children();
                var openersFound:Boolean = false;
                var categoriesXML:XMLList = XML(rootChildren[0]).children();
                if (categoriesXML == null)
                    return false;
                var categoryXML:XML = null;
                for (var i:int = 0; i < categoriesXML.length(); i++) {
                    categoryXML = XML(categoriesXML[i]);
                    var nameAttr:String = categoryXML.@name;
                    if (nameAttr == null)
                        continue;
                    if (nameAttr.toLowerCase() == "openers") {
                        openersFound = true;
                        break;
                    }
                }
                if (!openersFound) {
                    categoryXML = XML(categoriesXML[0]);
                }
                allScriptLines = new ArrayCollection();
                if (categoryXML.children() != null && categoryXML.children().length() > 0)
                    scriptSelectedByXML(XML(categoryXML.children()[0]));
                else
                    scriptSelectedByXML(categoryXML);
                allHotKeys = new Array();
                for each (var cat:XML in XML(rootChildren[0])..category.(hasOwnProperty("@scriptPageID"))) {
                    loadScript(cat.@scriptPageID);
                }
                showingMenu = true;
                return true;
            }

            public function openMenu():void {
                if (showingMenu)
                    return;
                showingMenu = true;
                menu.openMenu();
            }

            public function closeMenu():void {
                showingMenu = false;
                menu.hideMenu();
            }

            private function filterByWords(sciptLine:ScriptLine):Boolean {
                if (searchText.text) {
                    var regExp:RegExp = /'(.*?)'|"(.*?)"|\S+/gmx;
                    var text:String = searchText.text;
                    var groups:Object;
                    var word:String
                    while (groups = regExp.exec(text)) {
                        while (!(word = groups.pop())) {
                            //just skipping empy groups
                        }
                        if (sciptLine.value.indexOf(word) < 0 && !(sciptLine.keywords != null && sciptLine.keywords.indexOf(word) >= 0)) {
                            return false;
                        }
                    }
                }
                return true;
            }

            private function search():void {
                
                scriptPageList.dataProvider = allScriptLines;
                scriptPageList.dataProvider.filterFunction = filterByWords;
                scriptPageList.dataProvider.refresh();
            }

            private function checkCancelKey(event:KeyboardEvent):void {
                if (event.keyCode == Keyboard.ESCAPE) {
                    clearFilter();
                }
            }

            private function clearFilter():void {
                searchText.text = "";
                scriptPageList.dataProvider = currentScriptPageLines;
                scriptPageList.dataProvider.refresh();
            }

            private function filterByHotKey(scriptLine:ScriptLine):Boolean {
                return (scriptLine.hotkey != null && scriptLine.hotkey.indexOf(hotKeySeq) == 0);
            }

            private function hotKeyFocusOut(event:FocusEvent):void {
                hotKeyCancel();
            }

            private function hotKeyClickHandler(event:MenuEvent):void {
                hotKeySeq = event.label;
                hotKey("");
            }

            private function hotKeyCancel():void {
                hotKeyLabel.visible = false;
                hotKeySeq = "";
                scriptPageList.dataProvider = currentScriptPageLines;
                scriptPageList.dataProvider.refresh();
                hotKeyCombo.close();
                hotKeyCombo.visible = false;
            }

            public function hotKey(key:String):void {
                var remainingKeys:Array = allHotKeys.filter(function(value:String, index:int, array:Array):Boolean {
                        return (value.indexOf(hotKeySeq + key) == 0);
                    });
                if (remainingKeys.length == 1) {
                    hotKeySeq += key;
                    scriptPageList.dataProvider = allScriptLines;
                    scriptPageList.dataProvider.filterFunction = filterByHotKey;
                    scriptPageList.dataProvider.refresh();
                    controller.scriptLinkClicked(scriptPageList.dataProvider[0], true);
                    hotKeyCancel();
                } else if (remainingKeys.length > 1) {
                    hotKeyLabel.visible = true;
                    hotKeyCombo.visible = true;
                    scriptPageList.dataProvider = allScriptLines;
                    scriptPageList.dataProvider.filterFunction = filterByHotKey;
                    hotKeyCombo.dataProvider = remainingKeys;
                    hotKeySeq += key;
                    scriptPageList.dataProvider.refresh();
                    hotKeyCombo.open();
                    hotKeyCombo.setFocus();
                }
            }

            public function isShowing():Boolean {
                return showingMenu;
            }

            public function scriptSelected(event:MenuEvent):void {
                if (event == null || event.item == null)
                    return;
                if (event.item.@isBranch == "true")
                    return;
                var itemXML:XML = XML(event.item);
                //this.selectedPageID = itemXML.@scriptPageID;
                scriptSelectedByXML(itemXML);
            }

            public function scriptSelectedByXML(itemXML:XML):void {
                var selectedMenu:int = 0;
                menu.dataProvider = null;
                selectedItem = itemXML;
                selectedScriptLabel = itemXML.@name;
                var deepness:int = 0;

                var hierarchy:ArrayCollection = new ArrayCollection();
                while (itemXML.parent() != null) {
                    if (itemXML.parent().name() == 'root') {
                        break;
                    }
                    hierarchy.addItemAt(itemXML.parent(), 0);
                    itemXML = itemXML.parent();
                }
                for (var x:int = 0; x < menuXML.children().length(); x++) {
                    if (menuXML.children()[x].@name == itemXML.@name) {
                        selectedMenu = x;
                    }
                }
                for (var x2:int = menuXML.children().length() - 1; x2 > selectedMenu; x2--) {
                    delete menuXML.children()[x2];
                }
                for (var x3:int = 1; x3 < hierarchy.length; x3++) {
                    menuXML.appendChild(XML(hierarchy[x3]).copy());
                }

                menu.dataProvider = menuXML;
                currentScriptPageLines = null;
                selectedPageID = selectedItem.@scriptPageID;
                var scriptPage:ScriptPage = scriptHandler.getScriptPage(selectedPageID);
                if (scriptPage) {
                    currentScriptPageLines = scriptPage.scriptLines;
                }
                clearFilter();
            }

            /**
             * This function called when Agent select script in "Main Menu" (=ScriptTree)
             * It checks if script was cached and if not send request to CR.
             *
             * @param	itemXML node wich represend clicked menu item
             */
            private function loadScript(scriptPageToLoad:String):void {
                if (scriptPageToLoad) {
                    // check cache by scriptPageID
                    var scriptPage:ScriptPage = scriptHandler.getScriptPage(scriptPageToLoad);
                    if (scriptPage == null) {
                        //sending request messsage to CR with scriptID
                        scriptHandler.retrieveScriptPage(this, scriptPageToLoad);
                    } else {
                        addScript(scriptPage);
                    }
                }
            }

            public function addScript(scriptPage:ScriptPage):void {
                allScriptLines.addAll(scriptPage.scriptLines);
                //setting cached script as data provider for CustomList
                allScriptLines.refresh();
                for each (var scriptLine:ScriptLine in scriptPage.scriptLines) {
                    if (scriptLine.hotkey) {
                        allHotKeys.push(scriptLine.hotkey);
                    }
                }
                if (selectedPageID == scriptPage.scriptPageID) {
                    currentScriptPageLines = scriptPage.scriptLines;
                }
            }

            private function menuItemLabel(item:Object):String {
                return item.@name;
            }

            private function changeScriptTree():void {
                scriptPageList.dataProvider = null;
                setScriptTree(scriptTreeSelector.selectedItem as XML);
                scriptTreeSelector.selectedIndex = -1;
                //Probably we should show openers for new ScriptTree to avoid one more step from Agent
                //however this can be removed by Adam request
                showOpeners();
                //hotKeyCombo.dataProvider = allHotKeys;
            }
        ]]>
    </mx:Script>
</mx:HBox>
