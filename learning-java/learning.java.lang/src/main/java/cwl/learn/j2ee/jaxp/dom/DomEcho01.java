package cwl.learn.j2ee.jaxp.dom;
/*
 * Copyright (c) 2006 Sun Microsystems, Inc.  All rights reserved.  U.S.
 * Government Rights - Commercial software.  Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and
 * applicable provisions of the FAR and its supplements.  Use is subject
 * to license terms.
 *
 * This distribution may include materials developed by third parties.
 * Sun, Sun Microsystems, the Sun logo, Java and J2EE are trademarks
 * or registered trademarks of Sun Microsystems, Inc. in the U.S. and
 * other countries.
 *
 * Copyright (c) 2006 Sun Microsystems, Inc. Tous droits reserves.
 *
 * Droits du gouvernement americain, utilisateurs gouvernementaux - logiciel
 * commercial. Les utilisateurs gouvernementaux sont soumis au contrat de
 * licence standard de Sun Microsystems, Inc., ainsi qu'aux dispositions
 * en vigueur de la FAR (Federal Acquisition Regulations) et des
 * supplements a celles-ci.  Distribue par des licences qui en
 * restreignent l'utilisation.
 *
 * Cette distribution peut comprendre des composants developpes par des
 * tierces parties. Sun, Sun Microsystems, le logo Sun, Java et J2EE
 * sont des marques de fabrique ou des marques deposees de Sun
 * Microsystems, Inc. aux Etats-Unis et dans d'autres pays.
 */


import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.File;
import java.io.IOException;


public class DomEcho01 {
   // Global value so it can be ref'd by the tree-adapter
   static Document document;

   public static void main(String[] argv) {
      String fileName = null;
      if (argv.length != 1) {
//            System.err.println("Usage: java DomEcho filename");
         fileName = "learning.java.lang/src/main/resources/cwl/learn/xml/slideSample01.xml";
//           System.exit(1);
      } else {
         fileName = argv[0];
      }

      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

      //factory.setValidating(true);
      //factory.setNamespaceAware(true);
      try {
         DocumentBuilder builder = factory.newDocumentBuilder();
         document = builder.parse(new File(fileName));
      } catch (SAXParseException spe) {
         // Error generated by the parser
         System.out.println("\n** Parsing error" + ", line " + spe.getLineNumber() + ", uri " + spe.getSystemId());
         System.out.println("   " + spe.getMessage());

         // Use the contained exception, if any
         Exception x = spe;

         if (spe.getException() != null) {
            x = spe.getException();
         }

         x.printStackTrace();
      } catch (SAXException sxe) {
         // Error generated during parsing)
         Exception x = sxe;

         if (sxe.getException() != null) {
            x = sxe.getException();
         }

         x.printStackTrace();
      } catch (ParserConfigurationException pce) {
         // Parser with specified options can't be built
         pce.printStackTrace();
      } catch (IOException ioe) {
         // I/O error
         ioe.printStackTrace();
      }
   } // main
}
