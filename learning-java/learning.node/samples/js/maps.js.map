{"version":3,"sources":["maps.js"],"names":["Departments","_depts","Map","key","desc","has","set","console","log","get","delete","clear","map","size","depts","addDepartment","all","getAll","forEach","val","getDepartment","clearDepartments"],"mappings":";;;;;;;;AAAA;IACMA,W;AAEF,2BAAc;AAAA;;AACV,aAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACH;;;;sCAEaC,G,EAAKC,I,EAAM;AACrB,gBAAI,CAAC,KAAKH,MAAL,CAAYI,GAAZ,CAAgBF,GAAhB,CAAL,EAA2B;AACvB,qBAAKF,MAAL,CAAYK,GAAZ,CAAgBH,GAAhB,EAAqBC,IAArB;AACH,aAFD,MAGK;AACDG,wBAAQC,GAAR,CAAY,uCAAuCL,GAAnD;AACH;AACJ;;;sCAEaA,G,EAAK;AACf,mBAAO,KAAKF,MAAL,CAAYQ,GAAZ,CAAgBN,GAAhB,CAAP;AACH;;;yCAEgBA,G,EAAK;AAClB,iBAAKF,MAAL,CAAYS,MAAZ,CAAmBP,GAAnB;AACH;;;2CAEkB;AACf,iBAAKF,MAAL,CAAYU,KAAZ;AACH;;;iCAEQ;AACL,mBAAO,KAAKV,MAAZ;AACH;;;;;;AAGL;;;AACA,IAAIW,MAAM,IAAIV,GAAJ,EAAV;AACAU,IAAIN,GAAJ,CAAQ,SAAR,EAAkB,eAAlB;AACAM,IAAIN,GAAJ,CAAQ,IAAR,EAAc,gCAAd;AACAM,IAAIN,GAAJ,CAAQ,IAAR,EAAc,gCAAd,E,CAAiD;AACjDC,QAAQC,GAAR,CAAY,iBAAiBI,IAAIH,GAAJ,CAAQ,IAAR,CAA7B;AACAF,QAAQC,GAAR,CAAYI,IAAIC,IAAhB;;AAEA,IAAID,IAAIP,GAAJ,CAAQ,SAAR,CAAJ,EAAwBE,QAAQC,GAAR,CAAY,WAAZ;AACxBI,IAAIF,MAAJ,CAAW,SAAX,E,CAAuB;AACvBE,IAAID,KAAJ,G,CAAa;;AAEbJ,QAAQC,GAAR,CAAY,IAAZ;AACA;AACA,IAAIM,QAAQ,IAAId,WAAJ,EAAZ;AACAc,MAAMC,aAAN,CAAoB,SAApB,EAA8B,eAA9B;AACAD,MAAMC,aAAN,CAAoB,IAApB,EAA0B,gCAA1B;AACAD,MAAMC,aAAN,CAAoB,SAApB,EAA+B,mBAA/B;;AAEA,IAAIC,MAAMF,MAAMG,MAAN,EAAV;;AAEA;AACAD,IAAIE,OAAJ,CAAY,UAASC,GAAT,EAAchB,GAAd,EAAmB;AAC3BI,YAAQC,GAAR,CAAY,oCAAoCL,GAApC,GAA0C,IAA1C,GAAiDgB,GAA7D;AACH,CAFD;;AAIAZ,QAAQC,GAAR,CAAY,IAAZ;AACAQ,IAAIE,OAAJ,CAAY,UAACC,GAAD,EAAMhB,GAAN;AAAA,WAAcI,QAAQC,GAAR,CAAYL,MAAM,IAAN,GAAagB,GAAzB,CAAd;AAAA,CAAZ;;AAEAZ,QAAQC,GAAR,CAAY,IAAZ;;;;;;AACA,yBAAsBQ,GAAtB,8HAA2B;AAAA;AAAA,YAAjBb,GAAiB;AAAA,YAAbgB,GAAa;;AACvBZ,gBAAQC,GAAR,CAAY,yCAAyCL,GAAzC,GAA+C,IAA/C,GAAsDgB,GAAlE;AACH;;;;;;;;;;;;;;;;AAEDZ,QAAQC,GAAR,CAAY,iCAAiCM,MAAMM,aAAN,CAAoB,IAApB,CAA7C;;AAEAN,MAAMO,gBAAN;AACAd,QAAQC,GAAR,CAAY,8CAA8CM,MAAMG,MAAN,GAAeJ,IAAzE","file":"maps.js","sourcesContent":["//Using Map\r\nclass Departments {\r\n\r\n    constructor() {\r\n        this._depts = new Map();\r\n    }\r\n\r\n    addDepartment(key, desc) {\r\n        if (!this._depts.has(key)) {\r\n            this._depts.set(key, desc);\r\n        }\r\n        else {\r\n            console.log('Duplicate department was blocked: ' + key);\r\n        }\r\n    }\r\n\r\n    getDepartment(key) {\r\n        return this._depts.get(key);\r\n    }\r\n\r\n    removeDepartment(key) {\r\n        this._depts.delete(key);\r\n    }\r\n\r\n    clearDepartments() {\r\n        this._depts.clear();\r\n    }\r\n\r\n    getAll() {\r\n        return this._depts;\r\n    }\r\n}\r\n\r\n//Simple example of Map\r\nvar map = new Map();\r\nmap.set('Finance','Process bills');\r\nmap.set('HR', 'Human Resources and Healthcare');\r\nmap.set('HR', 'Human Resources and Healthcare'); //Duplicate ignored\r\nconsole.log('Getting HR: ' + map.get('HR'));\r\nconsole.log(map.size);\r\n\r\nif (map.has('Finance')) console.log('Found it!');\r\nmap.delete('Finance'); //Delete single item\r\nmap.clear(); //Clear all items\r\n\r\nconsole.log('\\n');\r\n//No duplicate values allowed due to using Set\r\nvar depts = new Departments();\r\ndepts.addDepartment('Finance','Process bills');\r\ndepts.addDepartment('HR', 'Human Resources and Healthcare');\r\ndepts.addDepartment('Finance', 'Process the bills');\r\n\r\nlet all = depts.getAll();\r\n\r\n//Iterate through the set\r\nall.forEach(function(val, key) {\r\n    console.log('Found department using forEach ' + key + ': ' + val);\r\n});\r\n\r\nconsole.log('\\n');\r\nall.forEach((val, key) => console.log(key + ': ' + val));\r\n\r\nconsole.log('\\n');\r\nfor (let [key,val] of all) {\r\n    console.log('Found department using for of loop: ' + key + ': ' + val);\r\n}\r\n\r\nconsole.log('\\nFinding specific HR key : ' + depts.getDepartment('HR'));\r\n\r\ndepts.clearDepartments();\r\nconsole.log('\\nClearing all departments: Size is now: ' + depts.getAll().size);\r\n\r\n"]}