var haxe = haxe || {};
if (!haxe.io) {
  haxe.io = {};
}
;var $hxClasses = $hxClasses || {}, $estr = function() {
  return js.Boot.__string_rec(this, "");
};
$hxClasses.registerClass = function(aClass, name) {
  if (aClass && name) {
    aClass.__name__ = name.split(".");
    $hxClasses[name] = aClass;
  }
};
$hxClasses.extend = function(BaseClass, SubClass, subName) {
  $hxClasses.registerClass(SubClass, subName);
  if (BaseClass != null) {
    SubClass.__super__ = BaseClass;
    SubClass.prototype = $extend(BaseClass.prototype);
    SubClass.prototype.constructor = SubClass;
  }
  SubClass.prototype.callSuper = $hxClasses.callSuper;
};
$hxClasses.callSuper = function(methodName) {
  var me = this;
  return function() {
    me.constructor.__super__.prototype[methodName].apply(me, arguments);
  };
};
function $extend(from, fields) {
  var proto = Object.create(from);
  for (var name in fields) {
    proto[name] = fields[name];
  }
  return proto;
}
function $closure(o, f) {
  var m = o[f];
  if (m == null) {
    return null;
  }
  var f1 = function() {
    return m.apply(o, arguments);
  };
  f1.scope = o;
  f1.method = m;
  return f1;
}
function $noop() {
}
ValueType = $hxClasses["ValueType"] = {__ename__:["ValueType"], __constructs__:["TNull", "TInt", "TFloat", "TBool", "TObject", "TFunction", "TClass", "TEnum", "TUnknown"]};
ValueType.TInt = ["TInt", 1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TUnknown = ["TUnknown", 8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
ValueType.TFunction = ["TFunction", 5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TNull = ["TNull", 0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TEnum = function(e) {
  var $x = ["TEnum", 7, e];
  $x.__enum__ = ValueType;
  $x.toString = $estr;
  return $x;
};
ValueType.TFloat = ["TFloat", 2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TClass = function(c) {
  var $x = ["TClass", 6, c];
  $x.__enum__ = ValueType;
  $x.toString = $estr;
  return $x;
};
ValueType.TBool = ["TBool", 3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject", 4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
haxe.StackItem = $hxClasses["haxe.StackItem"] = {__ename__:["haxe", "StackItem"], __constructs__:["CFunction", "Module", "FilePos", "Method", "Lambda"]};
haxe.StackItem.Module = function(m) {
  var $x = ["Module", 1, m];
  $x.__enum__ = haxe.StackItem;
  $x.toString = $estr;
  return $x;
};
haxe.StackItem.FilePos = function(s, file, line) {
  var $x = ["FilePos", 2, s, file, line];
  $x.__enum__ = haxe.StackItem;
  $x.toString = $estr;
  return $x;
};
haxe.StackItem.Lambda = function(v) {
  var $x = ["Lambda", 4, v];
  $x.__enum__ = haxe.StackItem;
  $x.toString = $estr;
  return $x;
};
haxe.StackItem.CFunction = ["CFunction", 0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Method = function(classname, method) {
  var $x = ["Method", 3, classname, method];
  $x.__enum__ = haxe.StackItem;
  $x.toString = $estr;
  return $x;
};
haxe.io.Error = $hxClasses["haxe.io.Error"] = {__ename__:["haxe", "io", "Error"], __constructs__:["Blocked", "Overflow", "OutsideBounds", "Custom"]};
haxe.io.Error.Custom = function(e) {
  var $x = ["Custom", 3, e];
  $x.__enum__ = haxe.io.Error;
  $x.toString = $estr;
  return $x;
};
haxe.io.Error.OutsideBounds = ["OutsideBounds", 2];
haxe.io.Error.OutsideBounds.toString = $estr;
haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
haxe.io.Error.Overflow = ["Overflow", 1];
haxe.io.Error.Overflow.toString = $estr;
haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
haxe.io.Error.Blocked = ["Blocked", 0];
haxe.io.Error.Blocked.toString = $estr;
haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
if (!Object.create) {
  Object.create = function(proto) {
    function F() {
    }
    F.prototype = proto;
    return new F;
  };
}
;haxe.Log = function() {
};
$hxClasses["haxe.Log"] = haxe.Log;
haxe.Log.__name__ = ["haxe", "Log"];
haxe.Log.trace = function(v, infos) {
  js.Boot.__trace(v, infos);
};
haxe.Log.clear = function() {
  js.Boot.__clear_trace();
};
haxe.Log.prototype.__class__ = haxe.Log;
var com = com || {};
com.inq = com.inq || {};
com.inq.events = com.inq.events || {};
com.inq.net = com.inq.net || {};
com.inq.stage = com.inq.stage || {};
com.inq.ui = com.inq.ui || {};
com.inq.utils = com.inq.utils || {};
com.inq.aria = com.inq.aria || {};
com.inq.events.EventDispatcher = function() {
  this.eventListeners = {};
};
$hxClasses["com.inq.events.EventDispatcher"] = com.inq.events.EventDispatcher;
com.inq.events.EventDispatcher.__name__ = ["com", "inq", "events", "EventDispatcher"];
com.inq.events.EventDispatcher.domEventHandler = function(handler) {
  var instance = handler.scope;
  var method = handler.method;
  var newClosure = function(ev) {
    var target = this;
    var closure = arguments.callee;
    var object = closure.object;
    var method1 = closure.method;
    if (ev == null) {
      var doc = target.ownerDocument;
      var win = doc.parentWindow ? doc.parentWindow : doc.defaultView;
      ev = win.Event;
    }
    try {
      ev.target = target;
    } catch (e) {
    }
    try {
      ev.srcElement = target;
    } catch (e) {
    }
    method1.apply(object, [ev]);
  };
  newClosure.method = method;
  newClosure.object = instance;
  return newClosure;
};
com.inq.events.EventDispatcher.prototype.addEventListener = function(type, listener, useCapture, priority, useWeakReference) {
  this.eventListeners[type] = listener;
};
com.inq.events.EventDispatcher.prototype.willTrigger = function(type) {
  return false;
};
com.inq.events.EventDispatcher.prototype.toString = function() {
  return "EventDispacher";
};
com.inq.events.EventDispatcher.prototype.removeEventListener = function(type, listener, useCapture) {
  if (this.eventListeners[type] == listener) {
    this.eventListeners[type] = null;
  }
};
com.inq.events.EventDispatcher.prototype.hasEventListener = function(type) {
  return this.eventListeners[type] != null;
};
com.inq.events.EventDispatcher.prototype.dispatchEvent = function(event) {
  var listener = this.eventListeners[event.type];
  if (listener != null) {
    try {
      listener(event);
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
      } else {
        throw e;
      }
    }
  }
  return true;
};
com.inq.events.EventDispatcher.prototype.eventListeners = null;
com.inq.events.EventDispatcher.prototype.__class__ = com.inq.events.EventDispatcher;
com.inq.ui.Container = function(_id, _parentNode, document) {
  com.inq.events.EventDispatcher.call(this);
  this._bgi = null;
  this._visible = true;
  this._clientStage = js.Boot.__instanceof(this, com.inq.ui.ClientBody);
  this._isSprite = null;
  this.styles = {};
  this.attributeMap = {};
  this.parent = null;
  this.document = document != null ? document : window.document;
  if (com.inq.ui.SkinLoader.skinInClient) {
    this.document = window.parent.document;
  }
  if (null != _id) {
    var element = com.inq.ui.Container.getElementById(_id);
    if (element != null) {
      this.styles["zIndex"] = null;
      this.styles["visible"] = "true";
      this.styles["left"] = this.styles["top"] = this.styles["width"] = this.styles["height"] = this.styles["enabled"] = null;
      this._div = element;
      this._parent = _parentNode == null ? this._div.parentNode : _parentNode;
      this.styles["id"] = _id;
    }
  }
  if (this._div != null) {
    this._div.container = this;
  } else {
    this._style = "position: absolute; left: 0px; top: 0px; width: 100px; height: 60px; overflow: hidden;";
    this.styles["zIndex"] = null;
    this.styles["visible"] = "true";
    this.styles["left"] = this.styles["top"] = this.styles["enabled"] = null;
    this.styles["width"] = null;
    this.styles["height"] = null;
    this._div = this.document.createElement("DIV");
    this._div.style.cssText = this._style;
    this.eventListeners = {};
  }
  this.addCssClass(this._div);
};
$hxClasses.extend(com.inq.events.EventDispatcher, com.inq.ui.Container, "com.inq.ui.Container");
com.inq.ui.Container.getElementById = function(_id) {
  var element = null;
  if (com.inq.ui.Container.isString(_id)) {
    if (com.inq.ui.SkinLoader.skinInClient && _id.indexOf(com.inq.ui.Container.CLIENT_SPACE_PREFIX) == 0 || _id.indexOf(com.inq.ui.Container.LEGACY_PREFIX) == 0) {
      element = com.inq.ui.Container._getElementById(_id, window.parent.document);
    }
    if (element == null) {
      element = com.inq.ui.Container._getElementById(com.inq.ui.Container.CLIENT_SPACE_PREFIX + Std.string(_id), window.parent.document);
    }
    if (element == null) {
      element = com.inq.ui.Container._getElementById(_id);
    }
  } else {
    element = _id;
  }
  return element;
};
com.inq.ui.Container._getElementById = function(id, doc) {
  if (doc == null) {
    doc = window.document;
  }
  var el = doc.getElementById(id);
  if (el != null && el.id != id) {
    var allElements = doc.getElementsByTagName("*");
    for (var i = 0;i < allElements.length;i++) {
      el = allElements[i];
      if (el != null && el.id == id) {
        return el;
      }
    }
    return null;
  }
  return el;
};
com.inq.ui.Container.find = function(label) {
  var element = window.document.getElementById(label);
  var found = element != null ? element.container : null;
  return found;
};
com.inq.ui.Container.encodeSize = function(size, defaultSuffix) {
  if (defaultSuffix == null) {
    defaultSuffix = "px";
  }
  var re = new RegExp("^[+-]?\\d*$");
  if (re.test(size)) {
    return size + defaultSuffix;
  } else {
    return size;
  }
};
com.inq.ui.Container.isString = function(ob) {
  if (null == ob) {
    return false;
  }
  return js.Boot.__instanceof(ob, String);
};
com.inq.ui.Container.show = function(id) {
  var cntr = Application.getContainer(id);
  if (cntr != null && (id !== "chat" || !com.inq.flash.client.control.MinimizeManager.isMinimized()) && (id !== "btnEmail" || com.inq.flash.client.chatskins.EmailMgr.getRequestStatus() !== com.inq.flash.client.chatskins.EmailMgr.REQUEST_STATUS_REQUESTED)) {
    cntr.setVisible("true");
  }
};
com.inq.ui.Container.hide = function(id) {
  if (id === "email") {
    com.inq.flash.client.chatskins.EmailMgr.actionCancelEmail();
  } else {
    var cntr = Application.getContainer(id);
    if (cntr != null) {
      cntr.setVisible("false");
    }
  }
};
com.inq.ui.Container.prototype.addMxmlListeners = function() {
  if (this.styles["onClick"]) {
    if (com.inq.ui.CommandParser.executeLogic(this.styles["onClick"], true, this)) {
      this.setOnClick($bind(this, this.onClick));
    }
  }
  if (this.styles["onInit"]) {
    if (com.inq.ui.CommandParser.executeLogic(this.styles["onInit"], true, this)) {
      com.inq.ui.CommandParser.executeLogic(this.styles["onInit"], false, this);
    }
  }
  if (this.styles["onVisible"]) {
    com.inq.ui.CommandParser.executeLogic(this.styles["onVisible"], true, this);
    if (this.getVisible()) {
      com.inq.ui.CommandParser.executeLogic(this.styles["onVisible"], false, this);
    }
  }
  if (this.styles["onHidden"]) {
    com.inq.ui.CommandParser.executeLogic(this.styles["onHidden"], true, this);
    if (!this.getVisible()) {
      com.inq.ui.CommandParser.executeLogic(this.styles["onHidden"], false, this);
    }
  }
  if (this.styles["onEnable"]) {
    com.inq.ui.CommandParser.executeLogic(this.styles["onEnable"], true, this);
    if (this.getEnabled()) {
      com.inq.ui.CommandParser.executeLogic(this.styles["onEnable"], false, this);
    }
  }
};
com.inq.ui.Container.prototype.onClick = function() {
  com.inq.ui.CommandParser.executeLogic(this.styles["onClick"], false, this);
};
com.inq.ui.Container.prototype.getNewImage = function() {
  var newImage = new Image;
  var doc = newImage.ownerDocument;
  var containerDoc = this._div.ownerDocument;
  if (doc != this.document) {
    try {
      if (!!containerDoc["importNode"]) {
        return containerDoc.importNode(newImage, false);
      }
    } catch (e) {
      haxe.Log.trace("New image could not be imported: " + Std.string(e), {fileName:"Container.hx", lineNumber:1393, className:"com.inq.ui.Container", methodName:"getNewImage"});
    }
  }
  return newImage;
};
com.inq.ui.Container.prototype.getIsSprite = function() {
  if (this._isSprite == null) {
    this._isSprite = !(null == this.getStyle("sprite-width") && null == this.getStyle("sprite-height") && null == this.getStyle("sprite-left") && null == this.getStyle("sprite-top"));
  }
  return this._isSprite;
};
com.inq.ui.Container.prototype.loadContent = function() {
};
com.inq.ui.Container.prototype.renderCanvas = function(canvas) {
  if (!!canvas.sourceImage) {
    var context = null;
    canvas.height = canvas.spriteHeight;
    canvas.width = canvas.spriteWidth;
    canvas.style.position = "absolute";
    var imageElement = canvas.sourceImage;
    canvas.style.top = "0px";
    canvas.style.bottom = "";
    canvas.style.left = "0px";
    canvas.style.right = "";
    canvas.style.width = "" + Std.string(canvas.spriteWidth) + "px";
    canvas.style.height = "" + Std.string(canvas.spriteHeight) + "px";
    context = canvas.getContext("2d");
    context.drawImage(imageElement, canvas.spriteLeft, canvas.spriteTop, canvas.spriteWidth, canvas.spriteHeight, 0, 0, canvas.spriteWidth, canvas.spriteHeight);
    var dh = canvas.spriteHeight;
    var dw = canvas.spriteWidth;
    var styleHeight = this.getStyle("height");
    if (this.getStyle("height") == null) {
      if (this.getStyle("bottom") != null && this.getStyle("top") != null) {
        var bot = "" + this.evaluatePosition(this.getStyle("bottom"));
        var top = "" + this.evaluatePosition(this.getStyle("top"));
        canvas.style.bottom = canvas.style.top = "0px";
        canvas.style.height = "100%";
        dh = this._div.clientHeight;
      } else {
        dh = this.calculateHeight();
      }
    }
    if (dh == 0) {
      dh = canvas.spriteHeight;
    }
    var styleWidth = this.getStyle("width");
    if (this.getStyle("width") == null) {
      if (this.getStyle("right") != null && this.getStyle("left") != null) {
        var rgt = "" + this.evaluatePosition(this.getStyle("right"));
        var lft = "" + this.evaluatePosition(this.getStyle("left"));
        canvas.style.right = canvas.style.left = "0px";
        canvas.style.width = "100%";
        dw = this._div.clientWidth;
      } else {
        dw = this.calculateWidth();
      }
    }
    if (dw == 0) {
      dw = canvas.spriteWidth;
    }
    context = canvas.getContext("2d");
    context.drawImage(imageElement, canvas.spriteLeft, canvas.spriteTop, canvas.spriteWidth, canvas.spriteHeight, 0, 0, dw, dh);
    canvas.style.width = "100%";
    canvas.style.height = "100%";
  } else {
    haxe.Log.trace("Canvas source image is missing", {fileName:"Container.hx", lineNumber:1354, className:"com.inq.ui.Container", methodName:"renderCanvas"});
  }
};
com.inq.ui.Container.prototype.calculateHeight = function() {
  var top = this.evaluatePosition(this.getStyle("top"));
  var bottom = this.evaluatePosition(this.getStyle("bottom"));
  var height = this._div.clientHeight;
  height -= bottom - top;
  return height > 0 ? height : 0;
};
com.inq.ui.Container.prototype.calculateWidth = function() {
  var left = this.evaluatePosition(this.getStyle("left"));
  var right = this.evaluatePosition(this.getStyle("right"));
  var width = this._div.clientWidth;
  width -= right - left;
  return width > 0 ? width : 0;
};
com.inq.ui.Container.prototype.findChild = function(childId) {
  for (var i = 0;i < this.contains.length;i++) {
    var child = this.contains[i];
    if (child && child._div) {
      if (child._div.id == childId) {
        return child;
      }
    }
  }
  return null;
};
com.inq.ui.Container.prototype.setScrolling = function(val) {
};
com.inq.ui.Container.prototype.updateSrc = function(val) {
};
com.inq.ui.Container.prototype.setSrc = function(val) {
};
com.inq.ui.Container.prototype.removeFrom = function(parentContainer) {
  if (parentContainer == null) {
    parentContainer = this.parent;
  }
  if (parentContainer != null) {
    parentContainer._div.removeChild(this._div);
    if (parentContainer.contains == null) {
      return;
    }
    for (var i = 0;i < parentContainer.contains.length;i++) {
      if (parentContainer.contains[i] == this) {
        parentContainer.contains[i] = null;
      }
    }
    while (parentContainer.contains.length > 0 && parentContainer.contains[parentContainer.contains.length - 1] == null) {
      parentContainer.contains.pop();
    }
  }
};
com.inq.ui.Container.prototype.attachTo = function(parentContainer, after) {
  var ob = parentContainer._div;
  var obSibling = after != null ? after._div : null;
  if (!js.Boot.__instanceof(parentContainer, com.inq.ui.ClientBody)) {
    if (parentContainer.contains == null) {
      parentContainer.contains = new Array;
    }
    if (this._div.id != com.inq.ui.Container.SC_TITLEBAR && this._div.id != com.inq.ui.Container.SC_RESIZE && this._div.id != "tcChat_Skin") {
      parentContainer.contains[parentContainer.contains.length] = this;
    }
  }
  this.attachToElement(ob, obSibling);
  this.parent = parentContainer;
  this._clientStage = parentContainer._clientStage;
};
com.inq.ui.Container.prototype.attachToElement = function(ob, after) {
  this._parent = ob;
  if (this._div.parentNode != null && this._div.parentNode.nodeName.indexOf("#") != 0) {
    return;
  }
  if (null != this.styles["id"]) {
    this.setID(this.styles["id"]);
  }
  try {
    if (after == null) {
      ob.appendChild(this._div);
    } else {
      if (after.nextSibling == null) {
        ob.appendChild(this._div);
      } else {
        ob.insertBefore(this._div, after.nextSibling);
      }
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("ERROR: " + Std.string(e), {fileName:"Container.hx", lineNumber:1153, className:"com.inq.ui.Container", methodName:"attachToElement"});
    } else {
      throw e;
    }
  }
};
com.inq.ui.Container.prototype.resizer = function(cntns) {
  if (cntns == null || cntns.length == 0) {
    return;
  }
  for (var i = 0;i < cntns.length;i++) {
    try {
      var o = cntns[i];
      if (o == null) {
        continue;
      }
      o.resize();
      if (o.contains != null && o.contains.length > 0) {
        this.resizer(o.contains);
      }
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
      } else {
        throw e;
      }
    }
  }
};
com.inq.ui.Container.prototype.resize = function() {
  this.applyStyle();
};
com.inq.ui.Container.prototype.applyStyle = function() {
  this.buildStyle();
  if (this._div != null) {
    this._div.style.cssText = this._style;
    var adjustment;
    adjustment = Std.parseInt(this._div.style.borderLeftWidth) + Std.parseInt(this._div.style.borderRightWidth);
    if (adjustment > 0) {
      this._div.style.width = Math.max(Std.parseInt(this._div.style.width) - adjustment, 0) + "px";
    }
    adjustment = Std.parseInt(this._div.style.borderTopWidth) + Std.parseInt(this._div.style.borderBottomWidth);
    if (adjustment > 0) {
      this._div.style.height = Math.max(Std.parseInt(this._div.style.height) - adjustment, 0) + "px";
    }
  }
};
com.inq.ui.Container.prototype.evaluateString = function(value) {
  try {
    value = StringTools.trim(value);
    if (value.charAt(0) == "{") {
      var origValue = value;
      try {
        var ix = value.lastIndexOf("}");
        if (ix == -1) {
          throw "Curly Braces not balanced";
        }
        value = HxOverrides.substr(value, 1, ix - 1);
        var rSym = new EReg("{([a-zA-Z_][a-zA-Z0-9_]*[.][a-zA-Z_][a-zA-Z.0-9_]*)}", "m");
        var sym;
        while (rSym.match(value)) {
          try {
            sym = rSym.matched(1);
          } catch (e) {
            break;
          }
          var val = com.inq.ui.CommandParser.evaluateSymbolicReference(sym);
          value = rSym.matchedLeft() + val + rSym.matchedRight();
        }
        return value;
      } catch (e) {
        haxe.Log.trace("Error evaluating '" + origValue + "' to '" + value + "': " + Std.string(e), {fileName:"Container.hx", lineNumber:1068, className:"com.inq.ui.Container", methodName:"evaluateString", customParams:[e]});
      }
      return "";
    } else {
      return value;
    }
  } catch (e) {
    haxe.Log.trace("parse error: " + Std.string(e), {fileName:"Container.hx", lineNumber:1076, className:"com.inq.ui.Container", methodName:"evaluateString", customParams:[e]});
  }
  return "";
};
com.inq.ui.Container.prototype.evaluatePosition = function(value) {
  if (value) {
    try {
      value = StringTools.trim(value);
      if (value.charAt(0) == "{") {
        var origValue = value;
        try {
          var ix = value.lastIndexOf("}");
          if (ix == -1) {
            throw "Curly Braces not balanced";
          }
          value = HxOverrides.substr(value, 1, ix - 1);
          var rSym = new EReg("([a-z][a-z.0-9]*)", "im");
          var sym;
          while (rSym.match(value)) {
            try {
              sym = rSym.matched(1);
            } catch (e) {
              break;
            }
            var val = com.inq.ui.CommandParser.evaluateSymbolicReference(sym);
            value = rSym.matchedLeft() + val + rSym.matchedRight();
          }
          var ret = window.eval(value);
          if ("Infinity" == "" + ret) {
            throw "Divide by zero error";
          }
          return Math.round(ret) | 0;
        } catch (e) {
        }
        return 0;
      } else {
        return Std.parseInt(value);
      }
    } catch (e) {
      haxe.Log.trace("parse error: " + Std.string(e), {fileName:"Container.hx", lineNumber:1019, className:"com.inq.ui.Container", methodName:"evaluatePosition", customParams:[e]});
    }
  }
  return 0;
};
com.inq.ui.Container.prototype.getParentHeight = function() {
  var h = this._parent.clientHeight;
  var isIE = window.navigator.userAgent.indexOf("MSIE") != -1 || window.navigator.userAgent.indexOf("Trident") != -1;
  if (isIE && this instanceof Application && this._parent != null && this._parent.id != "Skin") {
    var docHeight = document.documentElement.clientHeight;
    if (h != docHeight) {
      h = docHeight;
    }
  }
  return h;
};
com.inq.ui.Container.prototype.addCssTextProperty = function(property, value) {
  this._style += this.createCssText(property, value);
};
com.inq.ui.Container.prototype.createCssText = function(property, value) {
  if (/[A-Z]/.test(property)) {
    property = property.replace(/([A-Z])/g, function(match) {
      return "-" + match.toLowerCase();
    });
  }
  return property + ": " + value + ";";
};
com.inq.ui.Container.prototype.buildCssText = function(initStyle, clientElement) {
  var width = this.styles["width"];
  var left = this.styles["left"];
  var top = this.styles["top"];
  var height = this.styles["height"];
  var right = this.styles["right"];
  var bottom = this.styles["bottom"];
  var pw;
  var ph;
  if (js.Boot.__instanceof(this, Application)) {
    pw = Std.parseInt(window.frameElement.style.width);
    ph = Std.parseInt(window.frameElement.style.height);
  } else {
    pw = this._parent == null ? width : this._parent.clientWidth;
    ph = this._parent == null ? height : this.getParentHeight();
  }
  if (null != width && com.inq.ui.Container.isString(width) && "%" == HxOverrides.substr(width, width.length - 1, null)) {
    width = "" + this.evaluatePosition(width) * pw / 100;
  }
  if (null != height && com.inq.ui.Container.isString(height) && "%" == HxOverrides.substr(height, height.length - 1, null)) {
    height = "" + this.evaluatePosition(height) * ph / 100;
  }
  if (null == height && this._div != null) {
    height = Std.string(Math.max(this._div.clientHeight, 0));
  }
  if (null == width && this._div != null) {
    width = Std.string(Math.max(this._div.clientWidth, 0));
  }
  if (left != null && right != null) {
    left = "" + this.evaluatePosition(left);
    width = "" + Math.max(pw - this.evaluatePosition(right) - this.evaluatePosition(left), 0);
  } else {
    if (left != null && right == null) {
      left = "" + this.evaluatePosition(left);
    } else {
      if (left == null && right != null) {
        left = "" + (pw - (this.evaluatePosition(right) + this.evaluatePosition(width)));
      }
    }
  }
  if (top != null && bottom != null) {
    top = "" + this.evaluatePosition(top);
    height = "" + Math.max(ph - this.evaluatePosition(bottom) - this.evaluatePosition(top), 0);
  } else {
    if (top != null && bottom == null) {
      top = "" + this.evaluatePosition(top);
    } else {
      if (top == null && bottom != null) {
        top = "" + (ph - (this.evaluatePosition(bottom) + this.evaluatePosition(height)));
      }
    }
  }
  this._style = initStyle || "";
  this.addCssTextProperty("z-index", this.styles["zIndex"] || "101");
  if (this.styles["visibility"] == "collapse") {
    if (left != null && !clientElement) {
      this.addCssTextProperty("left", com.inq.ui.Container.encodeSize(left));
    }
    if (top != null && !clientElement) {
      this.addCssTextProperty("top", com.inq.ui.Container.encodeSize(top));
    }
    this._style += "height:0px;width:0px;display:none;visibility:collapse";
    return this._style;
  }
  var styleValue = "";
  for (var keyname in this.styles) {
    if (!this.styles.hasOwnProperty(keyname) || "backgroundSize" == keyname) {
      continue;
    }
    styleValue = this.styles[keyname];
    if ("backgroundImage" == keyname && styleValue != null) {
      if (this.styles["backgroundSize"] == "100%") {
        if (height != null && height.length > 0 && height.indexOf("%") == -1) {
          height = parseInt(height) >= 0 ? height : "0";
        }
        if (width != null && width.length > 0 && width.indexOf("%") == -1) {
          width = parseInt(width) >= 0 ? width : "0";
        }
        if (width != null) {
          this._bgi.style.width = com.inq.ui.Container.encodeSize(width);
        }
        if (height != null) {
          this._bgi.style.height = com.inq.ui.Container.encodeSize(height);
        }
      } else {
        if (this._bgi) {
          this._bgi.style.width = this._bgi.style.height = "0px";
        }
        this.addCssTextProperty("background-image", "url('" + this.styles["backgroundImage"] + "')");
      }
      continue;
    }
    switch(keyname) {
      case "height":
      ;
      case "width":
      ;
      case "top":
      ;
      case "bottom":
      ;
      case "left":
      ;
      case "right":
        if (this._clientStage) {
          this.addCssTextProperty(keyname, com.inq.ui.Container.encodeSize(styleValue));
        } else {
          if (clientElement) {
            if (keyname == "top" && !this.styles["bottom"] || keyname == "left" && !this.styles["right"]) {
              this.addCssTextProperty(keyname, com.inq.ui.Container.encodeSize(this.evaluatePosition(styleValue)));
            }
          }
        }
        break;
      case "margin-left":
        if (clientElement) {
          this.addCssTextProperty("left", com.inq.ui.Container.encodeSize(this.evaluatePosition(styleValue)));
        } else {
          this.addCssTextProperty(keyname, com.inq.ui.Container.encodeSize(styleValue));
        }
        break;
      case "margin-right":
        if (clientElement) {
          this.addCssTextProperty("right", com.inq.ui.Container.encodeSize(this.evaluatePosition(styleValue)));
        } else {
          this.addCssTextProperty(keyname, com.inq.ui.Container.encodeSize(styleValue));
        }
        break;
      case "color":
      ;
      case "cursor":
      ;
      case "backgroundColor":
      ;
      case "background-color":
      ;
      case "borderColor":
      ;
      case "border-color":
      ;
      case "borderStyle":
      ;
      case "border-style":
      ;
      case "fontFamily":
      ;
      case "textAlign":
      ;
      case "text-align":
      ;
      case "verticalAlign":
        this.addCssTextProperty(keyname, styleValue);
        break;
      case "alpha":
        this.addCssTextProperty("filter", "alpha(opacity=" + styleValue + ")");
        this.addCssTextProperty("-moz-opacity", "0." + styleValue);
        this.addCssTextProperty("opacity", "0." + styleValue);
        break;
      case "border-width":
      ;
      case "borderThickness":
      ;
      case "border-thickness":
        this.addCssTextProperty("border-width", com.inq.ui.Container.encodeSize(styleValue));
        break;
      case "border-thickness-left":
        this.addCssTextProperty("border-left-width", com.inq.ui.Container.encodeSize(styleValue));
        break;
      case "border-thickness-right":
        this.addCssTextProperty("border-right-width", com.inq.ui.Container.encodeSize(styleValue));
        break;
      case "border-thickness-top":
        this.addCssTextProperty("border-top-width", com.inq.ui.Container.encodeSize(styleValue));
        break;
      case "border-thickness-bottom":
        this.addCssTextProperty("border-bottom-width", com.inq.ui.Container.encodeSize(styleValue));
        break;
      case "border-radius":
        this.addCssTextProperty("-moz-border-radius", com.inq.ui.Container.encodeSize(styleValue));
        this.addCssTextProperty("-webkit-border-radius", com.inq.ui.Container.encodeSize(styleValue));
        this.addCssTextProperty("border-radius", com.inq.ui.Container.encodeSize(styleValue));
        break;
      case "fontSize":
        this.addCssTextProperty("font-size", com.inq.ui.Container.encodeSize(styleValue, "pt"));
        break;
      case "backgroundGradientColors":
        var bc = HxOverrides.substr(styleValue, 1, styleValue.length - 2);
        var bca = bc.split(",");
        this.addCssTextProperty("background-color", bca[0]);
        break;
      case "visible":
        this.addCssTextProperty("display", styleValue == "true" ? "block" : "none");
        break;
      default:
        if (keyname.indexOf(":") == -1 && typeof styleValue == "string" && styleValue.indexOf(":") == -1 && styleValue.indexOf(";") == -1 && styleValue.indexOf("@") == -1) {
          this.addCssTextProperty(keyname, styleValue);
        }
      ;
    }
  }
  if (left != null && !clientElement) {
    this.addCssTextProperty("left", com.inq.ui.Container.encodeSize(left));
  }
  if (top != null && !clientElement) {
    this.addCssTextProperty("top", com.inq.ui.Container.encodeSize(top));
  }
  if (height != null && height != "0") {
    this.addCssTextProperty("height", com.inq.ui.Container.encodeSize(height));
  }
  if (width != null && width != "0") {
    this.addCssTextProperty("width", com.inq.ui.Container.encodeSize(width));
  }
  return this._style;
};
com.inq.ui.Container.prototype.buildStyleOriginal = function() {
  this.buildNewStyle();
};
com.inq.ui.Container.prototype.buildChatElementStyle = function() {
  this.buildNewStyle();
};
com.inq.ui.Container.prototype.buildNewStyle = function() {
  this._style = this.buildCssText("position: absolute; overflow: hidden;");
};
com.inq.ui.Container.prototype.fixCssClasses = function() {
  var children = this._div.getElementsByTagName("*");
  for (var i = 0;i < children.length;i++) {
    this.addCssClass(children[i]);
  }
};
com.inq.ui.Container.prototype.addCssClass = function(element) {
  if (element == null || element.nodeName.toUpperCase() == "BODY" || element.id == null || element.id == "" || element.id.indexOf(com.inq.ui.Container.CLIENT_SPACE_PREFIX) != 0 && element.id.indexOf(com.inq.ui.Container.LEGACY_PREFIX) != 0) {
    return;
  }
  if (element.className == null || element.className == "") {
    element.className = com.inq.ui.Container.CHAT_CLASS;
  } else {
    if (element.className.indexOf(com.inq.ui.Container.CHAT_CLASS) == -1) {
      element.className += " " + com.inq.ui.Container.CHAT_CLASS;
    }
  }
};
com.inq.ui.Container.prototype.buildStyle = function() {
  if (com.inq.utils.Capabilities._isWebKit() && com.inq.ui.SkinLoader.skinInClient || com.inq.ui.SkinLoader.hasClientBody) {
    this.fixCssClasses();
    if (this.parent != null && js.Boot.__instanceof(this.parent, com.inq.ui.ClientBody)) {
      this.buildClientElementStyle();
    } else {
      this.buildNewStyle();
    }
  } else {
    this.buildNewStyle();
  }
};
com.inq.ui.Container.prototype.buildClientElementStyle = function() {
  this._style = this.buildCssText("", true);
};
com.inq.ui.Container.prototype.setVisible = function(val) {
  try {
    var wasVisible = this._visible;
    this._visible = !("false" == val || null == val || false == val);
    if (this._visible) {
      this.fireVisible();
    } else {
      this.fireHidden();
    }
    var _isPersistent = window.parent.name == "_inqPersistentChat";
    if (this._div != null && (this._div.id == com.inq.ui.Container.SC_RESIZE || this._div.id == com.inq.ui.Container.SC_TITLEBAR) && _isPersistent) {
      this._visible = false;
      this._div.style.cssText = "display: none;";
      return;
    }
    this.styles["visible"] = this._visible ? "true" : "false";
    if (this.parent == null && this._div != null) {
      this._div.style.display = this._visible ? "" : "none";
      return;
    }
    this.resize();
    this.resizer(this.contains);
  } catch (e) {
  }
};
com.inq.ui.Container.prototype.fireVisible = function() {
  com.inq.ui.CommandParser.executeLogic(this.styles["onVisible"], false, this);
};
com.inq.ui.Container.prototype.fireHidden = function() {
  com.inq.ui.CommandParser.executeLogic(this.styles["onHidden"], false, this);
};
com.inq.ui.Container.prototype.getVisible = function() {
  return this._visible;
};
com.inq.ui.Container.prototype.setWidth = function(val) {
  this.styles["width"] = "" + Std.string(val);
};
com.inq.ui.Container.prototype.getWidth = function() {
  if (this.styles["visibility"] == "collapse") {
    return 0;
  }
  if (this.styles["width"] != null) {
    return this.evaluatePosition("" + this.styles["width"]);
  }
  var sWidth = this._div.style.width;
  if (sWidth != null) {
    return Std.parseInt("" + sWidth);
  }
  return this._div.clientWidth;
};
com.inq.ui.Container.prototype.setHeight = function(val) {
  this.styles["height"] = val;
};
com.inq.ui.Container.prototype.getHeight = function() {
  if (this.styles["visibility"] == "collapse") {
    return 0;
  }
  if (this.styles["height"] != null) {
    return this.evaluatePosition("" + this.styles["height"]);
  }
  return Std.parseInt("" + Std.string(this._div.style.height));
};
com.inq.ui.Container.prototype.getStyle = function(styleName) {
  return this.styles[styleName];
};
com.inq.ui.Container.prototype.setStyle = function(styleName, styleValue) {
  this.styles[styleName] = styleValue;
  if (this.parent == null) {
    return;
  }
  this.resize();
  this.resizer(this.contains);
};
com.inq.ui.Container.prototype.initStyle = function(styleName, styleValue) {
  this.styles[styleName] = styleValue;
};
com.inq.ui.Container.prototype.initAttribute = function(attName, attValue) {
  this.attributeMap[attName] = attValue;
};
com.inq.ui.Container.prototype.applyAttributeMap = function() {
  for (var myKey in this.attributeMap) {
    this.getPrimaryObject().setAttribute(myKey, this.attributeMap[myKey]);
  }
};
com.inq.ui.Container.prototype.getPrimaryObject = function() {
  return this._div;
};
com.inq.ui.Container.prototype.setX = function(val) {
  this.setStyle("left", "" + Std.string(val));
  if (this.parent == null) {
    return;
  }
  this.resize();
  this.resizer(this.contains);
};
com.inq.ui.Container.prototype.getX = function() {
  var styleLeft = this._div.style["left"];
  if (styleLeft != null) {
    return this.evaluatePosition("" + styleLeft);
  }
  return this._div.clientLeft;
};
com.inq.ui.Container.prototype.setY = function(val) {
  this.setStyle("top", "" + Std.string(val));
  this.resize();
  this.resizer(this.contains);
};
com.inq.ui.Container.prototype.getY = function() {
  var styleTop = this._div.style["top"];
  if (styleTop != null) {
    return this.evaluatePosition("" + styleTop);
  }
  return this._div.clientTop;
};
com.inq.ui.Container.prototype.whenLoaded = function(ev) {
  var __w, __h;
  try {
    var win = js.Lib.window;
    var element = this._newim;
    var imageElement = this._newim;
    var picture = imageElement;
    var spriteWidth = 0, spriteHeight = 0, spriteLeft = 0, spriteTop = 0;
    var _spriteLoadHeight = 0, _spriteLoadWidth = 0;
    var div = this._div;
    var canvas = null;
    var myDoc = imageElement.ownerDocument;
    if (myDoc != this.document) {
      myDoc = this._div.ownerDocument;
      haxe.Log.trace("Document object error, correcting", {fileName:"Container.hx", lineNumber:252, className:"com.inq.ui.Container", methodName:"whenLoaded"});
    }
    if (this.getIsSprite()) {
      spriteWidth = this.evaluatePosition(this.getStyle("sprite-width"));
      spriteHeight = this.evaluatePosition(this.getStyle("sprite-height"));
      spriteLeft = this.evaluatePosition(this.getStyle("sprite-left"));
      spriteTop = this.evaluatePosition(this.getStyle("sprite-top"));
      canvas = myDoc.createElement("CANVAS");
      canvas.width = spriteWidth;
      canvas.height = spriteHeight;
      imageElement.width = spriteWidth;
      imageElement.height = spriteHeight;
      picture = canvas;
    }
    this._loadWidth = imageElement.width;
    this._loadHeight = imageElement.height;
    imageElement.style.height = "100%";
    imageElement.style.width = "100%";
    if (this.getStyle("height") == null && (this.getStyle("top") == null || this.getStyle("bottom") == null)) {
      this.initStyle("height", "" + Std.string(this._loadHeight));
      picture.style.height = Std.string(this._loadHeight) + "px";
    } else {
      if (this.getStyle("height") != null) {
        picture.style.height = this.evaluatePosition(this.getStyle("height")) + "px";
      }
    }
    if (this.getStyle("width") == null && (this.getStyle("left") == null || this.getStyle("right") == null)) {
      this.initStyle("width", "" + Std.string(this._loadWidth));
      picture.style.width = Std.string(this._loadWidth) + "px";
    } else {
      if (this.getStyle("width") != null) {
        picture.style.width = this.evaluatePosition(this.getStyle("width")) + "px";
      }
    }
    if (this._img) {
      this._img.style.height = picture.style.height;
      this._img.style.width = picture.style.width;
    }
    if (div.firstChild != null && div.firstChild.tagName == "IMAGE") {
      div.removeChild(div.firstChild);
    }
    try {
      div.insertBefore(element, div.firstChild);
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
        div.innerHTML = '<IMG style="width:100%;height:100%"  src="' + Std.string(imageElement.src) + '">';
      } else {
        throw e;
      }
    }
    if (this.getIsSprite()) {
      canvas.style.cssText = imageElement.style.cssText;
      canvas.id = Std.string(imageElement.parentNode.id) + "_canvas";
      canvas["sourceImage"] = imageElement;
      canvas["spriteTop"] = spriteTop;
      canvas["spriteLeft"] = spriteLeft;
      canvas["spriteWidth"] = spriteWidth;
      canvas["spriteHeight"] = spriteHeight;
      imageElement.parentNode.insertBefore(canvas, imageElement.nextSibling);
      imageElement.style.display = "none";
      this.renderCanvas(canvas);
    }
    this.resize();
  } catch (e) {
    haxe.Log.trace("ERROR: " + Std.string(e), {fileName:"Container.hx", lineNumber:340, className:"com.inq.ui.Container", methodName:"whenLoaded"});
  }
};
com.inq.ui.Container.prototype.setBackgroundImage = function(val, hide) {
  this.setStyle("backgroundImage", val);
  if (this.styles["backgroundImage"] == null || this.styles["backgroundImage"] == "") {
    return;
  }
  this._bgi = this.getNewImage();
  this._newim = this._bgi;
  this._newim.onload = $bind(this, this.whenLoaded);
  this._newim.className = com.inq.ui.Container.CHAT_CLASS;
  this._newim.src = this.styles["backgroundImage"];
  var isHide = typeof hide == "undefined" ? true : hide;
  if (isHide) {
    this._newim.setAttribute("aria-hidden", "true");
    this._newim.setAttribute("alt", "");
    this._newim.setAttribute("tabindex", "-1");
  }
};
com.inq.ui.Container.prototype.getID = function() {
  return this.styles["id"];
};
com.inq.ui.Container.prototype.setID = function(val) {
  if (com.inq.flash.client.control.FlashPeer.getIsBuilder()) {
    var alreadyPrepended = val.indexOf(com.inq.ui.Container.CLIENT_SPACE_PREFIX) == 0 || val.indexOf(com.inq.ui.Container.LEGACY_PREFIX) == 0;
    var prefixedId = val;
    if (this._div.ownerDocument != window.document && !alreadyPrepended) {
      prefixedId = com.inq.ui.Container.CLIENT_SPACE_PREFIX + val;
    }
    this._div.id = prefixedId;
    this.styles["id"] = val;
  } else {
    this._div.id = this._div.ownerDocument != null && this._div.ownerDocument == window.document || !com.inq.ui.SkinLoader.hasClientBody ? val : val.indexOf(com.inq.ui.Container.CLIENT_SPACE_PREFIX) == 0 || val.indexOf(com.inq.ui.Container.LEGACY_PREFIX) == 0 ? val : com.inq.ui.Container.CLIENT_SPACE_PREFIX + val;
    this.styles["id"] = val;
  }
};
com.inq.ui.Container.prototype.setAttribute = function(attName, attValu) {
  if (typeof this._div != "undefined") {
    this._div.setAttribute(attName, attValu);
  }
};
com.inq.ui.Container.prototype.addHtmlLabel = function(val) {
  if (typeof this._div != "undefined") {
    var label = document.createElement("label");
    if (this.getHtmlLabelObject()) {
      label.setAttribute("for", this.getHtmlLabelObject().id);
    }
    label.setAttribute("style", "position: absolute; left: -9999");
    label.innerHTML = val;
    this._div.appendChild(label);
    this._htmlLabel = label;
  }
};
com.inq.ui.Container.prototype.getHtmlLabelObject = function() {
  var labelObjet = null;
  if (typeof this._div != "undefined") {
    labelObjet = this._div.firstChild;
  }
  return labelObjet;
};
com.inq.ui.Container.prototype.setFocus = function() {
  try {
    this._div.focus();
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
};
com.inq.ui.Container.prototype.setEnabled = function(val) {
  if (this._div != null) {
    this._div.disabled = val ? false : true;
  }
  if (val) {
    com.inq.ui.CommandParser.executeLogic(this.styles["onEnable"], false, this);
  }
};
com.inq.ui.Container.prototype.getEnabled = function() {
  if (this._div != null) {
    return this._div.disabled ? false : true;
  } else {
    return false;
  }
};
com.inq.ui.Container.prototype.clear = function() {
  var ob = this._div;
  while (ob.lastChild != null) {
    ob.removeChild(ob.lastChild);
  }
};
com.inq.ui.Container.prototype.setOnClick = function(whenClicked) {
  this._div.onclick = whenClicked;
};
com.inq.ui.Container.prototype._clientStage = null;
com.inq.ui.Container.prototype.document = null;
com.inq.ui.Container.prototype.parent = null;
com.inq.ui.Container.prototype._newim = null;
com.inq.ui.Container.prototype._isSprite = null;
com.inq.ui.Container.prototype.isSprite = null;
com.inq.ui.Container.prototype.scrolling = null;
com.inq.ui.Container.prototype.src = null;
com.inq.ui.Container.prototype.x = null;
com.inq.ui.Container.prototype.y = null;
com.inq.ui.Container.prototype._parent = null;
com.inq.ui.Container.prototype.width = null;
com.inq.ui.Container.prototype._width = null;
com.inq.ui.Container.prototype.enabled = null;
com.inq.ui.Container.prototype.height = null;
com.inq.ui.Container.prototype._height = null;
com.inq.ui.Container.prototype.styles = null;
com.inq.ui.Container.prototype.attributeMap = null;
com.inq.ui.Container.prototype.visible = null;
com.inq.ui.Container.prototype._visible = null;
com.inq.ui.Container.prototype._style = null;
com.inq.ui.Container.prototype.contains = null;
com.inq.ui.Container.prototype._loadHeight = null;
com.inq.ui.Container.prototype._loadWidth = null;
com.inq.ui.Container.prototype._bgi = null;
com.inq.ui.Container.prototype._div = null;
com.inq.ui.Container.prototype._htmlLabel = null;
com.inq.ui.Container.CLIENT_SPACE_PREFIX = "tcChat_";
com.inq.ui.Container.LEGACY_PREFIX = "inq";
com.inq.ui.Container.CHAT_CLASS = "tcChat";
com.inq.ui.Container.SC_TITLEBAR = "inqTitleBar";
com.inq.ui.Container.SC_RESIZE = "inqDivResizeCorner";
com.inq.ui.Container.SC_SKIN = "tcChat_Skin";
com.inq.ui.Container.count = 0;
if (!com.inq.flash) {
  com.inq.flash = {};
}
if (!com.inq.flash.client) {
  com.inq.flash.client = {};
}
if (!com.inq.flash.client.control) {
  com.inq.flash.client.control = {};
}
;com.inq.flash.client.control.FlashPeer = function() {
};
$hxClasses["com.inq.flash.client.control.FlashPeer"] = com.inq.flash.client.control.FlashPeer;
com.inq.flash.client.control.FlashPeer.__name__ = ["com", "inq", "flash", "client", "control", "FlashPeer"];
com.inq.flash.client.control.FlashPeer.call = function(funcName, args, deflt) {
  if (com.inq.flash.client.control.FlashPeer.inqFlashPeer[funcName] == null) {
    haxe.Log.trace("window.Inq.FlashPeer." + funcName + " does not exist", {fileName:"FlashPeer.hx", lineNumber:25, className:"com.inq.flash.client.control.FlashPeer", methodName:"call"});
    return deflt;
  }
  try {
    return com.inq.flash.client.control.FlashPeer.inqFlashPeer[funcName].apply(com.inq.flash.client.control.FlashPeer.inqFlashPeer, args);
  } catch (e) {
    var argz = "";
    if (args) {
      for (var i = 0;i < args.length;i++) {
        argz += " arg[" + i + "] = " + args[i] + "\n";
      }
    }
    haxe.Log.trace("window.Inq.FlashPeer." + funcName + " failed: " + Std.string(e) + "\n" + argz, {fileName:"FlashPeer.hx", className:"com.inq.flash.client.control.FlashPeer", methodName:"call"});
    return deflt;
  }
};
com.inq.flash.client.control.FlashPeer.postRequestToIframeProxy = function(url, request, id, context) {
  com.inq.flash.client.control.FlashPeer.call("postRequestToIframeProxy", [url, request, id, context]);
};
com.inq.flash.client.control.FlashPeer.isAutoFixPrechatSurvey = function() {
  return com.inq.flash.client.control.FlashPeer.call("isAutoFixPrechatSurvey", []);
};
com.inq.flash.client.control.FlashPeer.updateFrameName = function(id, key) {
  com.inq.flash.client.control.FlashPeer.call("updateFrameName", [id, key]);
};
com.inq.flash.client.control.FlashPeer.onAgentMsg = function(object) {
  com.inq.flash.client.control.FlashPeer.call("onAgentMsg", [object]);
};
com.inq.flash.client.control.FlashPeer.getLocalizedMessage = function(key) {
  return com.inq.flash.client.control.FlashPeer.call("getLocalizedMessage", [key]);
};
com.inq.flash.client.control.FlashPeer.getBrowserTypeAndVersion = function() {
  return com.inq.flash.client.control.FlashPeer.call("getBrowserTypeAndVersion", []);
};
com.inq.flash.client.control.FlashPeer.getBrowserMajorVer = function(compatibility) {
  return com.inq.flash.client.control.FlashPeer.call("getBrowserMajorVer", [compatibility]);
};
com.inq.flash.client.control.FlashPeer.setDisconnectFlag = function() {
  com.inq.flash.client.control.FlashPeer.call("setDisconnectFlag", []);
};
com.inq.flash.client.control.FlashPeer.onCustomerMsg = function(object) {
  com.inq.flash.client.control.FlashPeer.call("onCustomerMsg", [object]);
};
com.inq.flash.client.control.FlashPeer.onAssisted = function(object) {
  com.inq.flash.client.control.FlashPeer.call("onAssisted", [object]);
};
com.inq.flash.client.control.FlashPeer.onInteracted = function(object) {
  com.inq.flash.client.control.FlashPeer.call("onInteracted", [object]);
};
com.inq.flash.client.control.FlashPeer.onEngaged = function(object) {
  com.inq.flash.client.control.FlashPeer.call("onEngaged", [object]);
};
com.inq.flash.client.control.FlashPeer.onChatShown = function(object) {
  com.inq.flash.client.control.FlashPeer.call("onChatShown", [object]);
};
com.inq.flash.client.control.FlashPeer.onBeforeChatClosed = function() {
  com.inq.flash.client.control.FlashPeer.call("onBeforeChatClosed", []);
};
com.inq.flash.client.control.FlashPeer.setDragable = function() {
  com.inq.flash.client.control.FlashPeer.call("setDragable", []);
};
com.inq.flash.client.control.FlashPeer.setResizable = function() {
  com.inq.flash.client.control.FlashPeer.call("setResizable", []);
};
com.inq.flash.client.control.FlashPeer.setV3Data = function(dictionary) {
  com.inq.flash.client.control.FlashPeer.call("setV3Data", [dictionary]);
};
com.inq.flash.client.control.FlashPeer.getV3Data = function() {
  return com.inq.flash.client.control.FlashPeer.call("getV3Data", []);
};
com.inq.flash.client.control.FlashPeer.setSurveyAuxParams = function(dictionary) {
  com.inq.flash.client.control.FlashPeer.call("setSurveyAuxParams", [dictionary]);
};
com.inq.flash.client.control.FlashPeer.getSurveyAuxParams = function() {
  return com.inq.flash.client.control.FlashPeer.call("getSurveyAuxParams", []);
};
com.inq.flash.client.control.FlashPeer.setClickStreamSent = function(isSent) {
  com.inq.flash.client.control.FlashPeer.call("setClickStreamSent", [isSent]);
};
com.inq.flash.client.control.FlashPeer.isClickStreamSent = function() {
  return com.inq.flash.client.control.FlashPeer.call("isClickStreamSent", []);
};
com.inq.flash.client.control.FlashPeer.requestTranscript = function(emailAddress) {
  com.inq.flash.client.control.FlashPeer.call("requestTranscript", [emailAddress, com.inq.flash.client.control.FlashVars.getCustomerName()]);
};
com.inq.flash.client.control.FlashPeer.popOutChat = function(b, bResizable) {
  haxe.Log.trace("popOutChat: b:" + Std.string(b), {fileName:"FlashPeer.hx", lineNumber:131, className:"com.inq.flash.client.control.FlashPeer", methodName:"popOutChat"});
  haxe.Log.trace("popOutChat: bResizable:" + Std.string(bResizable), {fileName:"FlashPeer.hx", lineNumber:132, className:"com.inq.flash.client.control.FlashPeer", methodName:"popOutChat"});
  return com.inq.flash.client.control.FlashPeer.call("popOutChat", [b, bResizable]);
};
com.inq.flash.client.control.FlashPeer.getBaseURL = function() {
  return com.inq.flash.client.control.FlashPeer.call("getBaseURL", []);
};
com.inq.flash.client.control.FlashPeer.getMediaBaseURL = function() {
  return com.inq.flash.client.control.FlashPeer.call("getMediaBaseURL", []);
};
com.inq.flash.client.control.FlashPeer.getVanityUrl = function() {
  return com.inq.flash.client.control.FlashPeer.call("getVanityUrl", []);
};
com.inq.flash.client.control.FlashPeer.getChatRouterVanityUrl = function() {
  return com.inq.flash.client.control.FlashPeer.call("getChatRouterVanityUrl", []);
};
com.inq.flash.client.control.FlashPeer.getTitleBarHeight = function() {
  return com.inq.flash.client.control.FlashPeer.call("getTitleBarHeight", []);
};
com.inq.flash.client.control.FlashPeer.getPopupCloserWidth = function() {
  return com.inq.flash.client.control.FlashPeer.call("getPopupCloserWidth", []);
};
com.inq.flash.client.control.FlashPeer.getSkinLocation = function() {
  return com.inq.flash.client.control.FlashPeer.call("getSkinLocation", []);
};
com.inq.flash.client.control.FlashPeer.getSkinHeight = function() {
  return com.inq.flash.client.control.FlashPeer.call("getSkinHeight", []);
};
com.inq.flash.client.control.FlashPeer.getSkinWidth = function() {
  return com.inq.flash.client.control.FlashPeer.call("getSkinWidth", []);
};
com.inq.flash.client.control.FlashPeer.getSkinLeft = function() {
  return com.inq.flash.client.control.FlashPeer.call("getSkinLeft", []);
};
com.inq.flash.client.control.FlashPeer.getSkinTop = function() {
  return com.inq.flash.client.control.FlashPeer.call("getSkinTop", []);
};
com.inq.flash.client.control.FlashPeer.getFlashVars = function() {
  return com.inq.flash.client.control.FlashPeer.call("getFlashVars", []);
};
com.inq.flash.client.control.FlashPeer.getSkin = function() {
  return com.inq.flash.client.control.FlashPeer.call("getSkin", []);
};
com.inq.flash.client.control.FlashPeer.getImagePath = function() {
  return com.inq.flash.client.control.FlashPeer.call("getImagePath", []);
};
com.inq.flash.client.control.FlashPeer.setSessionParam = function(key, val) {
  return com.inq.flash.client.control.FlashPeer.call("setSessionParam", [key, val]);
};
com.inq.flash.client.control.FlashPeer.closePersistent = function() {
  return com.inq.flash.client.control.FlashPeer.call("closePersistent", []);
};
com.inq.flash.client.control.FlashPeer.isThankYouEnabled = function() {
  return com.inq.flash.client.control.FlashPeer.call("isThankYouEnabled", []);
};
com.inq.flash.client.control.FlashPeer.setAgentConfig = function(agentID, cobrowseEnabled, eventDataStr, buID, agentGroupID) {
  com.inq.flash.client.control.FlashPeer.call("setAgentConfig", [agentID, cobrowseEnabled, eventDataStr, buID, agentGroupID]);
};
com.inq.flash.client.control.FlashPeer.setPersistentWindowActive = function(b) {
  com.inq.flash.client.control.FlashPeer.call("setPersistentWindowActive", []);
};
com.inq.flash.client.control.FlashPeer.isV3C2CPersistent = function() {
  return com.inq.flash.client.control.FlashPeer.call("isV3C2CPersistent", []);
};
com.inq.flash.client.control.FlashPeer.blockService = function(blockDetails) {
  com.inq.flash.client.control.FlashPeer.call("blockTheService", [blockDetails]);
};
com.inq.flash.client.control.FlashPeer.executeCustomCommand = function(commandParam) {
  com.inq.flash.client.control.FlashPeer.call("executeCustomCommand", [commandParam]);
};
com.inq.flash.client.control.FlashPeer.PushToFrameset = function(_sUrl, _sTarget, _fromClick) {
  if (_fromClick == null) {
    _fromClick = false;
  }
  com.inq.flash.client.control.FlashPeer.call("PushToFrameset", [_sUrl, _sTarget, _fromClick]);
};
com.inq.flash.client.control.FlashPeer.wasSaleAction = function() {
  return com.inq.flash.client.control.FlashPeer.call("wasSaleAction", [], false);
};
com.inq.flash.client.control.FlashPeer.registerPersistentWindow = function() {
  return com.inq.flash.client.control.FlashPeer.call("registerPersistentWindow", [], false);
};
com.inq.flash.client.control.FlashPeer.acceptCobInvSafe = function(startPerformanceTest) {
  com.inq.flash.client.control.FlashPeer.call("acceptCobSafe", [startPerformanceTest]);
};
com.inq.flash.client.control.FlashPeer.acceptCobAndShareInv = function(startPerformanceTest) {
  com.inq.flash.client.control.FlashPeer.call("acceptCobAndShare", [startPerformanceTest]);
};
com.inq.flash.client.control.FlashPeer.acceptCobShareInv = function(startPerformanceTest) {
  com.inq.flash.client.control.FlashPeer.call("acceptCobShare", [startPerformanceTest]);
};
com.inq.flash.client.control.FlashPeer.endCob = function() {
  com.inq.flash.client.control.FlashPeer.call("endCob", []);
};
com.inq.flash.client.control.FlashPeer.isCobrowseEnagaged = function() {
  return com.inq.flash.client.control.FlashPeer.call("isCobEngaged", [], false);
};
com.inq.flash.client.control.FlashPeer.isCobrowseSharedControl = function() {
  return com.inq.flash.client.control.FlashPeer.call("isCobShared", [], false);
};
com.inq.flash.client.control.FlashPeer.setCobrowseBannerText = function(text) {
  com.inq.flash.client.control.FlashPeer.call("setCobBan", [text]);
};
com.inq.flash.client.control.FlashPeer.isLoggingDisabled = function() {
  return com.inq.flash.client.control.FlashPeer.call("isLoggingDisabled", [], false);
};
com.inq.flash.client.control.FlashPeer.registerWDMClient = function(clientID, checkInterval, isAliveCallback, resetState) {
  com.inq.flash.client.control.FlashPeer.call("registerWDMClient", [clientID, checkInterval, isAliveCallback, resetState]);
};
com.inq.flash.client.control.FlashPeer.unregisterWDMClient = function(clientID) {
  com.inq.flash.client.control.FlashPeer.call("unregisterWDMClient", [clientID]);
};
com.inq.flash.client.control.FlashPeer.fireCustomEvent = function(eventName, evtDataSupplementFcn) {
  if (eventName == "PrechatSurveyShown") {
    if (com.inq.flash.client.control.PersistenceManager.GetValue("pss") == 1) {
      return;
    }
    com.inq.flash.client.control.PersistenceManager.SetValue("pss", 1);
  } else {
    if (eventName == "PrechatSurveyCompleted") {
      if (com.inq.flash.client.control.PersistenceManager.GetValue("psc") == 1) {
        return;
      }
      com.inq.flash.client.control.PersistenceManager.SetValue("psc", 1);
    }
  }
  var args = [];
  args[0] = eventName;
  args[1] = null;
  args[2] = null;
  args[3] = evtDataSupplementFcn;
  com.inq.flash.client.control.FlashPeer.call("fireCustomEvent", args);
};
com.inq.flash.client.control.FlashPeer.fireCustomEvt = function(eventName, jsonData, dataFcn) {
  com.inq.flash.client.control.FlashPeer.call("fireCustomEvt", [eventName, jsonData, dataFcn]);
};
com.inq.flash.client.control.FlashPeer.createXFrame = function(divId, url, businessUnitID, scrolling, data, initiator, location) {
  return com.inq.flash.client.control.FlashPeer.call("createXFrame", [divId, url, businessUnitID, scrolling, data, initiator, location], null);
};
com.inq.flash.client.control.FlashPeer.getClientPageURL = function() {
  return com.inq.flash.client.control.FlashPeer.call("getClientPageURL", []);
};
com.inq.flash.client.control.FlashPeer.parseXFrameUrl = function(url) {
  return com.inq.flash.client.control.FlashPeer.call("parseXFrameUrl", [url], null);
};
com.inq.flash.client.control.FlashPeer.isPersistentChat = function() {
  return com.inq.flash.client.control.FlashPeer.call("isPersistentChat", []);
};
com.inq.flash.client.control.FlashPeer.isPersistentWindow = function() {
  return com.inq.flash.client.control.FlashPeer.call("isPersistentWindow", []);
};
com.inq.flash.client.control.FlashPeer.getPageID = function() {
  return com.inq.flash.client.control.FlashPeer.call("getPageID", [], null);
};
com.inq.flash.client.control.FlashPeer.isPortal = function() {
  return com.inq.flash.client.control.FlashPeer.call("isPortal", [], false);
};
com.inq.flash.client.control.FlashPeer.getCustID = function() {
  return com.inq.flash.client.control.FlashPeer.call("getCustID", [], null);
};
com.inq.flash.client.control.FlashPeer.getSessionID = function() {
  return com.inq.flash.client.control.FlashPeer.call("getSessionID", [], null);
};
com.inq.flash.client.control.FlashPeer.getIncAssignmentID = function() {
  return com.inq.flash.client.control.FlashPeer.call("getIncAssignmentID", [], null);
};
com.inq.flash.client.control.FlashPeer.getPageMarker = function() {
  return com.inq.flash.client.control.FlashPeer.call("getPageMarker", [], null);
};
com.inq.flash.client.control.FlashPeer.getAutomatonDataMap = function() {
  return com.inq.flash.client.control.FlashPeer.call("getAutomatonDataMap", [], null);
};
com.inq.flash.client.control.FlashPeer.getPersistentCustomerID = function() {
  return com.inq.flash.client.control.FlashPeer.call("getPersistentCustomerID", [], null);
};
com.inq.flash.client.control.FlashPeer.getBrID = function() {
  return com.inq.flash.client.control.FlashPeer.call("getBrID", [], null);
};
com.inq.flash.client.control.FlashPeer.getBrName = function() {
  return com.inq.flash.client.control.FlashPeer.call("getBrName", [], null);
};
com.inq.flash.client.control.FlashPeer.getAgentID = function() {
  return com.inq.flash.client.control.FlashPeer.call("getAgentID", [], null);
};
com.inq.flash.client.control.FlashPeer.getBusinessUnitID = function() {
  return com.inq.flash.client.control.FlashPeer.call("getBusinessUnitID", [], null);
};
com.inq.flash.client.control.FlashPeer.onCookiesCommitted = function(handler) {
  com.inq.flash.client.control.FlashPeer.call("onCookiesCommitted", [handler]);
};
com.inq.flash.client.control.FlashPeer.getXFormsDomain = function() {
  return com.inq.flash.client.control.FlashPeer.call("getXFormsDomain", [], null);
};
com.inq.flash.client.control.FlashPeer.getDeviceType = function() {
  return com.inq.flash.client.control.FlashPeer.call("getDeviceType", [], null);
};
com.inq.flash.client.control.FlashPeer.closePersistentWindowIfOpen = function() {
  return com.inq.flash.client.control.FlashPeer.call("closePersistentWindowIfOpen", [], null);
};
com.inq.flash.client.control.FlashPeer.setCiFunction = function(fName, fBody) {
  return com.inq.flash.client.control.FlashPeer.call("setCiFunction", [fName, fBody], null);
};
com.inq.flash.client.control.FlashPeer.getBuRuleAgentGroupID = function(brID) {
  return com.inq.flash.client.control.FlashPeer.call("getBuRuleAgentGroupID", [brID], null);
};
com.inq.flash.client.control.FlashPeer.closeChat = function() {
  com.inq.flash.client.control.FlashPeer.call("closeChat", [false]);
};
com.inq.flash.client.control.FlashPeer.closeChatMonitor = function() {
  com.inq.flash.client.control.FlashPeer.call("closeChatMonitor", [false]);
};
com.inq.flash.client.control.FlashPeer.hideChat = com.inq.flash.client.control.FlashPeer.closeChat;
com.inq.flash.client.control.FlashPeer.closePopupChatFromPersistent = function() {
  return com.inq.flash.client.control.FlashPeer.call("closePopupChatFromPersistent", [], null);
};
com.inq.flash.client.control.FlashPeer.captureEmailAddress = function(emailAddress) {
  return com.inq.flash.client.control.FlashPeer.call("captureEmailAddress", [emailAddress]);
};
com.inq.flash.client.control.FlashPeer.getIsSkinLocal = function() {
  var isSkinLocal = false;
  if (com.inq.flash.client.control.FlashPeer.inqFlashPeer["getIsSkinLocal"] != null) {
    isSkinLocal = com.inq.flash.client.control.FlashPeer.call("getIsSkinLocal", [], true);
  }
  return isSkinLocal;
};
com.inq.flash.client.control.FlashPeer.getIsBuilder = function() {
  var isMockChat = false;
  if (com.inq.flash.client.control.FlashPeer.inqFlashPeer["getIsBuilder"] != null) {
    isMockChat = com.inq.flash.client.control.FlashPeer.call("getIsBuilder", [], true);
  }
  return isMockChat;
};
com.inq.flash.client.control.FlashPeer.getSkinPath = function() {
  var skinPath = null;
  if (com.inq.flash.client.control.FlashPeer.inqFlashPeer["getSkinPath"] != null) {
    skinPath = com.inq.flash.client.control.FlashPeer.call("getSkinPath", [], null);
  }
  return skinPath;
};
com.inq.flash.client.control.FlashPeer.getSkinName = function() {
  var skinName = null;
  if (com.inq.flash.client.control.FlashPeer.inqFlashPeer["getSkinName"] != null) {
    skinName = com.inq.flash.client.control.FlashPeer.call("getSkinName", [], null);
  }
  return skinName;
};
com.inq.flash.client.control.FlashPeer.getMediaPath = function() {
  var mediaPath = null;
  if (com.inq.flash.client.control.FlashPeer.inqFlashPeer["getMediaPath"] != null) {
    mediaPath = com.inq.flash.client.control.FlashPeer.call("getMediaPath", [], null);
  }
  return mediaPath;
};
com.inq.flash.client.control.FlashPeer.getAgentName = function() {
  var agentName = null;
  if (com.inq.flash.client.control.FlashPeer.inqFlashPeer["getAgentName"] != null) {
    agentName = com.inq.flash.client.control.FlashPeer.call("getAgentName", [], null);
  }
  return agentName;
};
com.inq.flash.client.control.FlashPeer.getSkinMXML = function() {
  var skinMXML = null;
  if (com.inq.flash.client.control.FlashPeer.inqFlashPeer["getSkinMXML"] != null) {
    skinMXML = com.inq.flash.client.control.FlashPeer.call("getSkinMXML", [], null);
  }
  return skinMXML;
};
com.inq.flash.client.control.FlashPeer.getFileTransferSize = function() {
  return com.inq.flash.client.control.FlashPeer.call("fileTransferSize", [], null);
};
com.inq.flash.client.control.FlashPeer.getFileTransferUrl = function() {
  return com.inq.flash.client.control.FlashPeer.call("fileTransferServerUrl", [], null);
};
com.inq.flash.client.control.FlashPeer.setCABeacon = function(action, data) {
  com.inq.flash.client.control.FlashPeer.call("setCABeacon", [action, data]);
};
com.inq.flash.client.control.FlashPeer.getQueueMessagingSpec = function() {
  return com.inq.flash.client.control.FlashPeer.call("getQueueMessagingSpec", [], null);
};
com.inq.flash.client.control.FlashPeer.logError = function(messagePrefix, e) {
  com.inq.flash.client.control.FlashPeer.call("logError", [messagePrefix, e]);
};
com.inq.flash.client.control.FlashPeer.prototype.__class__ = com.inq.flash.client.control.FlashPeer;
com.inq.flash.client.control.FlashPeer.inqFlashPeer = window["Inq"]["FlashPeer"];
Std = function() {
};
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v, t) {
  return js.Boot.__instanceof(v, t);
};
Std.string = function(s) {
  return js.Boot.__string_rec(s, "");
};
Std["int"] = function(x) {
  return x | 0;
};
Std.parseInt = function(x) {
  var v = parseInt(x, 10);
  if (v == 0 && (HxOverrides.cca(x, 1) == 120 || HxOverrides.cca(x, 1) == 88)) {
    v = parseInt(x);
  }
  if (isNaN(v)) {
    return null;
  }
  return v;
};
Std.parseFloat = function(x) {
  return parseFloat(x);
};
Std.random = function(x) {
  return Math.floor(Math.random() * x);
};
Std.prototype.__class__ = Std;
var js = js || {};
js.Boot = function() {
};
$hxClasses["js.Boot"] = js.Boot;
js.Boot.__name__ = ["js", "Boot"];
js.Boot.__unhtml = function(s) {
  return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js.Boot.__trace = function(v, i) {
  var msg = i != null ? (i.className ? i.className : i.fileName) + ":" + i.methodName + ": " : " ";
  var d;
  msg += js.Boot.__string_rec(v, "");
  if (typeof document != "undefined" && (d = document.getElementById("haxe:trace")) != null) {
    d.innerHTML += js.Boot.__unhtml(msg) + "<br/>";
  } else {
    if (typeof console != "undefined" && console.log != null) {
      console.log(msg);
    }
  }
};
js.Boot.__clear_trace = function() {
  var d = document.getElementById("haxe:trace");
  if (d != null) {
    d.innerHTML = "";
  }
};
js.Boot.isClass = function(o) {
  return o.__name__;
};
js.Boot.isEnum = function(e) {
  return e.__ename__;
};
js.Boot.getClass = function(o) {
  return o.__class__;
};
js.Boot.__string_rec = function(o, s) {
  if (o == null) {
    return "null";
  }
  if (s.length >= 5) {
    return "<...>";
  }
  var t = typeof o;
  if (t == "function" && (o.__name__ || o.__ename__)) {
    t = "object";
  }
  switch(t) {
    case "object":
      if (o instanceof Array) {
        if (o.__enum__) {
          if (o.length == 2) {
            return o[0];
          }
          var str = o[0] + "(";
          s += "\t";
          var _g1 = 2, _g = o.length;
          while (_g1 < _g) {
            var i = _g1++;
            if (i != 2) {
              str += "," + js.Boot.__string_rec(o[i], s);
            } else {
              str += js.Boot.__string_rec(o[i], s);
            }
          }
          return str + ")";
        }
        var l = o.length;
        var i;
        var str = "[";
        s += "\t";
        var _g = 0;
        while (_g < l) {
          var i1 = _g++;
          str += (i1 > 0 ? "," : "") + js.Boot.__string_rec(o[i1], s);
        }
        str += "]";
        return str;
      }
      var tostr;
      try {
        tostr = o.toString;
      } catch (e) {
        return "???";
      }
      if (tostr != null && tostr != Object.toString) {
        var s2 = o.toString();
        if (s2 != "[object Object]") {
          return s2;
        }
      }
      var k = null;
      var str = "{\n";
      s += "\t";
      var hasp = o.hasOwnProperty != null;
      for (var k in o) {
        if (hasp && !o.hasOwnProperty(k)) {
          continue;
        }
        if (k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
          continue;
        }
        if (str.length != 2) {
          str += ", \n";
        }
        str += s + k + " : " + js.Boot.__string_rec(o[k], s);
      }
      s = s.substring(1);
      str += "\n" + s + "}";
      return str;
    case "function":
      return "<function>";
    case "string":
      return o;
    default:
      return String(o);
  }
};
js.Boot.__interfLoop = function(cc, cl) {
  if (cc == null) {
    return false;
  }
  if (cc == cl) {
    return true;
  }
  var intf = cc.__interfaces__;
  if (intf != null) {
    var _g1 = 0, _g = intf.length;
    while (_g1 < _g) {
      var i = _g1++;
      var i1 = intf[i];
      if (i1 == cl || js.Boot.__interfLoop(i1, cl)) {
        return true;
      }
    }
  }
  return js.Boot.__interfLoop(cc.__super__, cl);
};
js.Boot.__instanceof = function(o, cl) {
  try {
    if (o instanceof cl) {
      if (cl == Array) {
        return o.__enum__ == null;
      }
      return true;
    }
    if (js.Boot.__interfLoop(o.__class__, cl)) {
      return true;
    }
  } catch (e) {
    if (cl == null) {
      return false;
    }
  }
  switch(cl) {
    case Int:
      return Math.ceil(o % 2147483648) === o;
    case Float:
      return typeof o == "number";
    case Bool:
      return o === true || o === false;
    case String:
      return typeof o == "string";
    case Dynamic:
      return true;
    default:
      if (o == null) {
        return false;
      }
      if (cl == Class && o.__name__ != null) {
        return true;
      } else {
        null;
      }
      if (cl == Enum && o.__ename__ != null) {
        return true;
      } else {
        null;
      }
      return o.__enum__ == cl;
  }
};
js.Boot.__cast = function(o, t) {
  if (js.Boot.__instanceof(o, t)) {
    return o;
  } else {
    throw "Cannot cast " + Std.string(o) + " to " + Std.string(t);
  }
};
js.Boot.prototype.__class__ = js.Boot;
com.inq.ui.SkinLoader = function() {
  com.inq.ui.Container.call(this);
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.SkinLoader, "com.inq.ui.SkinLoader");
com.inq.ui.SkinLoader.hasClientBody = null;
com.inq.ui.SkinLoader.skinInClient = null;
com.inq.ui.SkinLoader._preloadImage = function(imageName) {
  var obj = com.inq.ui.SkinLoader.imageCollection[imageName];
  if (obj == null) {
    obj = {path:imageName, image:null, width:-1, height:-1};
    com.inq.ui.SkinLoader.imageCollection[imageName] = obj;
    haxe.Log.trace("preload image " + imageName, {fileName:"SkinLoader.hx", lineNumber:668, className:"com.inq.ui.SkinLoader", methodName:"_preloadImage"});
  }
};
com.inq.ui.SkinLoader._getSkinPath = function() {
  if (com.inq.flash.client.control.FlashPeer.getIsSkinLocal()) {
    return com.inq.ui.SkinLoader._skinpath = com.inq.flash.client.control.FlashPeer.getSkinPath();
  } else {
    return com.inq.ui.SkinLoader._skinpath = com.inq.flash.client.control.FlashPeer.getImagePath();
  }
};
com.inq.ui.SkinLoader.getSkinBase = function() {
  var skin = com.inq.flash.client.control.FlashPeer.getSkin();
  var aPath = skin.split("\\").join("/").split("/");
  aPath.pop();
  return aPath.join("/");
};
com.inq.ui.SkinLoader.GetSkinPath = function() {
  return com.inq.ui.SkinLoader._skinpath;
};
com.inq.ui.SkinLoader.PreloadNewSkin = function(nameNextSkin) {
  var sl = new com.inq.ui.SkinLoader;
  sl.loadSkin("./" + nameNextSkin);
};
com.inq.ui.SkinLoader.LoadNewSkin = function(nameNextSkin) {
  var sl = new com.inq.ui.SkinLoader;
  var ti = Application.application.getTextInput("txtInput");
  var cPB = Application.application.getButton("ClickPersistent");
  var bPO = Application.application.getButton("btnPopOut");
  var bCa = Application.application.getButton("btnCall");
  var bCC = Application.application.getButton("btnCloseChat");
  com.inq.ui.SkinLoader.contextArray[0] = nameNextSkin;
  com.inq.ui.SkinLoader.contextArray[1] = com.inq.flash.client.chatskins.SkinControl.cw.exportData();
  com.inq.ui.SkinLoader.contextArray[2] = ti._getInput();
  com.inq.ui.SkinLoader.contextArray[3] = cPB.getVisible();
  com.inq.ui.SkinLoader.contextArray[4] = null != bPO ? bPO.getVisible() : false;
  com.inq.ui.SkinLoader.contextArray[5] = null != bCa ? bCa.getVisible() : false;
  com.inq.ui.SkinLoader.contextArray[6] = null != bCC ? bCC.getVisible() : false;
  sl.addEventListener(com.inq.events.IOErrorEvent.IO_ERROR, com.inq.ui.SkinLoader.failedNewSkinLoad);
  sl.addEventListener(com.inq.events.Event.COMPLETE, com.inq.ui.SkinLoader.successNewSkinLoad);
  sl.drawSkin("./" + nameNextSkin);
};
com.inq.ui.SkinLoader.failedNewSkinLoad = function(event) {
  haxe.Log.trace("failed", {fileName:"SkinLoader.hx", lineNumber:873, className:"com.inq.ui.SkinLoader", methodName:"failedNewSkinLoad"});
};
com.inq.ui.SkinLoader.successNewSkinLoad = function(event) {
  haxe.Log.trace("success", {fileName:"SkinLoader.hx", lineNumber:877, className:"com.inq.ui.SkinLoader", methodName:"successNewSkinLoad"});
  com.inq.flash.client.chatskins.SkinControl.cw = new com.inq.flash.client.chatskins.ChatTextArea(Application.application.chatWindow);
  Application.application.resize();
  if (com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
    if (com.inq.utils.Util.isIE) {
      Application.ResizeStage(window.parent.document.documentElement.clientWidth, window.parent.document.documentElement.clientHeight);
    } else {
      Application.ResizeStage(window.top.innerWidth, window.top.innerHeight);
    }
  }
  if (!com.inq.utils.Capabilities.isIpad()) {
    com.inq.flash.client.chatskins.SkinControl.setFocusOnInputField();
  }
  com.inq.flash.client.chatskins.SkinControl.startMouseListener();
  com.inq.flash.client.chatskins.SkinControl.startFocusListener();
  com.inq.flash.client.chatskins.SkinControl.setupButtons();
  com.inq.flash.client.chatskins.SkinControl.startKeyListener();
  com.inq.flash.client.chatskins.SkinControl.startEmailKeyListener();
  com.inq.flash.client.chatskins.SkinControl.setUpFocusAndSelection();
  var ti = Application.application.getTextInput("txtInput");
  var cPB = Application.application.getButton("ClickPersistent");
  var bPO = Application.application.getButton("btnPopOut");
  var bCa = Application.application.getButton("btnCall");
  var bCC = Application.application.getButton("btnCloseChat");
  com.inq.flash.client.control.PersistenceManager.SetValue("skn", com.inq.ui.SkinLoader.contextArray[0]);
  com.inq.flash.client.chatskins.SkinControl.cw.importData(com.inq.ui.SkinLoader.contextArray[1]);
  com.inq.flash.client.chatskins.SkinControl.showPersistentChatButtons(com.inq.ui.SkinLoader.contextArray[3]);
  if (null != bPO) {
    bPO.setVisible(com.inq.ui.SkinLoader.contextArray[4]);
  }
  if (null != bCa) {
    bCa.setVisible(com.inq.ui.SkinLoader.contextArray[5]);
  }
  if (null != bCC) {
    bCC.setVisible(com.inq.ui.SkinLoader.contextArray[6]);
  }
  com.inq.flash.client.chatskins.SkinControl.ClassInits();
};
com.inq.ui.SkinLoader.prototype.getSkinPath = function() {
  return com.inq.ui.SkinLoader._skinpath;
};
com.inq.ui.SkinLoader.prototype.whenPreloaded = function(img, drawWhenFinished) {
  try {
    var imagePath = img.src;
    var imageItem = com.inq.ui.SkinLoader.imageCollection[imagePath];
    if (imageItem != null) {
      imageItem.width = img.width;
      imageItem.height = img.height;
      imageItem.loaded = true;
      --com.inq.ui.SkinLoader.imageCount;
    } else {
      haxe.Log.trace("loaded " + Std.string(img.src) + " missing from image array", {fileName:"SkinLoader.hx", lineNumber:800, className:"com.inq.ui.SkinLoader", methodName:"whenPreloaded"});
    }
  } catch (e) {
    haxe.Log.trace("ERROR on item: " + Std.string(img.src) + ": " + Std.string(e), {fileName:"SkinLoader.hx", lineNumber:803, className:"com.inq.ui.SkinLoader", methodName:"whenPreloaded"});
    --com.inq.ui.SkinLoader.imageCount;
  }
  if (com.inq.ui.SkinLoader.imageCount < 1) {
    haxe.Log.trace("All images have been loaded", {fileName:"SkinLoader.hx", lineNumber:809, className:"com.inq.ui.SkinLoader", methodName:"whenPreloaded"});
    if (drawWhenFinished) {
      haxe.Log.trace("do _thenDraw() handler", {fileName:"SkinLoader.hx", lineNumber:811, className:"com.inq.ui.SkinLoader", methodName:"whenPreloaded"});
      this._thenDraw();
    }
  }
  return true;
};
com.inq.ui.SkinLoader.prototype._preloadImages = function(it) {
  var name;
  var xmlNode;
  haxe.Log.trace("_preloadImages", {fileName:"SkinLoader.hx", lineNumber:743, className:"com.inq.ui.SkinLoader", methodName:"_preloadImages"});
  while (it.hasNext()) {
    var el = it.next();
    xmlNode = el;
    name = el.getNodeName();
    switch(name) {
      case "mx:Style":
        break;
      case "mx:Canvas":
      ;
      case "mx:Application":
        this._preloadAttributeImages(xmlNode);
        var newit = xmlNode.elements();
        this._preloadImages(newit);
        break;
      case "mx:Button":
        this._preloadAttributeImages(xmlNode);
        var $it0 = xmlNode.elementsNamed("mx:upSkin");
        while ($it0.hasNext()) {
          var itm = $it0.next();
          var xmlsrc = itm;
          var source = this.unembed("" + Std.string(xmlsrc.firstChild()));
          com.inq.ui.SkinLoader._preloadImage(source);
        }
        break;
      case "mx:Image":
        this._preloadAttributeImages(xmlNode);
        var $it1 = xmlNode.elementsNamed("mx:source");
        while ($it1.hasNext()) {
          var itm = $it1.next();
          var xmlsrc = itm;
          var source = this.unembed("" + Std.string(xmlsrc.firstChild()));
          com.inq.ui.SkinLoader._preloadImage(source);
        }
        break;
      case "mx:Label":
      ;
      case "mx:TextInput":
      ;
      case "mx:LineInput":
      ;
      case "mx:TextArea":
        this._preloadAttributeImages(xmlNode);
        break;
      case "mx:Script":
        break;
    }
  }
};
com.inq.ui.SkinLoader.prototype.preloadAllMxmlImages = function(it, drawWhenFinished) {
  if (drawWhenFinished == null) {
    drawWhenFinished = false;
  }
  this._preloadImages(it);
  com.inq.ui.SkinLoader.imageCount = 0;
  var imageCollectionKeynameArray = Reflect.fields(com.inq.ui.SkinLoader.imageCollection);
  var _g1 = 0, _g = imageCollectionKeynameArray.length;
  while (_g1 < _g) {
    var s = _g1++;
    var imagePath = imageCollectionKeynameArray[s];
    var img = new Image;
    img.context = this;
    var loadFunction = function(ev) {
      var imag = this;
      var callee = arguments.callee;
      var context = callee.context;
      var drawWhenFinished1 = callee.drawWhenFinished;
      context.whenPreloaded(imag, drawWhenFinished1);
    };
    loadFunction.context = this;
    loadFunction.drawWhenFinished = drawWhenFinished;
    img.onload = loadFunction;
    var imageItem = com.inq.ui.SkinLoader.imageCollection[imagePath];
    imageItem.image = img;
    com.inq.ui.SkinLoader.imageCount++;
  }
  var _g1 = 0, _g = imageCollectionKeynameArray.length;
  while (_g1 < _g) {
    var s = _g1++;
    var imagePath = imageCollectionKeynameArray[s];
    var imageItem = com.inq.ui.SkinLoader.imageCollection[imagePath];
    imageItem.image.src = imageItem.path;
  }
};
com.inq.ui.SkinLoader.prototype._preloadAttributeImages = function(xmlNode) {
  var $it0 = xmlNode.attributes();
  while ($it0.hasNext()) {
    var ats = $it0.next();
    var attName = ats;
    var attValu = xmlNode.get(attName);
    switch(attName) {
      case "upSkin":
      ;
      case "overSkin":
      ;
      case "source":
      ;
      case "backgroundImage":
        com.inq.ui.SkinLoader._preloadImage(this.unembed(attValu));
        break;
      default:
      ;
    }
  }
};
com.inq.ui.SkinLoader.prototype.testClientBody = function(xmlNode) {
  var fast = new haxe.xml.Fast(xmlNode.firstElement());
  var clientNode;
  try {
    clientNode = fast.node.resolve("mx:ClientBody");
  } catch (e) {
    clientNode = null;
  }
  return clientNode != null;
};
com.inq.ui.SkinLoader.prototype.testSkinInClient = function(xmlNode) {
  var fast = new haxe.xml.Fast(xmlNode.firstElement());
  var childNode;
  var clientNode;
  var subNode;
  var _isPersistent = window.parent.name == "_inqPersistentChat";
  var isDivChat = com.inq.utils.Util.getConfig("divSkin", false);
  if ((com.inq.utils.Capabilities.isMobile() || isDivChat) && !_isPersistent) {
    try {
      clientNode = fast.node.resolve("mx:ClientBody");
    } catch (e) {
      clientNode = null;
    }
    if (clientNode != null) {
      var $it0 = clientNode.getElements();
      while ($it0.hasNext()) {
        var childNode1 = $it0.next();
        if (childNode1.has.resolve("id") && childNode1.att.resolve("id") == "Skin") {
          return true;
        }
        if (childNode1.has.resolve("id") && childNode1.att.resolve("id") == "inqTitleBar") {
          var $it1 = childNode1.getElements();
          while ($it1.hasNext()) {
            var subNode1 = $it1.next();
            if (subNode1.has.resolve("id") && subNode1.att.resolve("id") == "Skin") {
              return true;
            }
          }
        }
      }
    }
  }
  return false;
};
com.inq.ui.SkinLoader.prototype.loadSkinConfig = function(xmlNode) {
  var fast = new haxe.xml.Fast(xmlNode.firstElement());
  var scriptNode;
  try {
    scriptNode = fast.node.resolve("mx:Script");
    if (!scriptNode) {
      return;
    }
  } catch (e) {
    return;
  }
  this._processMxmlScript(scriptNode.getInnerData());
};
com.inq.ui.SkinLoader.prototype.parseSkinConfigJSON = function(jsonString) {
  var pattern = new EReg("\\bsetTimeout\\b|\\bsetInterval\\b|\\balert\\b|\\beval\\b", "g");
  jsonString = pattern.replace(jsonString, "noop");
  var pattern1 = new EReg("(\\bfunction\\b\\s*\\(.*\\)\\s*{)", "g");
  jsonString = pattern1.replace(jsonString, "$1 return ;");
  try {
    var func = new Function("var noop=function(){};var self, parent, top, window; self=parent=top=window={};var document={}, Application={}, com={}, Inq={};" + "var obj=" + jsonString + ";return obj;");
    Application.application["skinConfig"] = func();
  } catch (e) {
    haxe.Log.trace("Could not parse skinConfig JSON: " + Std.string(e), {fileName:"SkinLoader.hx", lineNumber:606, className:"com.inq.ui.SkinLoader", methodName:"parseSkinConfigJSON"});
  }
};
com.inq.ui.SkinLoader.prototype._processMxmlScript = function(source) {
  var indx;
  if (Application.application["skinConfig"]) {
    return;
  }
  if ((indx = source.indexOf("skinConfig")) > 0) {
    indx = source.indexOf("{", indx);
    var indxEnd = source.lastIndexOf("}");
    var jsonString = HxOverrides.substr(source, indx, indxEnd + 1 - indx);
    var func = new Function("var obj=" + jsonString + ';Application.application["skinConfig"]=obj;');
    func();
  }
};
com.inq.ui.SkinLoader.prototype._renderMxml = function(it, parentObject) {
  var name;
  var id;
  while (it.hasNext()) {
    var el = it.next();
    name = el.getNodeName();
    id = el.get("id");
    if (id == null) {
      id = "tcChat_" + Math.round(Math.random() * Math.PI * 7654321);
    }
    if (name.indexOf("html:") == 0) {
      var xmlNode = el;
      var canvas = new com.inq.ui.Html(name, id, parentObject);
      if ((id === "tc-aria-readme" || id === "tc-aria-readme-mini") && com.inq.utils.Capabilities.isAndroid()) {
        canvas._div.setAttribute("aria-label", "  ");
      }
      this.applyAttributes(xmlNode, canvas);
      canvas.attachTo(parentObject);
      if (id != "inqTitleBar" && id != "inqDivResizeCorner" && id != "tcChat_Skin") {
        Application.application.setMxmlItem(canvas);
      } else {
        haxe.Log.trace("special case: " + id, {fileName:"SkinLoader.hx", lineNumber:408, className:"com.inq.ui.SkinLoader", methodName:"_renderMxml"});
      }
      var newit = xmlNode.elements();
      if (!newit.hasNext() && xmlNode.firstChild() != null) {
        var innerHTML = xmlNode.firstChild().getNodeValue();
        if (innerHTML != null && innerHTML != "") {
          canvas._div.innerHTML = innerHTML;
        }
      }
      this._renderMxml(newit, canvas);
      if (id != "inqTitleBar" && id != "inqDivResizeCorner") {
        canvas.applyStyles();
      }
    } else {
      switch(name) {
        case "mx:Style":
          var xmlNode = el;
          var source = xmlNode.get("source");
          if (source != null) {
            if (com.inq.flash.client.control.FlashPeer.getIsSkinLocal()) {
              source = source + "?" + Math.random().toString();
              source = com.inq.flash.client.control.FlashPeer.getSkinPath() + "/" + source;
            } else {
              source = com.inq.ui.SkinLoader._skinpath + "/" + source;
            }
            var doc = window.document;
            try {
              doc = "mx:ClientBody" == xmlNode.getParent().getNodeName() ? window.parent.document : window.document;
            } catch (e) {
              doc = window.document;
            }
            var heads = doc.getElementsByTagName("HEAD");
            if (heads == null || heads.length == 0) {
              var html = doc.getElementsByTagName("HTML")
            }
            var head = heads[0];
            var node = null;
            var nodes = head.getElementsByTagName("LINK");
            if (nodes != null && nodes.length > 0) {
              var nix;
              var _g1 = 0, _g = nodes.length;
              while (_g1 < _g) {
                var nix1 = _g1++;
                if (nodes[nix1].id == "mxStyle") {
                  node = nodes[nix1];
                  break;
                }
              }
            }
            if (node == null) {
              node = doc.createElement("LINK");
              node.name = "mxStyle";
              node.type = "text/css";
              node.rel = "stylesheet";
              node.media = "screen";
              if (window.top.location.protocol == "https:") {
                if (source.indexOf("https") == -1) {
                  source = source.replace("http", "https");
                }
              }
              node.href = source;
              head.appendChild(node);
            } else {
              node.href = source;
            }
          }
          break;
        case "mx:ClientBody":
          var xmlNode = el;
          var clientBody = new com.inq.ui.ClientBody;
          Application.application.setMxmlItem(clientBody);
          var newit = xmlNode.elements();
          this._renderMxml(newit, clientBody);
          break;
        case "mx:Literal":
          var xmlNode = el;
          var literal = new com.inq.ui.Literal(id);
          this.applyAttributes(xmlNode, literal);
          literal.attachTo(parentObject);
          Application.application.setMxmlItem(literal);
          var newit = xmlNode.elements();
          this._renderMxml(newit, literal);
          break;
        case "mx:htag":
          var xmlNode = el;
          var htmlTagName = xmlNode.get("el");
          var canvas = new com.inq.ui.Html(htmlTagName, id, parentObject);
          this.applyAttributes(xmlNode, canvas);
          canvas.attachTo(parentObject);
          Application.application.setMxmlItem(canvas);
          var newit = xmlNode.elements();
          if (!newit.hasNext() && xmlNode.firstChild() != null) {
            var innerHTML = xmlNode.firstChild().getNodeValue();
            if (innerHTML != null && innerHTML != "") {
              canvas._div.innerHTML = innerHTML;
            }
          }
          this._renderMxml(newit, canvas);
          canvas.applyStyles();
          break;
        case "mx:Canvas":
          var xmlNode = el;
          var canvas = new com.inq.ui.Canvas(id);
          canvas.attachTo(parentObject);
          this.applyAttributes(xmlNode, canvas);
          canvas.applySkinAttribute();
          Application.application.setMxmlItem(canvas);
          var newit = xmlNode.elements();
          this._renderMxml(newit, canvas);
          break;
        case "mx:Button":
          var xmlNode = el;
          var sources = [];
          var $it0 = xmlNode.elementsNamed("mx:upSkin");
          while ($it0.hasNext()) {
            var itm = $it0.next();
            var source = this.unembed("" + Std.string(itm.firstChild()), btn);
            sources.push(source);
          }
          var btn = new com.inq.ui.Button(id, sources);
          btn.attachTo(parentObject);
          this.applyAttributes(xmlNode, btn);
          btn.addEventListener(com.inq.events.MouseEvent.CLICK, null);
          Application.application.setMxmlItem(btn);
          break;
        case "mx:Text":
          var xmlNode = el;
          var txt = new com.inq.ui.Text;
          this.applyAttributes(xmlNode, txt);
          txt.attachTo(parentObject);
          Application.application.setMxmlItem(txt);
          break;
        case "mx:Image":
          var xmlNode = el;
          var img = new com.inq.ui.Image(id);
          this.applyAttributes(xmlNode, img);
          var $it1 = xmlNode.elementsNamed("mx:source");
          while ($it1.hasNext()) {
            var itm = $it1.next();
            var xmlsrc = itm;
            var source = this.unembed("" + Std.string(xmlsrc.firstChild()), img);
            img.setSrc(source);
          }
          img.attachTo(parentObject);
          break;
        case "mx:TextArea":
          var xmlNode = el;
          var ta = new com.inq.ui.TextArea(id);
          this.applyAttributes(xmlNode, ta);
          ta.attachTo(parentObject);
          Application.application.setMxmlItem(ta);
          break;
        case "mx:TextInput":
          var xmlNode = el;
          var ti = new com.inq.ui.TextInput(id);
          this.applyAttributes(xmlNode, ti);
          ti.attachTo(parentObject);
          Application.application.setMxmlItem(ti);
          break;
        case "mx:LineInput":
          var xmlNode = el;
          var ti = new com.inq.ui.LineInput(id);
          this.applyAttributes(xmlNode, ti);
          ti.attachTo(parentObject);
          Application.application.setMxmlItem(ti);
          break;
        case "mx:Label":
          var xmlNode = el;
          var ti = new com.inq.ui.Label;
          this.applyAttributes(xmlNode, ti);
          ti.attachTo(parentObject);
          Application.application.setMxmlItem(ti);
          break;
        case "mx:XFrame":
          var xmlNode = el;
          var ti = new com.inq.ui.XFrame(id);
          this.applyAttributes(xmlNode, ti);
          ti.attachTo(parentObject);
          Application.application.setMxmlItem(ti);
          break;
        case "mx:IFrame":
          var xmlNode = el;
          var ti = new com.inq.ui.IFrame(id);
          this.applyAttributes(xmlNode, ti);
          ti.attachTo(parentObject);
          Application.application.setMxmlItem(ti);
          break;
        case "mx:Script":
          var source = el.toString();
          this._processMxmlScript(source);
          break;
        case "mx:FileInput":
          var xmlNode = el;
          var fi = new com.inq.ui.FileInput(id);
          this.applyAttributes(xmlNode, fi);
          fi.attachTo(parentObject);
          Application.application.setMxmlItem(fi);
          break;
      }
    }
  }
};
com.inq.ui.SkinLoader.prototype._draw = function(mxml) {
  var xml;
  var me = new com.inq.ui.Container("Skin");
  me.clear();
  if (mxml == null) {
    xml = Xml.parse(haxe.Resource.getString("mxml"));
  } else {
    xml = Xml.parse(mxml);
  }
  haxe.Log.trace("Ask if skin is in client", {fileName:"SkinLoader.hx", lineNumber:304, className:"com.inq.ui.SkinLoader", methodName:"_draw"});
  com.inq.ui.SkinLoader.hasClientBody = this.testClientBody(xml);
  com.inq.ui.SkinLoader.skinInClient = this.testSkinInClient(xml);
  if (com.inq.ui.SkinLoader.skinInClient) {
    haxe.Log.trace("skin is in the client", {fileName:"SkinLoader.hx", lineNumber:308, className:"com.inq.ui.SkinLoader", methodName:"_draw"});
    var div = Application.application._div;
    var doc = window.parent.document;
    var loc = window.frameElement;
    if (this._div.ownerDocument == doc) {
      haxe.Log.trace("We already are in the client space, no need to move", {fileName:"SkinLoader.hx", lineNumber:314, className:"com.inq.ui.SkinLoader", methodName:"_draw"});
    } else {
      Application.application.clear();
      haxe.Log.trace("remove element", {fileName:"SkinLoader.hx", lineNumber:317, className:"com.inq.ui.SkinLoader", methodName:"_draw"});
      if (null != div.removeChild) {
        try {
          div.parentElement.removeChild(div);
        } catch (e) {
          haxe.Log.trace("ERROR: Could not remove element: " + Std.string(e), {fileName:"SkinLoader.hx", lineNumber:322, className:"com.inq.ui.SkinLoader", methodName:"_draw"});
        }
      }
      if (div.ownerDocument != doc) {
        try {
          if (doc.adoptNode) {
            haxe.Log.trace("Adopt the node into the new document", {fileName:"SkinLoader.hx", lineNumber:329, className:"com.inq.ui.SkinLoader", methodName:"_draw"});
            doc.adoptNode(div);
            haxe.Log.trace("Node has been adopted into new document", {fileName:"SkinLoader.hx", lineNumber:331, className:"com.inq.ui.SkinLoader", methodName:"_draw"});
          } else {
            haxe.Log.trace("adoptNode not implemented on this browser create new div", {fileName:"SkinLoader.hx", lineNumber:333, className:"com.inq.ui.SkinLoader", methodName:"_draw"});
            div = doc.createElement("DIV");
            Application.application.setPanelWindow(window.top);
          }
        } catch (e) {
          haxe.Log.trace("Document could not adopt element", {fileName:"SkinLoader.hx", lineNumber:337, className:"com.inq.ui.SkinLoader", methodName:"_draw", customParams:[e]});
        }
      } else {
        haxe.Log.trace("document has correct owner", {fileName:"SkinLoader.hx", lineNumber:340, className:"com.inq.ui.SkinLoader", methodName:"_draw"});
      }
    }
    div.name = "Stage";
    div.style.zIndex = loc.style.zIndex;
    haxe.Log.trace("insert element as next sibling", {fileName:"SkinLoader.hx", lineNumber:346, className:"com.inq.ui.SkinLoader", methodName:"_draw"});
    loc.parentElement.insertBefore(div, loc.nextSibling);
    Application.application._div = div;
    haxe.Log.trace("skin has been moved to the client", {fileName:"SkinLoader.hx", lineNumber:349, className:"com.inq.ui.SkinLoader", methodName:"_draw"});
  }
  var c;
  Application.application.initStyle("id", "Skin");
  Application.application.clear();
  Application.application.setID("Skin");
  this.applyAttributes(xml.firstElement(), Application.application);
  var allScripts = window.document.getElementsByTagName("script");
  var pDoc = window.frameElement.ownerDocument;
  if (window.frameElement) {
    Application.application.attachToElement(window.document.body);
  }
  var it = xml.elements();
  while (it.hasNext()) {
    var x = it.next();
    var name = x.getNodeName();
    this._renderMxml(x.elements(), Application.application);
  }
};
com.inq.ui.SkinLoader.prototype.applyAttributes = function(xmlNode, c) {
  var container = c;
  var $it0 = xmlNode.attributes();
  while ($it0.hasNext()) {
    var ats = $it0.next();
    var attName = ats;
    var attValu = xmlNode.get(attName);
    var attributeTypeList = ["role", "alt", "tabindex", "accesskey", "tooltip"];
    if (StringTools.startsWith(attName.toLowerCase(), "aria-") || attributeTypeList.toString().indexOf(attName.toLowerCase()) > -1) {
      container.initAttribute(attName.toLowerCase(), attValu);
    } else {
      switch(attName) {
        case "id":
          container.setID(attValu);
          break;
        case "el":
          container._div = document.createElement(attValu);
          break;
        case "min-width":
          container.initStyle(attName, attValu + "px");
          break;
        case "style":
          if (js.Boot.__instanceof(container, com.inq.ui.Html)) {
            var html = js.Boot.__cast(container, com.inq.ui.Html);
            html._setStyle(attValu);
          }
          break;
        case "scrolling":
          container.setScrolling(attValu);
          break;
        case "source":
          container.setSrc(this.unembed(attValu, container));
          break;
        case "backgroundImage":
          container.initStyle("backgroundImage", this.unembed(attValu, container));
          container.setBackgroundImage(this.unembed(attValu, container), false);
          break;
        case "enabled":
          container.setEnabled(attValu != "false" ? true : false);
          break;
        case "visible":
          if (attValu == "collapse") {
            container.initStyle("visibility", "collapse");
            attValu = "false";
          }
          container.initStyle("visible", attValu);
          container.setVisible(attValu == "false" ? false : true);
          break;
        case "upSkin":
          container.initStyle("upSkin", this.unembed(attValu, container));
          var b = c;
          b.setUpSkin(this.unembed(attValu, b));
          break;
        case "overSkin":
          container.initStyle("overSkin", this.unembed(attValu, container));
          break;
        case "init":
          var xFrame = container;
          xFrame.setInitOnLoad(attValu);
          break;
        case "htmlLabel":
          if (typeof attValu != "undefined") {
            container.addHtmlLabel(attValu);
          }
          break;
        default:
          container.initStyle(attName, attValu);
      }
    }
  }
  container.applyStyle();
  container.applyAttributeMap();
};
com.inq.ui.SkinLoader.prototype.unembed = function(source, con) {
  var bEmbeded = false;
  var s = source;
  var embedRegexp = new EReg("@Embed\\('([^']*)',([^,]*),([^,]*),([^,]*),([^,]*)\\)", "i");
  try {
    if (StringTools.startsWith(s, "@Embed(")) {
      if (this.getImageMap() != null) {
        try {
          var newEmbed = this.getImageMap()[s];
          if (newEmbed != null) {
            s = newEmbed;
          }
        } catch (e) {
          haxe.Log.trace("map error " + s + ":" + Std.string(e), {fileName:"SkinLoader.hx", lineNumber:188, className:"com.inq.ui.SkinLoader", methodName:"unembed"});
        }
      }
      if (embedRegexp.match(s)) {
        s = embedRegexp.matched(1);
        if (con != null) {
          var l = embedRegexp.matched(2);
          var t = embedRegexp.matched(3);
          var w = embedRegexp.matched(4);
          var h = embedRegexp.matched(5);
          con.initStyle("sprite-height", h);
          con.initStyle("sprite-width", w);
          con.initStyle("sprite-left", l);
          con.initStyle("sprite-top", t);
          con.isSprite = true;
        }
        bEmbeded = true;
      } else {
        s = HxOverrides.substr(s, 7, s.length - 8);
        bEmbeded = true;
      }
    }
    if (s.charAt(0) == "'") {
      s = HxOverrides.substr(s, 1, s.length - 2);
    }
    if (com.inq.flash.client.control.FlashPeer.getIsSkinLocal()) {
      var skinPath = com.inq.flash.client.control.FlashPeer.getSkinPath();
      s = (bEmbeded ? skinPath + "/" + s : s).split("/./").join("/");
    } else {
      s = (bEmbeded ? com.inq.ui.SkinLoader._skinpath + "/" + s : s).split("/./").join("/");
    }
    return s;
  } catch (e) {
    throw new String("Could not parse embed: " + source);
  }
};
com.inq.ui.SkinLoader.prototype.getImageMap = function() {
  if (com.inq.ui.SkinLoader.spriteMap != null) {
    return com.inq.ui.SkinLoader.spriteMap;
  }
  var tmpCanvas = window.document.createElement("CANVAS");
  var tmpMap = com.inq.utils.Util.getConfig("html5map", null);
  if (tmpCanvas != null) {
    if (tmpCanvas["getContext"] && null != tmpMap) {
      com.inq.ui.SkinLoader.spriteMap = tmpMap;
    } else {
      com.inq.ui.SkinLoader.spriteMap = null;
    }
  }
  return com.inq.ui.SkinLoader.spriteMap;
};
com.inq.ui.SkinLoader.prototype._thenDraw = function() {
  haxe.Log.trace("_thenDraw", {fileName:"SkinLoader.hx", lineNumber:140, className:"com.inq.ui.SkinLoader", methodName:"_thenDraw"});
  if (com.inq.flash.client.control.FlashPeer.getIsSkinLocal()) {
    var mxmlData = com.inq.flash.client.control.FlashPeer.getSkinMXML();
    this._draw(mxmlData);
    if (com.inq.flash.client.control.FlashPeer.getIsBuilder()) {
      var agentName = com.inq.flash.client.control.FlashPeer.getAgentName();
      com.inq.flash.client.control.ApplicationController.prototype.appendReceivedText("Hello how can I help you?", agentName, 1);
      com.inq.flash.client.control.ApplicationController.prototype.appendSentText("I need help with my account.", 2);
      com.inq.flash.client.control.ApplicationController.prototype.appendReceivedText("Sure I can help you with that.", agentName, 3);
      com.inq.flash.client.control.ApplicationController.prototype.appendReceivedText("This is a system message: Your chat has been disconnected.", "system", 4);
      var systemMessage = com.inq.utils.Util.getConfig("sAgentIsTyping", "Agent is typing...");
      com.inq.flash.client.control.ApplicationController.prototype.appendReceivedText(systemMessage, "", 5);
    }
  } else {
    this._draw(this._loaderSkin.data);
  }
  this.executeCode();
};
com.inq.ui.SkinLoader.prototype._successSkinLoadThenDraw = function(e) {
  var path = this._requestSkin.url;
  com.inq.ui.SkinLoader.skinCollection[path] = {mxml:this._loaderSkin.data, path:path};
  var xml = Xml.parse(this._loaderSkin.data);
  this.loadSkinConfig(xml);
  if (!com.inq.utils.Util.isIE) {
    this._draw(this._loaderSkin.data);
    this.executeCode();
    this.dispatchEvent(e);
  } else {
    this.preloadAllMxmlImages(xml.elements(), true);
    this.dispatchEvent(e);
  }
  var aBody;
  if (com.inq.utils.Util.getConfig("divSkin", false) == true) {
    aBody = top.window.document.body;
  } else {
    aBody = this.stg.contentWindow.document.body;
  }
  com.inq.utils.Capabilities.BindListener(aBody, "keydown", Application.keydownHandler);
  if (window.parent.name == "_inqPersistentChat") {
    window.parent.document.title = com.inq.utils.Util.getConfig("sPersistentFrameTitle", "Chat");
  }
};
com.inq.ui.SkinLoader.prototype.executeCode = function() {
  return;
};
com.inq.ui.SkinLoader.prototype._successSkinLoad = function(e) {
  var path = this._requestSkin.url;
  com.inq.ui.SkinLoader.skinCollection[path] = {mxml:this._loaderSkin.data, path:path};
  this.dispatchEvent(e);
  var xml = Xml.parse(this._loaderSkin.data);
  if (!com.inq.utils.Util.isIE) {
    this._preloadImages(xml.elements());
  } else {
    this.preloadAllMxmlImages(xml.elements());
  }
  return;
};
com.inq.ui.SkinLoader.prototype._failedSkinLoad = function(e) {
  haxe.Log.trace("skin load failed", {fileName:"SkinLoader.hx", lineNumber:88, className:"com.inq.ui.SkinLoader", methodName:"_failedSkinLoad"});
  this.dispatchEvent(e);
  return;
};
com.inq.ui.SkinLoader.prototype.drawSkin = function(skinPath) {
  if (!com.inq.flash.client.control.FlashPeer.getIsSkinLocal()) {
    if (HxOverrides.substr(skinPath, 0, 2) == "./") {
      skinPath = HxOverrides.substr(skinPath, 2, null);
    }
    if (skinPath.indexOf("\\") < 0 && skinPath.indexOf("/") < 0) {
      skinPath = com.inq.ui.SkinLoader.getSkinBase() + "/" + skinPath;
    }
    haxe.Log.trace("drawSkin: " + skinPath, {fileName:"SkinLoader.hx", lineNumber:69, className:"com.inq.ui.SkinLoader", methodName:"drawSkin"});
    if (null == com.inq.ui.SkinLoader.skinCollection[skinPath]) {
      this._loaderSkin = new com.inq.net.URLLoader;
      this._requestSkin = new com.inq.net.URLRequest(skinPath);
      this._loaderSkin.addEventListener(com.inq.events.IOErrorEvent.IO_ERROR, $bind(this, this._failedSkinLoad));
      this._loaderSkin.addEventListener(com.inq.events.Event.COMPLETE, $bind(this, this._successSkinLoadThenDraw));
      this._loaderSkin.load(this._requestSkin);
    } else {
      haxe.Log.trace("drawSkin: get path from store", {fileName:"SkinLoader.hx", lineNumber:78, className:"com.inq.ui.SkinLoader", methodName:"drawSkin"});
      var obj = com.inq.ui.SkinLoader.skinCollection[skinPath];
      this._draw(obj.mxml);
      this.executeCode();
      var e = new com.inq.events.Event(com.inq.events.Event.COMPLETE);
      this.dispatchEvent(e);
    }
  } else {
    var mxmlData = com.inq.flash.client.control.FlashPeer.getSkinMXML();
    var xml;
    xml = Xml.parse(mxmlData);
    this.loadSkinConfig(xml);
    var e = new com.inq.events.Event(com.inq.events.Event.COMPLETE);
    this._draw(mxmlData);
    if (com.inq.flash.client.control.FlashPeer.getIsBuilder()) {
      var agentName = com.inq.flash.client.control.FlashPeer.getAgentName();
      com.inq.flash.client.control.ApplicationController.prototype.appendReceivedText("Hello how can I help you?", agentName, 1);
      com.inq.flash.client.control.ApplicationController.prototype.appendSentText("I need help with my account.", 2);
      com.inq.flash.client.control.ApplicationController.prototype.appendReceivedText("Sure I can help you with that.", agentName, 3);
      com.inq.flash.client.control.ApplicationController.prototype.appendReceivedText("This is a system message: Your chat has been disconnected.", "system", 4);
      var systemMessage = com.inq.utils.Util.getConfig("sAgentIsTyping", "Agent is typing...");
      com.inq.flash.client.control.ApplicationController.prototype.appendReceivedText(systemMessage, "", 5);
    }
    this.executeCode();
    this.dispatchEvent(e);
    var aBody;
    if (com.inq.utils.Util.getConfig("divSkin", false) == true) {
      aBody = top.window.document.body;
    } else {
      aBody = this.stg.contentWindow.document.body;
    }
    com.inq.utils.Capabilities.BindListener(aBody, "keydown", Application.keydownHandler);
  }
};
com.inq.ui.SkinLoader.prototype.loadSkin = function(skinPath) {
  if (HxOverrides.substr(skinPath, 0, 2) == "./") {
    skinPath = HxOverrides.substr(skinPath, 2, null);
  }
  if (skinPath.indexOf("\\") < 0 && skinPath.indexOf("/") < 0) {
    skinPath = com.inq.ui.SkinLoader.getSkinBase() + "/" + skinPath;
  }
  if (null == com.inq.ui.SkinLoader.skinCollection[skinPath]) {
    this._loaderSkin = new com.inq.net.URLLoader;
    this._requestSkin = new com.inq.net.URLRequest(skinPath);
    this._loaderSkin.addEventListener(com.inq.events.IOErrorEvent.IO_ERROR, $bind(this, this._failedSkinLoad));
    this._loaderSkin.addEventListener(com.inq.events.Event.COMPLETE, $bind(this, this._successSkinLoad));
    this._loaderSkin.load(this._requestSkin);
  } else {
    var e = new com.inq.events.Event(com.inq.events.Event.COMPLETE);
    this.dispatchEvent(e);
  }
};
com.inq.ui.SkinLoader.prototype._requestSkin = null;
com.inq.ui.SkinLoader.prototype._loaderSkin = null;
com.inq.ui.SkinLoader.prototype.__class__ = com.inq.ui.SkinLoader;
com.inq.ui.SkinLoader.OVERALL_CONTAINER_ID = "Skin";
com.inq.ui.SkinLoader._skinpath = com.inq.ui.SkinLoader._getSkinPath();
com.inq.ui.SkinLoader.skinCollection = {};
com.inq.ui.SkinLoader.contextArray = new Array;
com.inq.ui.SkinLoader.imageCollection = {};
com.inq.ui.SkinLoader.imageCount = 0;
com.inq.ui.SkinLoader.spriteMap = null;
com.inq.utils.ConsoleLogger = function() {
};
$hxClasses["com.inq.utils.ConsoleLogger"] = com.inq.utils.ConsoleLogger;
com.inq.utils.ConsoleLogger.__name__ = ["com", "inq", "utils", "ConsoleLogger"];
com.inq.utils.ConsoleLogger.detect = function() {
  try {
    return null != window["console"];
  } catch (e) {
    return false;
  }
};
com.inq.utils.ConsoleLogger.redirectTraces = function() {
  haxe.Log.trace = com.inq.utils.ConsoleLogger.trace;
  js.Lib.onerror = com.inq.utils.ConsoleLogger.onError;
};
com.inq.utils.ConsoleLogger.onError = function(err, stack) {
  var buf = err + "\n";
  var _g = 0;
  while (_g < stack.length) {
    var s = stack[_g];
    ++_g;
    buf += "Called from " + s + "\n";
  }
  com.inq.utils.ConsoleLogger.trace(buf, null);
  return true;
};
com.inq.utils.ConsoleLogger.trace = function(v, inf) {
  if (!com.inq.utils.ConsoleLogger.detect() || com.inq.flash.client.control.FlashPeer.isLoggingDisabled()) {
    return;
  }
  var type = inf != null && inf.customParams != null ? inf.customParams[0] : null;
  if (type != "warn" && type != "info" && type != "debug" && type != "error") {
    type = inf == null ? "error" : "log";
  }
  if (null != window.console[type]) {
    try {
      var place = inf == null ? "" : inf.fileName + ":" + inf.lineNumber + " : ";
      window.console[type](place + Std.string(v));
    } catch (e) {
    }
  }
};
com.inq.utils.ConsoleLogger.prototype.__class__ = com.inq.utils.ConsoleLogger;
EReg = function(r, opt) {
  opt = opt.split("u").join("");
  this.r = new RegExp(r, opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype.customReplace = function(s, f) {
  var buf = new StringBuf;
  while (true) {
    if (!this.match(s)) {
      break;
    }
    buf.b += Std.string(this.matchedLeft());
    buf.b += Std.string(f(this));
    s = this.matchedRight();
  }
  buf.b += Std.string(s);
  return buf.b;
};
EReg.prototype.replace = function(s, by) {
  return s.replace(this.r, by);
};
EReg.prototype.split = function(s) {
  var d = "#__delim__#";
  return s.replace(this.r, d).split(d);
};
EReg.prototype.matchedPos = function() {
  if (this.r.m == null) {
    throw "No string matched";
  }
  return {pos:this.r.m.index, len:this.r.m[0].length};
};
EReg.prototype.matchedRight = function() {
  if (this.r.m == null) {
    throw "No string matched";
  }
  var sz = this.r.m.index + this.r.m[0].length;
  return this.r.s.substr(sz, this.r.s.length - sz);
};
EReg.prototype.matchedLeft = function() {
  if (this.r.m == null) {
    throw "No string matched";
  }
  return this.r.s.substr(0, this.r.m.index);
};
EReg.prototype.matched = function(n) {
  return this.r.m != null && n >= 0 && n < this.r.m.length ? this.r.m[n] : function($this) {
    var $r;
    throw "EReg::matched";return $r;
  }(this);
};
EReg.prototype.match = function(s) {
  if (this.r.global) {
    this.r.lastIndex = 0;
  }
  this.r.m = this.r.exec(s);
  this.r.s = s;
  return this.r.m != null;
};
EReg.prototype.r = null;
EReg.prototype.__class__ = EReg;
com.inq.utils.Capabilities = function() {
};
$hxClasses["com.inq.utils.Capabilities"] = com.inq.utils.Capabilities;
com.inq.utils.Capabilities.__name__ = ["com", "inq", "utils", "Capabilities"];
com.inq.utils.Capabilities.os = null;
com.inq.utils.Capabilities._os = null;
com.inq.utils.Capabilities.userAgent = null;
com.inq.utils.Capabilities.isWebKit = null;
com.inq.utils.Capabilities.viewportDetector = null;
com.inq.utils.Capabilities.init = function() {
  var platform = null;
  var cpuClass = null;
  var replaceWith = null;
  var pattern = null;
  try {
    var _g1 = 0, _g = com.inq.utils.Capabilities.patternTable.length;
    while (_g1 < _g) {
      var i = _g1++;
      pattern = new EReg(com.inq.utils.Capabilities.patternTable[i], "i");
      replaceWith = "$1";
      var b = pattern.match(com.inq.utils.Capabilities.getUserAgent());
      if (b) {
        com.inq.utils.Capabilities._os = pattern.matched(1);
        switch(com.inq.utils.Capabilities._os) {
          case "Windows NT 6.1":
            com.inq.utils.Capabilities._os = "Windows 7/Windows Server 2008 R2";
            break;
          case "Windows NT 6.0":
            com.inq.utils.Capabilities._os = "Windows Vista/Windows Server 2008";
            break;
          case "Windows NT 5.2":
            com.inq.utils.Capabilities._os = "Windows XP/Windows Server 2003/Windows Home Server";
            break;
          case "Windows NT 5.1":
            com.inq.utils.Capabilities._os = "Windows XP";
            break;
          case "Windows NT 6.2":
            com.inq.utils.Capabilities._os = "Windows 8";
            break;
          case "Windows NT 10.0":
            com.inq.utils.Capabilities._os = "Windows 10";
            break;
          default:
            if (com.inq.utils.Capabilities._os.indexOf("like Mac OS X") != -1) {
              var sysVer = "";
              var device = "";
              var regExSysVer = new EReg("CPU OS (\\w*) like Mac OS X", "gi");
              var regDevice = new EReg("[\\s]*\\w+[/ ][0-9a-zA-Z.]*\\s[(](\\w+);\\s*([^;\\)]*).*", "gi");
              if (regExSysVer.match(com.inq.utils.Capabilities._os)) {
                sysVer = regExSysVer.matched(1);
              }
              if (regDevice.match(com.inq.utils.Capabilities.getUserAgent())) {
                device = " " + regDevice.matched(1);
              }
              com.inq.utils.Capabilities._os = "Mac iOS " + sysVer + device;
            }
          ;
        }
        return true;
      }
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  try {
    platform = window.navigator.platform;
    cpuClass = window.navigator.cpuClass;
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  com.inq.utils.Capabilities._os = null == platform ? "unknown" : platform;
  if (null != cpuClass) {
    com.inq.utils.Capabilities._os += " " + cpuClass;
  }
  return true;
};
com.inq.utils.Capabilities._getOS = function() {
  if (com.inq.utils.Capabilities._init == false) {
    com.inq.utils.Capabilities._init = com.inq.utils.Capabilities.init();
  }
  return com.inq.utils.Capabilities._os;
};
com.inq.utils.Capabilities.getUserAgent = function() {
  if (com.inq.utils.Capabilities.userAgent == null) {
    com.inq.utils.Capabilities.userAgent = window.navigator.userAgent;
  }
  var userAgentCopy = com.inq.utils.Capabilities.userAgent;
  return userAgentCopy;
};
com.inq.utils.Capabilities.isMobile = function() {
  if (com.inq.utils.Capabilities.mobile == null) {
    com.inq.utils.Capabilities.mobile = com.inq.utils.Capabilities.isPhone() || com.inq.utils.Capabilities.isTablet();
  }
  return com.inq.utils.Capabilities.mobile;
};
com.inq.utils.Capabilities.isIphone = function() {
  return com.inq.utils.Capabilities.isPhone() && com.inq.utils.Capabilities._getOS().indexOf("iPhone") != -1;
};
com.inq.utils.Capabilities.isIpad = function() {
  return com.inq.utils.Capabilities._getOS() != null && com.inq.utils.Capabilities._getOS().indexOf("iPad") != -1;
};
com.inq.utils.Capabilities.isIe10Phone = function() {
  var win = com.inq.utils.Capabilities.isWindowsPhone();
  var v = com.inq.utils.Capabilities.getIeVersion();
  return win && v >= 10;
};
com.inq.utils.Capabilities.isWindowsPhone = function() {
  return com.inq.utils.Capabilities.getUserAgent().indexOf("Windows Phone") != -1;
};
com.inq.utils.Capabilities.getIeVersion = function() {
  try {
    if (com.inq.utils.Capabilities.ieVersion != null) {
      return com.inq.utils.Capabilities.ieVersion;
    } else {
      var agent = com.inq.utils.Capabilities.getUserAgent();
      var m = agent.match(/(MSIE (\d+\.*\d*))|(IEMobile\/(\d+\.*\d+))/);
      var v = Std.parseInt(m[2] || m[4]);
      com.inq.utils.Capabilities.ieVersion = v;
      return v;
    }
  } catch (e) {
    return -1;
  }
};
com.inq.utils.Capabilities.isPhone = function() {
  return com.inq.utils.Capabilities.getDeviceType() == "Phone";
};
com.inq.utils.Capabilities.isTablet = function() {
  return com.inq.utils.Capabilities.getDeviceType() == "Tablet";
};
com.inq.utils.Capabilities.getDeviceType = function() {
  if (com.inq.utils.Capabilities.deviceType == null) {
    com.inq.utils.Capabilities.deviceType = com.inq.flash.client.control.FlashPeer.getDeviceType();
  }
  return com.inq.utils.Capabilities.deviceType;
};
com.inq.utils.Capabilities.isChrome = function() {
  return com.inq.utils.Capabilities.getUserAgent().toLowerCase().indexOf("edge") == -1 && com.inq.utils.Capabilities.getUserAgent().toLowerCase().indexOf("chrome") > -1;
};
com.inq.utils.Capabilities.getChromeVersion = function() {
  try {
    if (com.inq.utils.Capabilities.chromeVersion != null) {
      return com.inq.utils.Capabilities.chromeVersion;
    } else {
      if (com.inq.utils.Capabilities.isChrome() == true) {
        var agent = com.inq.utils.Capabilities.getUserAgent();
        var m = agent.match(/Chrome\/(\d+)/);
        var v = Std.parseInt(m[1]);
        com.inq.utils.Capabilities.chromeVersion = v;
        return v;
      } else {
        return -1;
      }
    }
  } catch (e) {
    return -1;
  }
};
com.inq.utils.Capabilities._isWebKit = function() {
  if (com.inq.utils.Capabilities.webKit != null) {
    return com.inq.utils.Capabilities.webKit;
  } else {
    var pattern = new EReg("(safari)", "i");
    com.inq.utils.Capabilities.webKit = pattern.match(com.inq.utils.Capabilities.getUserAgent());
    return com.inq.utils.Capabilities.webKit;
  }
};
com.inq.utils.Capabilities.isSafari = function() {
  if (com.inq.utils.Capabilities._isSafari != null) {
    return com.inq.utils.Capabilities._isSafari;
  } else {
    var ua = com.inq.utils.Capabilities.userAgent.toLowerCase();
    com.inq.utils.Capabilities._isSafari = ua.indexOf("safari") >= 0 && !(ua.indexOf("chrome") >= 0 || ua.indexOf("crios") >= 0);
    return com.inq.utils.Capabilities._isSafari;
  }
};
com.inq.utils.Capabilities.isSafariVersion8 = function() {
  if (com.inq.utils.Capabilities._isVersion8 != null) {
    return com.inq.utils.Capabilities._isVersion8;
  } else {
    var pattern = new EReg("(iPhone|iPod|iPad).*AppleWebKit?.*(Version\\/8)", "i");
    com.inq.utils.Capabilities._isVersion8 = pattern.match(com.inq.utils.Capabilities.getUserAgent());
    return com.inq.utils.Capabilities._isVersion8;
  }
};
com.inq.utils.Capabilities.isSafariVersion9 = function() {
  if (com.inq.utils.Capabilities._isVersion9 != null) {
    return com.inq.utils.Capabilities._isVersion9;
  } else {
    var pattern = new EReg("(iPhone|iPod|iPad).*AppleWebKit?.*(Version\\/9)", "i");
    com.inq.utils.Capabilities._isVersion9 = pattern.match(com.inq.utils.Capabilities.getUserAgent());
    return com.inq.utils.Capabilities._isVersion9;
  }
};
com.inq.utils.Capabilities.isIOSWebView = function() {
  if (com.inq.utils.Capabilities._isIOSWebView != null) {
    return com.inq.utils.Capabilities._isIOSWebView;
  } else {
    var pattern = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)", "i");
    com.inq.utils.Capabilities._isIOSWebView = pattern.match(com.inq.utils.Capabilities.getUserAgent());
    return com.inq.utils.Capabilities._isIOSWebView;
  }
};
com.inq.utils.Capabilities.isAndroidWebView = function() {
  if (com.inq.utils.Capabilities._isAndroidWebView != null) {
    return com.inq.utils.Capabilities._isAndroidWebView;
  } else {
    var pattern = new EReg("Android.*?(wv|Version\\/[.0-9]+).*?Chrome\\/([0-9]{2}).*?Mobile", "i");
    com.inq.utils.Capabilities._isAndroidWebView = pattern.match(com.inq.utils.Capabilities.getUserAgent());
    return com.inq.utils.Capabilities._isAndroidWebView;
  }
};
com.inq.utils.Capabilities.isSafariVersionPrior8 = function() {
  if (com.inq.utils.Capabilities._isVersionPrior8 != null) {
    return com.inq.utils.Capabilities._isVersionPrior8;
  } else {
    var pattern = new EReg("(iPhone|iPod|iPad).*AppleWebKit?.*Version\\/(6|7)", "i");
    com.inq.utils.Capabilities._isVersionPrior8 = pattern.match(com.inq.utils.Capabilities.getUserAgent());
    return com.inq.utils.Capabilities._isVersionPrior8;
  }
};
com.inq.utils.Capabilities.isChromeiOS8 = function() {
  if (com.inq.utils.Capabilities._isCriOS8 != null) {
    return com.inq.utils.Capabilities._isCriOS8;
  } else {
    var pattern = new EReg("(iPhone|iPod|iPad).*(CPU\\s(iPhone|iPod|iPad)\\sOS\\s(6|7|8|9)_).*AppleWebKit?.*CriOS", "i");
    com.inq.utils.Capabilities._isCriOS8 = pattern.match(com.inq.utils.Capabilities.getUserAgent());
    return com.inq.utils.Capabilities._isCriOS8;
  }
};
com.inq.utils.Capabilities.isChromeiOS = function() {
  if (com.inq.utils.Capabilities._isCriOS != null) {
    return com.inq.utils.Capabilities._isCriOS;
  } else {
    var pattern = new EReg("(iPhone|iPod|iPad).*AppleWebKit?.*CriOS", "i");
    com.inq.utils.Capabilities._isCriOS = pattern.match(com.inq.utils.Capabilities.getUserAgent());
    return com.inq.utils.Capabilities._isCriOS;
  }
};
com.inq.utils.Capabilities.BindListener = function(node, event, handler) {
  if (null != window["addEventListener"]) {
    node.addEventListener(event, handler, false);
  } else {
    if (null != window["attachEvent"]) {
      node.attachEvent("on" + event, handler);
    }
  }
};
com.inq.utils.Capabilities.UnbindListener = function(node, event, handler) {
  if (null != window["removeEventListener"]) {
    node.removeEventListener(event, handler, false);
  } else {
    if (null != window["detachEvent"]) {
      node.detachEvent("on" + event, handler);
    }
  }
};
com.inq.utils.Capabilities.isWindowsPhone = function(testString) {
  var matched = (new EReg("Windows Phone", "i")).match(com.inq.utils.Capabilities.getUserAgent());
  if (matched && testString != null) {
    matched = com.inq.utils.Capabilities.getUserAgent().indexOf(testString) != -1;
  }
  return matched;
};
com.inq.utils.Capabilities.isAndroid = function(testString) {
  var matched = (new EReg("^(?!.*windows)(?=.*android)", "i")).match(com.inq.utils.Capabilities.getUserAgent());
  if (matched && testString != null) {
    matched = com.inq.utils.Capabilities.getUserAgent().indexOf(testString) != -1;
  }
  return matched;
};
com.inq.utils.Capabilities.getDefaultResizeArea = function() {
  if (com.inq.utils.Capabilities.isMobile()) {
    var a = new com.inq.utils.Area(0, 0, 32, 32);
    return a;
  } else {
    var a = new com.inq.utils.Area(0, 0, 16, 16);
    return a;
  }
};
com.inq.utils.Capabilities.isAutoZoom = function() {
  var result = false;
  if (com.inq.utils.Capabilities.isMobile()) {
    if ((new EReg("android", "i")).match(com.inq.utils.Capabilities.getUserAgent()) && (new EReg("a100|a200|transformer tf101|transformer tf300|gt-p6210|gt-p7100|sony tablet s|kindle fire", "i")).match(com.inq.utils.Capabilities.getUserAgent())) {
      result = false;
    } else {
      result = true;
    }
  }
  return result;
};
com.inq.utils.Capabilities.getViewport = function() {
  var x = com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft();
  var y = com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop();
  if (com.inq.utils.Capabilities.isAndroid() && (!com.inq.utils.Capabilities.isChrome() || com.inq.utils.Capabilities.getChromeVersion() < 40)) {
    var bug = com.inq.utils.Capabilities.getLowerRightCorner();
    var vp = new com.inq.utils.Area(x, y, bug.x, bug.y);
    return vp;
  } else {
    var w = Std.parseInt(window.parent.innerWidth);
    var h = Std.parseInt(window.parent.innerHeight);
    var vp = new com.inq.utils.Area(x, y, w, h);
    return vp;
  }
};
com.inq.utils.Capabilities.getOrientation = function() {
  var portrait = "orientation" in window ? (window.parent.orientation + 360) % 180 === 0 : true;
  if (com.inq.utils.Capabilities.isChrome()) {
    var bver = parseInt(window.navigator.appVersion.match(/Chrome\/(\d+)\./)[1], 10);
    var tpwin = window.top;
    if (isNaN(bver) || bver >= 33 && bver <= 35) {
      portrait = tpwin.outerWidth < tpwin.outerHeight;
    } else {
      if (bver >= 36) {
        portrait = tpwin.screen.width < tpwin.screen.height;
      }
    }
  }
  return portrait;
};
com.inq.utils.Capabilities.getScreenHeight = function() {
  var clientWin = window.top;
  if (com.inq.utils.Capabilities.isIphone() || com.inq.utils.Capabilities.isIpad()) {
    var isPortrait = com.inq.utils.Capabilities.getOrientation();
    if (isPortrait) {
      return clientWin.screen.height > clientWin.screen.width ? clientWin.screen.height : clientWin.screen.width;
    } else {
      return clientWin.screen.height > clientWin.screen.width ? clientWin.screen.width : clientWin.screen.height;
    }
  } else {
    return clientWin.screen.height;
  }
};
com.inq.utils.Capabilities.getScreenWidth = function() {
  var clientWin = window.top;
  if (com.inq.utils.Capabilities.isIphone() || com.inq.utils.Capabilities.isIpad()) {
    var isPortrait = com.inq.utils.Capabilities.getOrientation();
    if (isPortrait) {
      return clientWin.screen.height > clientWin.screen.width ? clientWin.screen.width : clientWin.screen.height;
    } else {
      return clientWin.screen.height > clientWin.screen.width ? clientWin.screen.height : clientWin.screen.width;
    }
  } else {
    return clientWin.screen.width;
  }
};
com.inq.utils.Capabilities.getAvailHeight = function() {
  var clientWin = window.top;
  if (com.inq.utils.Capabilities.isIphone() || com.inq.utils.Capabilities.isIpad()) {
    var isPortrait = com.inq.utils.Capabilities.getOrientation();
    if (isPortrait) {
      return clientWin.screen.availHeight > clientWin.screen.availWidth ? clientWin.screen.availHeight : clientWin.screen.availWidth;
    } else {
      return clientWin.screen.availHeight > clientWin.screen.availWidth ? clientWin.screen.availWidth : clientWin.screen.availHeight;
    }
  }
  return clientWin.screen.availHeight;
};
com.inq.utils.Capabilities.isChromed = function() {
  var clientWin = window.top;
  var isPortrait = com.inq.utils.Capabilities.getOrientation();
  return clientWin.innerHeight === com.inq.utils.Capabilities.getAvailHeight() ? true : false;
};
com.inq.utils.Capabilities.getZoom = function() {
  try {
    var vp = com.inq.utils.Capabilities.getViewport();
    var rw = Std.parseInt(window.parent.screen.width);
    var z = Math.round(100 * (rw / vp.w)) / 100;
    return z;
  } catch (err) {
    return 1;
  }
};
com.inq.utils.Capabilities.getLowerRightCorner = function() {
  if (window.top.pageYOffset == 0) {
    window.top.scrollBy(0, 1);
  }
  com.inq.utils.Capabilities.initZoomDetection();
  var x = com.inq.utils.Capabilities.viewportDetector.offsetLeft - com.inq.utils.Capabilities.viewportDetector.parentNode.scrollLeft;
  var y = com.inq.utils.Capabilities.viewportDetector.offsetTop - com.inq.utils.Capabilities.viewportDetector.parentNode.scrollTop;
  x = x + 1;
  y = y + 1;
  if (com.inq.utils.Capabilities.isTablet()) {
    if (com.inq.utils.Capabilities.viewportDetector.offsetTop + 1 === window.parent.innerHeight) {
      y = window.parent.innerHeight;
    }
    if (com.inq.utils.Capabilities.viewportDetector.offsetLeft + 1 === window.parent.innerWidth) {
      x = window.parent.innerWidth;
    }
  }
  return new com.inq.utils.Point(x, y);
};
com.inq.utils.Capabilities.initZoomDetection = function() {
  try {
    if (!com.inq.utils.Capabilities.viewportDetectorInitialized) {
      var pix = window.parent.document.createElement("DIV");
      pix.style.position = "fixed";
      pix.style.height = "1px";
      pix.style.width = "1px";
      pix.style.right = "0px";
      pix.style.bottom = "0px";
      com.inq.utils.Capabilities.viewportDetector = pix;
      window.parent.document.body.appendChild(com.inq.utils.Capabilities.viewportDetector);
      com.inq.utils.Capabilities.viewportDetectorInitialized = true;
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace(e, {fileName:"Capabilities.hx", lineNumber:387, className:"com.inq.utils.Capabilities", methodName:"initZoomDetection"});
    } else {
      throw e;
    }
  }
};
com.inq.utils.Capabilities.waitFor = function(test, interval, cb, max, ripples) {
  if (ripples == null) {
    ripples = 1;
  }
  var count = 0;
  var token = window.setInterval(function() {
    haxe.Log.trace("interval[count: " + count + ", max: " + max + ", ripples: " + ripples + "]", {fileName:"Capabilities.hx", lineNumber:402, className:"com.inq.utils.Capabilities", methodName:"waitFor"});
    if (max != null && ++count > max) {
      window.clearInterval(token);
    } else {
      if (test()) {
        if (--ripples <= 0) {
          window.clearInterval(token);
        }
        count = 0;
        cb();
      }
    }
  }, interval);
  return token;
};
com.inq.utils.Capabilities.setDomSafeTimeout = function(f, t) {
  var random = (Math.random() + "").substring(2);
  var type = "domsafe" + random;
  var h = function() {
    com.inq.utils.Capabilities.UnbindListener(window, type, h);
    f();
  };
  com.inq.utils.Capabilities.BindListener(window, type, h);
  var token = window.setTimeout(function() {
    window.dispatchEvent(new Event(type));
  }, t);
  return {clear:function() {
    window.clearTimeout(token);
    com.inq.utils.Capabilities.UnbindListener(window, type, h);
  }};
};
com.inq.utils.Capabilities.viewportStopsMoving = function(time) {
  var vp = com.inq.utils.Capabilities.getViewport();
  var t = (new Date).getTime();
  return function() {
    var now = (new Date).getTime();
    var dt = now - t;
    var newVp = com.inq.utils.Capabilities.getViewport();
    var eq = vp.equals(newVp);
    haxe.Log.trace("viewportStopsMoving[dt: " + dt + ", time: " + time + "]", {fileName:"Capabilities.hx", lineNumber:434, className:"com.inq.utils.Capabilities", methodName:"viewportStopsMoving"});
    if (eq) {
      haxe.Log.trace("viewport has remained the same for " + dt + "ms.", {fileName:"Capabilities.hx", lineNumber:436, className:"com.inq.utils.Capabilities", methodName:"viewportStopsMoving"});
      if (dt > time) {
        t = now;
        return true;
      } else {
        return false;
      }
    } else {
      haxe.Log.trace("viewport has changed.", {fileName:"Capabilities.hx", lineNumber:446, className:"com.inq.utils.Capabilities", methodName:"viewportStopsMoving"});
      t = now;
      vp = newVp;
      return false;
    }
  };
};
com.inq.utils.Capabilities.prototype.__class__ = com.inq.utils.Capabilities;
com.inq.utils.Capabilities.patternTable = ["[\\s]*Mozilla[/ ][0-9a-zA-Z.]*\\s[(][^;]*;[^;]*;\\s*America Online[^;]*;[^;]*;([^;\\)]*).*", "[\\s]*Mozilla[/ ][0-9a-zA-Z.]*\\s[(][^;]*;[^;]*;\\s*AOL[^;]*;([^;\\)]*).*", "[\\s]*Opera[/ ][0-9a-zA-Z.]*\\s[(]Macintosh;([^;\\)]*).*", "[\\s]*Opera[/ ][0-9a-zA-Z.]*\\s[(]X11;([^;\\)]*).*", "[\\s]*Opera[/ ][0-9a-zA-Z.]*\\s[(]([^;\\)]*).*", "[\\s]*Mozilla[/ ][0-9a-zA-Z.]*\\s[(]([^;]*);[^;]*;[\\s]Trident[^;)]*.*", "[\\s]*Mozilla[/ ][0-9a-zA-Z.]*\\s[(][^;]*;[ U;]*;[ ]([^;\\)]*).*", 
"[\\s]*Mozilla[/ ][0-9a-zA-Z.]*\\s[(]compatible; MSIE \\d*.\\d*;\\s*([^;\\)]*).*", "[\\s]*\\w+[/ ][0-9a-zA-Z.]*\\s[(]\\w+;\\s*([^;\\)]*).*", "[\\s]*Mozilla[/ ][0-9a-zA-Z.]*\\s[(]([^;\\)]*).*"];
com.inq.utils.Capabilities._init = com.inq.utils.Capabilities.init();
com.inq.utils.Capabilities.playerType = "Native Javascript";
com.inq.utils.Capabilities.manufacturer = "Inq";
com.inq.utils.Capabilities.version = "JS 1.0.0.0";
com.inq.utils.Capabilities.deviceType = null;
com.inq.utils.Capabilities.mobile = null;
com.inq.utils.Capabilities.webKit = null;
com.inq.utils.Capabilities.viewportDetectorInitialized = false;
com.inq.utils.Capabilities._isVersionPrior8 = null;
com.inq.utils.Capabilities._isVersion8 = null;
com.inq.utils.Capabilities._isVersion9 = null;
com.inq.utils.Capabilities._isCriOS8 = null;
com.inq.utils.Capabilities._isCriOS = null;
com.inq.utils.Capabilities._isSafari = null;
com.inq.utils.Capabilities._isIOSWebView = null;
com.inq.utils.Capabilities._isAndroidWebView = null;
com.inq.utils.Point = function(x, y) {
  this.x = x;
  this.y = y;
};
$hxClasses["com.inq.utils.Point"] = com.inq.utils.Point;
com.inq.utils.Point.__name__ = ["com", "inq", "utils", "Point"];
com.inq.utils.Point.prototype.copy = function() {
  return new com.inq.utils.Point(this.x, this.y);
};
com.inq.utils.Point.prototype.toString = function() {
  return "Point[x: " + this.x + ", y: " + this.y + "]";
};
com.inq.utils.Point.prototype.diff = function(p) {
  var x = p.x - this.x;
  var y = p.y - this.y;
  return new com.inq.utils.Point(x, y);
};
com.inq.utils.Point.prototype.equals = function(p) {
  return p.x == this.x && p.y == this.y;
};
com.inq.utils.Point.prototype.moveTo = function(x, y) {
  this.x += x;
  this.y += y;
  return this;
};
com.inq.utils.Point.prototype.move = function(dx, dy) {
  this.x += dx;
  this.y += dy;
  return this;
};
com.inq.utils.Point.prototype.moveInto = function(area) {
  this.x = this.forceRange(this.x, area.x, area.x + area.w);
  this.y = this.forceRange(this.y, area.y, area.y + area.h);
};
com.inq.utils.Point.prototype.forceRange = function(x, min, max) {
  var r = x;
  if (r > max) {
    r = max;
  }
  if (r < min) {
    r = min;
  }
  return r;
};
com.inq.utils.Point.prototype.y = null;
com.inq.utils.Point.prototype.x = null;
com.inq.utils.Point.prototype.__class__ = com.inq.utils.Point;
com.inq.utils.Area = function(x, y, w, h) {
  com.inq.utils.Point.call(this, x, y);
  this.w = w;
  this.h = h;
};
$hxClasses.extend(com.inq.utils.Point, com.inq.utils.Area, "com.inq.utils.Area");
com.inq.utils.Area.prototype.toString = function() {
  return "Area[x: " + this.x + ", y: " + this.y + ", w: " + this.w + ", h: " + this.h + "]";
};
com.inq.utils.Area.prototype.equals = function(area) {
  return this.x == area.x && this.y == area.y && this.w == area.w && this.h == area.h;
};
com.inq.utils.Area.prototype.scale = function(zoom) {
  this.w = Math.round(this.w * zoom);
  this.h = Math.round(this.h * zoom);
  return this;
};
com.inq.utils.Area.prototype.resize = function(dw, dh) {
  this.w += dw;
  this.h += dh;
  return this;
};
com.inq.utils.Area.prototype.moveInto = function(area) {
  this.x = this.forceRange(this.x, area.x, area.x + area.w - this.w);
  this.y = this.forceRange(this.y, area.y, area.y + area.h - this.h);
};
com.inq.utils.Area.prototype.copy = function() {
  return new com.inq.utils.Area(this.x, this.y, this.w, this.h);
};
com.inq.utils.Area.prototype.h = null;
com.inq.utils.Area.prototype.w = null;
Application = function() {
  com.inq.ui.SkinLoader.call(this);
  this.applicationController = null;
  this.area = new com.inq.utils.Area(0, 0, 0, 0);
  this.initialized = false;
  this.url = js.Lib.document.getElementById("inqChatJs").src;
  var aPath = this.url.split("\\").join("/").split("/");
  aPath.pop();
  this.path = aPath.join("/");
  this.initializeParameters();
  this.screen = new com.inq.ui.Screen;
  this.stage = com.inq.ui.Stage.getInstance();
  this.titlebar = new com.inq.ui.Image("inqTitleBar");
  if (!this.panelWindow) {
    this.setPanelWindow(window);
  }
  var inqTitleBar = window.parent.document.getElementById("inqTitleBar");
  if (inqTitleBar == null) {
    inqTitleBar = window.parent.document.createElement("DIV");
    inqTitleBar.id = "inqTitleBar";
    inqTitleBar.style = "position: absolute; z-index: 9999999; height: 1px; width: 1px; left: 0px; top: 0px;";
    window.parent.document.body.appendChild(inqTitleBar);
  }
  inqTitleBar.style.height = com.inq.flash.client.control.FlashPeer.getTitleBarHeight() + "px";
  var clearImage = "";
  if (com.inq.flash.client.control.FlashPeer.getIsSkinLocal()) {
    clearImage = com.inq.flash.client.control.FlashPeer.getSkinPath() + "/" + com.inq.flash.client.control.FlashPeer.getSkinName() + "/clear.gif";
  } else {
    clearImage = this.getImagePath() + "clear.gif";
  }
  this["clearImage"] = clearImage;
  this.titlebar.setID("inqTitleBar");
  this.titlebar.initStyle("cursor", "move");
  this.titlebar.initStyle("borderThickness", "0");
  this.titlebar.initStyle("top", "0");
  this.titlebar.initStyle("left", "0");
  try {
    this.titlebar.initStyle("right", "" + com.inq.flash.client.control.FlashPeer.getPopupCloserWidth());
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      this.titlebar.initStyle("right", "52");
    } else {
      throw e;
    }
  }
  try {
    this.titlebar.initStyle("height", "" + com.inq.flash.client.control.FlashPeer.getTitleBarHeight());
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("ERROR: " + Std.string(e), {fileName:"Application.hx", lineNumber:103, className:"Application", methodName:"new"});
    } else {
      throw e;
    }
  }
  this.titlebar.setStyle("zIndex", Application.zIndexResize);
  var inputList = this.titlebar._div.getElementsByTagName("INPUT");
  if (inputList == null || inputList.length == 0) {
    this.titlebar._div.innerHTML = '<input type="image" src="' + clearImage + '" style="height: 100%; width: 100%;" alt="" tabindex="-1"/>';
  }
  if (window.parent.name == "_inqPersistentChat") {
    this.titlebar.setVisible(false);
    this.resizeCorner = null;
  } else {
    this.resizeCorner = buildResizeCorner(this.getImagePath());
    if (this.resizeCorner) {
    }
  }
  this.onApplicationControllerInitializedHandlers = new Array;
  this.setVisibleResizeCorner = function(bVisible) {
    if (this.resizeCorner !== null) {
      this.resizeCorner.setVisible(bVisible);
    }
  };
  this.moveResizeCorner2Stage = function(left, top, w, h) {
    if (this.resizeCorner !== null) {
      this.resizeCorner.move2Stage(left, top, w, h);
    }
  };
  function buildResizeCorner(imagePath) {
    var resizeCorner = null;
    if (!com.inq.utils.Capabilities.isPhone()) {
      resizeCorner = new com.inq.ui.Image("inqDivResizeCorner");
    }
    if (resizeCorner != null) {
      resizeCorner.setID("inqDivResizeCorner");
      resizeCorner.initStyle("cursor", "se-resize");
      resizeCorner.initStyle("borderThickness", "0");
      resizeCorner.initStyle("right", "0");
      resizeCorner.initStyle("bottom", "0");
      resizeCorner.initStyle("width", Application.dragArea.w);
      resizeCorner.initStyle("height", Application.dragArea.h);
      resizeCorner.setStyle("zIndex", Application.zIndexResize + 1);
      resizeCorner._div.setAttribute("alt", "");
      resizeCorner._div.setAttribute("aria-hidden", "true");
      resizeCorner._div.setAttribute("tabindex", "-1");
      var inputList1 = resizeCorner._div.getElementsByTagName("INPUT");
      if (inputList1 == null || inputList1.length == 0) {
        resizeCorner._div.innerHTML = '<input type="image" src="' + imagePath + 'ResizeCorner.gif" ' + 'style="position: absolute; top:0px; left:0px; height: 100%; width: 100%; bottom: 0px; right: 0px; display: block;" tabindex="-1"/>';
      }
      resizeCorner.setVisible = function(bVisible) {
        this._div.style.display = bVisible ? "block" : "none";
      };
      resizeCorner.move2Stage = function(left, top, w, h) {
        this._div.style.left = left + w - Application.dragArea.w + "px";
        this._div.style.top = top + h - Application.dragArea.h + "px";
        this._div.style.width = Application.dragArea.w + "px";
        this._div.style.height = Application.dragArea.h + "px";
        this._div.style.display = Application.resizable && Application.application.getVisible() ? "block" : "none";
        if (!Application.resizable) {
          this._div.style.visibility = "collapse";
        }
        this._div.style.zIndex = Application.zIndexResize + 1;
      };
    }
    return resizeCorner;
  }
};
$hxClasses["Application"] = Application;
Application.__name__ = ["Application"];
Application.__super__ = com.inq.ui.SkinLoader;
for (var k in com.inq.ui.SkinLoader.prototype) {
  Application.prototype[k] = com.inq.ui.SkinLoader.prototype[k];
}
Application.mxml = null;
Application.containsOutside = null;
Application.me = null;
Application.ScrollStage = function(relLeft, relTop) {
  var w, h, l, t;
  var iframe = Application.IsPersistent() && com.inq.utils.Capabilities.isIpad() ? Application.application._div : js.Lib.window.frameElement;
  w = Std.parseInt(iframe.style.width);
  h = Std.parseInt(iframe.style.height);
  l = Std.parseInt(iframe.style.left) + relLeft;
  t = Std.parseInt(iframe.style.top) + relTop;
  l = Application.FixAbsoluteX(l, w);
  t = Application.FixAbsoluteY(t, h);
  iframe.style.left = l + "px";
  iframe.style.top = t + "px";
  Application.MoveSizeDiv2Stage(w, h, l, t);
};
Application.ScrollStageRelPage = function(left, top) {
  var iframe = js.Lib.window.frameElement;
  var w = Std.parseInt(iframe.style.width);
  var h = Std.parseInt(iframe.style.height);
  iframe.style.left = left + "px";
  iframe.style.top = top + "px";
  Application.MoveSizeDiv2Stage(w, h, left, top);
};
Application.ScrollStageInPage = function(relLeft, relTop) {
  var iframe = js.Lib.window.frameElement;
  var w = Std.parseInt(iframe.style.width);
  var h = Std.parseInt(iframe.style.height);
  var l = Std.parseInt(iframe.style.left) + relLeft;
  var t = Std.parseInt(iframe.style.top) + relTop;
  var ow = Std.parseInt(window.parent.document.documentElement.offsetWidth);
  var oh = Math.max(Std.parseInt(window.parent.document.documentElement.offsetHeight), window.parent.document.body.clientHeight);
  var st = com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop();
  var sl = com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft();
  var vp = com.inq.utils.Capabilities.getViewport();
  var docMaxLeft = ow - w;
  var winMaxLeft = ow - sl + vp.w;
  var docMaxTop = oh - h;
  var winMaxTop = oh - st + vp.h;
  var maxLeft = docMaxLeft > winMaxLeft ? docMaxLeft : winMaxLeft;
  var maxTop = docMaxTop > winMaxTop ? docMaxTop : winMaxTop;
  l = l < 0 ? 0 : l;
  l = l > maxLeft ? maxLeft : l;
  t = t < 0 ? 0 : t;
  t = t > maxTop ? maxTop : t;
  iframe.style.left = l + "px";
  iframe.style.top = t + "px";
  Application.MoveSizeDiv2Stage(w, h, l, t);
};
Application.MoveSizeDiv2Stage = function(w, h, left, top) {
  if (w == null) {
    w = com.inq.flash.client.control.PersistenceManager.GetValue("w", 400);
    if (w == null) {
      w = Application.application.area.w;
    }
  }
  if (w < Application.minWidth) {
    w = Application.minWidth;
  }
  if (h == null) {
    h = com.inq.flash.client.control.PersistenceManager.GetValue("h", 300);
    if (h == null) {
      h = Application.application.area.h;
    }
  }
  if (h < Application.minHeight) {
    h = Application.minHeight;
  }
  if (top == null) {
    top = Application.application.area.y;
  }
  if (left == null) {
    left = Application.application.area.x;
  }
  Application.application.area = new com.inq.utils.Area(left, top, w, h);
  Application.application.setWidth(Application.application.area.w);
  Application.application.setHeight(Application.application.area.h);
  if (Application.application._div != null && Application.application._div.ownerDocument != null && Application.application._div.ownerDocument != window.document) {
    Application.application._div.style.left = left + "px";
    Application.application._div.style.top = top + "px";
    if (com.inq.flash.client.control.FlashPeer.getIsBuilder()) {
      Application.application._div.style.zIndex = Application.zIndexResize - 1;
    } else {
      Application.application._div.style.zIndex = Application.zIndexResize;
    }
    Application.application.initStyle("top", "" + top);
    Application.application.initStyle("left", "" + left);
    Application.application.initStyle("width", "" + w);
    Application.application.initStyle("height", "" + h);
    Application.application.initStyle("overflow", "hidden");
    if (com.inq.flash.client.control.FlashPeer.getIsBuilder()) {
      Application.application.initStyle("z-index", "" + (Application.zIndexResize - 1));
    } else {
      Application.application.initStyle("z-index", "" + Application.zIndexResize);
    }
  }
  var clientDoc = parent.document;
  var inqTitleBar = clientDoc.getElementById("inqTitleBar");
  if (inqTitleBar) {
    inqTitleBar.style.left = left + "px";
    inqTitleBar.style.top = top + "px";
    var rightOffset = Application.application.titlebar.getStyle("right");
    inqTitleBar.style.width = w - rightOffset + "px";
    if (!Application.draggable) {
      inqTitleBar.style.visibility = "collapse";
    }
    inqTitleBar.style.zIndex = Application.zIndexResize;
    try {
      var inqTitleBarInput = inqTitleBar.getElementsByTagName("input")[0];
      if (inqTitleBarInput != null) {
        inqTitleBarInput.style.width = w - rightOffset + "px";
      }
    } catch (e) {
      haxe.Log.trace("ERROR: resizing input element in title bar: " + Std.string(e), {fileName:"Application.hx", lineNumber:379, className:"Application", methodName:"MoveSizeDiv2Stage"});
    }
  }
  Application.application.moveResizeCorner2Stage(left, top, w, h);
};
Application.FixAbsoluteX = function(x, w) {
  var l, scrollLeft = com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft();
  l = x - scrollLeft;
  return Application.FixX(l, w) + scrollLeft;
};
Application.FixAbsoluteY = function(y, h) {
  var t, scrollTop;
  t = y - (scrollTop = com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop());
  return Application.FixY(t, h) + scrollTop;
};
Application.FixX = function(x, w) {
  var left = x < 0 ? 0 : x;
  var right = left + w;
  var xMax = com.inq.flash.client.chatskins.ScrollMonitor.getScrollWidth();
  if (right > xMax && left != 0) {
    left = xMax - w;
  }
  if (left < 0) {
    left = 0;
  }
  return left;
};
Application.FixY = function(y, h) {
  var top = y < 0 ? 0 : y;
  var bottom = top + h;
  var scrollHeight = com.inq.flash.client.chatskins.ScrollMonitor.getScrollHeight();
  var yMax = scrollHeight - h;
  if (top > yMax && top != 0) {
    top = yMax;
  }
  if (top < 0) {
    top = 0;
  }
  return top;
};
Application.SetArea = function(area) {
  if (com.inq.utils.Capabilities.isPhone()) {
    Application.application._div.style.top = "0px";
    Application.application._div.style.left = "0px";
    Application.ResizeStage(area.w, area.h);
  } else {
    Application.ResizeStage(area.w, area.h);
    Application.MoveStage(area.x, area.y);
  }
};
Application.IsPersistent = function() {
  return Application.isPersistent;
};
Application.GetArea = function() {
  return Application.application.area.copy();
};
Application.MoveStage = function(newLeft, newTop) {
  var iframe = js.Lib.window.frameElement;
  var w = Std.parseInt(iframe.style.width);
  var h = Std.parseInt(iframe.style.height);
  newLeft -= com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft();
  newTop -= com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop();
  var adjustedLeft = Application.FixX(newLeft, w);
  var adjustedTop = Application.FixY(newTop, h);
  var relLeft = adjustedLeft - newLeft;
  var relTop = adjustedTop - newTop;
  var oLeftTop = {};
  oLeftTop["l"] = adjustedLeft;
  oLeftTop["t"] = adjustedTop;
  com.inq.flash.client.control.PersistenceManager.SetValues(oLeftTop);
  Application.ScrollStage(relLeft, relTop);
};
Application.getMinWidth = function() {
  return Application.minWidth;
};
Application.getMinHeight = function() {
  return Application.minHeight;
};
Application.ResizeStage = function(newWidth, newHeight) {
  if (newWidth < Application.minWidth) {
    newWidth = Application.minWidth;
  }
  if (newHeight < Application.minHeight) {
    newHeight = Application.minHeight;
  }
  var stgElement = com.inq.ui.Stage.getStageElement();
  if (stgElement && !Application.isPersistent) {
    stgElement.style.height = Application.application.stg.style.height = Std.string(newHeight) + "px";
    stgElement.style.width = Application.application.stg.style.width = Std.string(newWidth) + "px";
    var oHeightWidth = {};
    oHeightWidth["h"] = newHeight;
    oHeightWidth["w"] = newWidth;
    com.inq.flash.client.control.PersistenceManager.SetValues(oHeightWidth);
    Application.MoveSizeDiv2Stage(newWidth, newHeight);
  } else {
    if (Application.isPersistent && null != window.parent.opener) {
      if (newWidth < Application.minWidth) {
        newWidth = Application.minWidth;
      }
      if (newHeight < Application.minHeight) {
        newHeight = Application.minHeight;
      }
      var deltaWidth = newWidth - com.inq.ui.Stage.getterStageWidth();
      var deltaHeight = newHeight - com.inq.ui.Stage.getterStageHeight();
      var win = window.parent;
      if (deltaWidth != 0 || deltaHeight != 0) {
        try {
          win.resizeBy(deltaWidth, deltaHeight);
        } catch (e) {
        }
      }
      Application.application.setWidth(Application.application.area.w = newWidth);
      Application.application.setHeight(Application.application.area.h = newHeight);
    }
  }
  Application.Resize();
};
Application.Resize = function() {
  if (null != Application.application) {
    Application.application.resize();
  }
};
Application.doClick = function(e) {
  return false;
};
Application._initTrace = function() {
  haxe.Log.trace = com.inq.utils.ConsoleLogger.trace;
  return true;
};
Application.main = function() {
  if (Application.hasRun) {
    Application.hasRun = false;
    Application._initTrace();
    Application.application = null;
  }
  Application.application = new Application;
  Application.application._init();
  Application._initTrace();
  if (!com.inq.utils.Capabilities.isPhone()) {
    try {
      com.inq.stage.Move.setDragable();
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
      } else {
        throw e;
      }
    }
    try {
      com.inq.stage.Resize.setResizable();
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
      } else {
        throw e;
      }
    }
  }
};
Application.getInitialized = function() {
  if (Application.application != null) {
    return Application.application.initialized;
  }
  return false;
};
Application.launchWhenReady = null;
Application.getLaunchWhenReady = function() {
  return window[Application.lWR];
};
Application.setLaunchWhenReady = function(val) {
  window[Application.lWR] = val;
  return val;
};
Application.resizePersistentFrame = function() {
  var frm = window.frameElement;
  if (com.inq.utils.Capabilities.isMobile()) {
    var vp = com.inq.utils.Capabilities.getViewport();
    Application.SetArea(vp);
  } else {
    if (Application.resizable) {
      if (Application.popoutStageWidth == -1 && Application.popoutStageHeight == -1) {
        Application.ResizeStage(Application.popoutStageWidth = frm.clientWidth, Application.popoutStageHeight = frm.clientHeight);
      } else {
        var curWidth = frm.clientWidth;
        var curHeight = frm.clientHeight;
        if (curHeight == Application.popoutStageHeight && curWidth == Application.popoutStageWidth) {
          return;
        }
        if (curWidth < Application.minWidth) {
          curWidth = Application.minWidth;
        }
        if (curHeight < Application.minHeight) {
          curHeight = Application.minHeight;
        }
        var xDelta = curWidth - frm.clientWidth;
        var yDelta = curHeight - frm.clientHeight;
        if (xDelta != 0 || yDelta != 0) {
          window.parent.resizeBy(xDelta, yDelta);
        }
        Application.ResizeStage(Application.popoutStageWidth = curWidth, Application.popoutStageHeight = curHeight);
      }
    } else {
      if (Application.popoutStageWidth == -1 && Application.popoutStageHeight == -1) {
        Application.ResizeStage(Application.popoutStageWidth = frm.clientWidth, Application.popoutStageHeight = frm.clientHeight);
      } else {
        var xDelta = Application.popoutStageWidth - frm.clientWidth;
        var yDelta = Application.popoutStageHeight - frm.clientHeight;
        window.parent.resizeBy(xDelta, yDelta);
      }
    }
  }
};
Application.Run = function() {
  if (Application.hasRun) {
    return;
  }
  Application.hasRun = true;
  Application.application.run();
};
Application.keySet = function() {
  var keys = new Array;
  var keyz = Reflect.fields(Application.application);
  var _g1 = 0, _g = keyz.length;
  while (_g1 < _g) {
    var s = _g1++;
    var keyname = keyz[s];
    var item = Application.application[keyname];
    if (item != null) {
      try {
        if (js.Boot.__instanceof(item, com.inq.ui.Container)) {
          keys.push(keyname);
        }
      } catch (e) {
        haxe.Log.trace("key value: " + keyname + " threw " + Std.string(e), {fileName:"Application.hx", lineNumber:1099, className:"Application", methodName:"keySet"});
      }
    } else {
      haxe.Log.trace("key value: " + keyname + " returns null", {fileName:"Application.hx", lineNumber:1103, className:"Application", methodName:"keySet"});
    }
  }
  return keys;
};
Application.getContainer = function(keyName) {
  var container = Application.application[keyName];
  if (container == null) {
    return container;
  }
  if (js.Boot.__instanceof(container, com.inq.ui.Container)) {
    return container;
  }
  return null;
};
Application.prototype.customerEndsCobrowse = function() {
  com.inq.flash.client.chatskins.SkinControl.endCobrowse();
};
Application.prototype.updateXFrameFromBizRule = function(layerID, url, channelID) {
  var thisApplicationController = this.applicationController;
  this.whenApplicationControllerInitialized(function() {
    thisApplicationController.updateXFrameFromBizRule(layerID, url, channelID);
  });
};
Application.prototype.showAutomaton = function(layerId, url, businessUnitId, initiator) {
  var thisApplicationController = this.applicationController;
  this.whenApplicationControllerInitialized(function() {
    thisApplicationController.showAutomaton(layerId, url, businessUnitId, initiator);
  });
};
Application.prototype.sendDTEvent = function(eventName, data) {
  if (this.applicationController != null) {
    this.applicationController.sendDTEvent(eventName, data);
  }
};
Application.prototype.setVisible = function(value) {
  com.inq.ui.SkinLoader.prototype.setVisible.call(this, value);
  com.inq.ui.Stage.getInstance().setVisible(value);
  this.setVisibleResizeCorner(value);
  this.titlebar.setVisible(value);
};
Application.prototype.getVisible = function() {
  if (this._visible) {
    if (com.inq.ui.SkinLoader.skinInClient) {
      if ("none" == com.inq.ui.Container.getElementById("chatWindow").style.display || "none" == com.inq.ui.Container.getElementById("Skin").style.display) {
        this.setVisible(false);
      }
    } else {
      if ("none" == window.frameElement.style.display.toLowerCase()) {
        this.setVisible(false);
      }
    }
  }
  return this._visible;
};
Application.prototype.whenApplicationControllerInitialized = function(handler) {
  if (this.applicationController == null) {
    this.onApplicationControllerInitializedHandlers.push(handler);
  } else {
    handler();
  }
};
Application.prototype.applyStyle = function() {
  com.inq.ui.SkinLoader.prototype.applyStyle.call(this);
  if (com.inq.utils.Capabilities.isPhone()) {
    this._div.style.position = "fixed";
    this._div.style.top = "0px";
    this._div.style.left = "0px";
    this._div.style.width = "";
    this._div.style.right = "0px";
    this._div.style.bottom = "0px";
    this._div.style.height = "";
    if (com.inq.utils.Capabilities.isWindowsPhone()) {
      this._div.style.position = "absolute";
      this._div.style.left = com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft() + "px";
      this._div.style.top = com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop() + "px";
      this._div.style.width = Application.application.area.w + "px";
      this._div.style.height = Application.application.area.h + "px";
    } else {
      if (!com.inq.utils.Capabilities.isAndroid() && com.inq.flash.client.chatskins.ChatTextFocusMonitor.HasFocus()) {
        this._div.style.bottom = "";
        this._div.style.height = "" + Application.application.area.h + "px";
        if (com.inq.utils.Capabilities.isIphone() && (com.inq.utils.Capabilities.isSafariVersion8() || com.inq.utils.Capabilities.isSafariVersion9() || com.inq.utils.Capabilities.isChromeiOS8() || com.inq.utils.Capabilities.isSafariVersionPrior8() || com.inq.utils.Capabilities.isIOSWebView())) {
          this._div.style.position = "absolute";
          this._div.style.top = com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop() + Application.clientBodyMarginTop + "px";
          this._div.style.left = Application.application.area.x + "px";
          if (com.inq.utils.Capabilities.isSafariVersion8() || com.inq.utils.Capabilities.isSafariVersion9()) {
            this._div.style.right = "";
            this._div.style.width = "" + Application.application.area.w + "px";
          }
        }
      } else {
        if (this._div.clientHeight < Application.application.area.h) {
          this._div.style.bottom = "";
          this._div.style.height = "" + Application.application.area.h + "px";
        } else {
          if (com.inq.utils.Capabilities.isIphone() && (com.inq.utils.Capabilities.isChromeiOS8() || com.inq.utils.Capabilities.isSafariVersion8() || com.inq.utils.Capabilities.isSafariVersion9())) {
            var clientWin = window.top;
            if (clientWin.scrollY != 0 || clientWin.scrollX != 0) {
              clientWin.scrollTo(0, 0);
            }
            this._div.style.bottom = "";
            this._div.style.height = "" + Application.application.area.h + "px";
            this._div.style.right = "";
            this._div.style.width = "" + Application.application.area.w + "px";
            this._div.style.position = "absolute";
            this._div.style.top = Application.clientBodyMarginTop + "px";
            this._div.style.left = 0 + "px";
          } else {
            if (com.inq.utils.Capabilities.isAndroid() && com.inq.utils.Capabilities.getChromeVersion() >= 40) {
              this._div.style.bottom = "";
              this._div.style.right = "";
              this._div.style.height = "" + Application.application.area.h + "px";
              this._div.style.width = "" + Application.application.area.w + "px";
            } else {
              haxe.Log.trace("WARNING: Applying NO width & height to Application!", {fileName:"Application.js", lineNumber:1033, className:"Application", methodName:"applyStyle"});
            }
          }
        }
      }
    }
  }
};
Application.prototype.run = function() {
  com.inq.flash.client.control.PersistenceManager.reopen();
  Application.setLaunchWhenReady(true);
  Application.minWidth = com.inq.utils.Util.getConfig("minWidth", 250);
  Application.minHeight = com.inq.utils.Util.getConfig("minHeight", 150);
  Application.resizable = com.inq.utils.Util.getConfig("resizable", true);
  Application.draggable = com.inq.utils.Util.getConfig("draggable", true);
  var tooltipResize = com.inq.utils.Util.getConfig("tooltipResize", "");
  var tooltipDrag = com.inq.utils.Util.getConfig("tooltipDrag", "");
  var isPersistent = window.parent.name == "_inqPersistentChat";
  var isDivChat = com.inq.utils.Util.getConfig("divSkin", false);
  if ((com.inq.utils.Capabilities.isMobile() || isDivChat) && !isPersistent) {
    isDivChat = true;
  }
  var overwriteLang = com.inq.utils.Util.getConfig("overwriteLang", null);
  var inheritDefaultLang = com.inq.utils.Util.getConfig("inheritDefaultLang", null);
  setLangAttribute("Skin");
  setLangAttribute("Minimized");
  setLangAttribute("btnThankYou");
  var clientLang = window.parent.document.body.parentNode.lang;
  clientLang = com.inq.utils.Util.getConfig("ariaLang", clientLang ? clientLang : "en");
  if (isPersistent) {
    window.parent.document.body.parentNode.lang = overwriteLang != null ? overwriteLang : clientLang;
  } else {
    if (!isDivChat) {
      window.document.body.parentNode.lang = overwriteLang != null ? overwriteLang : clientLang;
    }
  }
  if (this.resizeCorner && this.resizeCorner._div) {
    this.resizeCorner._div.getElementsByTagName("INPUT")[0].title = tooltipResize;
  }
  var titlebarDivs = this.titlebar._div.getElementsByTagName("INPUT");
  if (titlebarDivs.length > 0) {
    this.titlebar._div.getElementsByTagName("INPUT")[0].title = tooltipDrag;
  }
  if (!com.inq.utils.Capabilities.isPhone()) {
    try {
      com.inq.stage.Move.setDragable();
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
      } else {
        throw e;
      }
    }
    try {
      com.inq.stage.Resize.setResizable();
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
      } else {
        throw e;
      }
    }
  }
  Application.application.setInitialSize();
  var isNewApplicationControllerCreated = null == this.applicationController;
  if (isNewApplicationControllerCreated) {
    this.applicationController = new com.inq.flash.client.control.ApplicationController;
  }
  com.inq.flash.client.chatskins.SkinControl.setApplicationController(this.applicationController);
  com.inq.flash.client.chatskins.SkinControl.bInitialized = false;
  try {
    com.inq.flash.client.chatskins.SkinControl.InitializeGlue();
    if (com.inq.utils.Capabilities.isPhone()) {
      try {
      } catch (e) {
        if (js.Boot.__instanceof(e, Error)) {
        } else {
          throw e;
        }
      }
    }
  } catch (e) {
    haxe.Log.trace("ERROR: In InitializeGlue: " + Std.string(e), {fileName:"Application.hx", lineNumber:999, className:"Application", methodName:"run"});
  }
  this.applicationController.initializeAutomatonMode();
  if (isNewApplicationControllerCreated) {
    var _g = 0, _g1 = this.onApplicationControllerInitializedHandlers;
    while (_g < _g1.length) {
      var handler = _g1[_g];
      ++_g;
      handler();
    }
  }
  function setLangAttribute(objId) {
    var obj;
    try {
      obj = com.inq.ui.Container.getElementById(objId);
      if (objId.indexOf(com.inq.ui.Container.CLIENT_SPACE_PREFIX) != 0 && obj == null) {
        obj = com.inq.ui.Container.getElementById(com.inq.ui.Container.CLIENT_SPACE_PREFIX + objId);
      }
      if (obj != null) {
        if (overwriteLang != null) {
          obj.setAttribute("lang", overwriteLang);
        } else {
          if (inheritDefaultLang != null) {
            obj.setAttribute("lang", clientLang ? clientLang : inheritDefaultLang);
          }
        }
      }
    } catch (e) {
    }
  }
};
Application.prototype.setInitialSize = function() {
  var __height;
  var __width;
  var __win = js.Lib.window;
  var __winParent = window.parent;
  var vp = com.inq.utils.Capabilities.getViewport();
  var clientBody = __winParent.document.body;
  if (com.inq.utils.Capabilities.isPhone()) {
    com.inq.flash.client.chatskins.ScrollMonitor.ScrollToNearTop();
    __width = vp.w;
    __height = vp.h;
    if (clientBody.currentStyle || __winParent.getComputedStyle) {
      Application.clientBodyMarginTop = parseInt((clientBody.currentStyle || __winParent.getComputedStyle(clientBody)).marginTop, 10);
      if (Application.clientBodyMarginTop > 0) {
        Application.clientBodyMarginTop = -Application.clientBodyMarginTop;
      }
    }
  } else {
    __width = com.inq.flash.client.control.FlashPeer.getSkinWidth();
    __height = com.inq.flash.client.control.FlashPeer.getSkinHeight() + com.inq.flash.client.control.FlashPeer.getTitleBarHeight();
  }
  __width = com.inq.flash.client.control.PersistenceManager.GetValue("w", __width);
  __height = com.inq.flash.client.control.PersistenceManager.GetValue("h", __height);
  var iframe = js.Lib.window.frameElement;
  if (__winParent.name == "_inqPersistentChat") {
    Application.isPersistent = true;
    this.stg.style.height = "100%";
    this.stg.style.width = "100%";
    this.stg.style.left = "0px";
    this.stg.style.top = "0px";
    iframe.style.width = "100%";
    iframe.style.height = "100%";
    this.titlebar.setVisible(false);
    this.setVisibleResizeCorner(false);
    this.styles.width = this.stg.clientWidth;
    this.styles.height = this.stg.clientHeight;
    window.parent.document.body.style.cssText += ";overflow: hidden;overflow-Y:hidden;overflow-X:hidden;margin:0px;padding:0px";
    var el = window.document.all ? window.frameElement : window.parent;
    iframe._resizeTimer = -1;
    var resizeHandler = function() {
      var frm = window.frameElement;
      var newWidth = frm.clientWidth;
      var newHeight = frm.clientHeight;
      if (newWidth != frm._oldWidth || newHeight != frm._oldHeight) {
        if (frm._resizeTimer != -1) {
          window.clearTimeout(frm._resizeTimer);
        }
        frm._oldWidth = newWidth;
        frm._oldHeight = newHeight;
        frm._resizeTimer = window.setTimeout(function() {
          Application.resizePersistentFrame();
        }, 50);
      }
    };
    com.inq.utils.Capabilities.BindListener(el, "resize", resizeHandler);
    iframe._oldWidth = iframe.clientWidth;
    iframe._oldHeight = iframe.clientHeight;
    iframe._resizeTimer = window.setTimeout(function() {
      Application.resizePersistentFrame();
    }, 50);
    Application.ResizeStage(window.top.clientHeight, window.top.clientHeight);
    this.resize();
    return;
  } else {
    this.stg.style.height = __height + "px";
    this.stg.style.width = __width + "px";
    var mbHeight = com.inq.flash.client.control.FlashPeer.getTitleBarHeight();
    var position = Application.calcChatLocation(com.inq.flash.client.control.FlashPeer.getSkinWidth(), com.inq.flash.client.control.FlashPeer.getSkinHeight() + mbHeight, com.inq.flash.client.control.FlashPeer.getSkinLeft(), com.inq.flash.client.control.FlashPeer.getSkinTop(), com.inq.flash.client.control.FlashPeer.getSkinLocation());
    position.x = com.inq.flash.client.control.PersistenceManager.GetValue("l", position.x);
    position.y = com.inq.flash.client.control.PersistenceManager.GetValue("t", position.y);
    this.area.x = position.x = Application.FixAbsoluteX(position.x, __width);
    this.area.y = position.y = Application.FixAbsoluteY(position.y, __height);
    this.stg.style.left = position.x + "px";
    this.stg.style.top = position.y + "px";
    iframe.style.width = this.stg.style.width;
    iframe.style.height = this.stg.style.height;
    Application.MoveSizeDiv2Stage(__width, __height, position.x, position.y);
    Application.initialXPos = position.x - vp.x;
    Application.initialYPos = position.y - vp.y;
  }
  __height = Application.application.area.h;
  __width = Application.application.area.w;
  this.styles.height = "" + __height;
  this.styles.width = "" + __width;
  Application.ResizeStage(__width, __height);
};
Application.calcChatLocation = function(W, H, X, Y, location) {
  var scrollBarWidth = com.inq.utils.Util.isIE ? 0 : com.inq.flash.client.chatskins.ScrollMonitor.getScrollBarWidth();
  var left = 0, top = 0;
  var isRightScrollBar = Application.hasRightScrollBar();
  var isBottomScrollBar = Application.hasBottomScrollBar();
  if (js.Lib.window["opener"] != null) {
    return null;
  }
  var inq_scroll_width, inq_scroll_height;
  if (com.inq.utils.Util.isIE) {
    inq_scroll_height = window.parent.document.documentElement.clientHeight;
    inq_scroll_width = window.parent.document.documentElement.clientWidth;
  } else {
    inq_scroll_height = window.parent.innerHeight;
    inq_scroll_width = window.parent.innerWidth;
  }
  switch(location.toUpperCase()) {
    case "UPPER CENTER":
    ;
    case "UPPER_CENTER":
    ;
    case "TOP_CENTER":
      top = com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop();
      left = inq_scroll_width / 2 - W / 2 + com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft();
      break;
    case "UPPER_RIGHT":
    ;
    case "TOP_RIGHT":
      top = com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop();
      left = inq_scroll_width - W + com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft() - (isRightScrollBar ? scrollBarWidth : 0);
      break;
    case "UPPER_LEFT":
    ;
    case "TOP_LEFT":
      top = com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop();
      left = com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft();
      break;
    case "CENTER_LEFT":
      top = inq_scroll_height / 2 - H / 2 + com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop();
      left = com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft();
      break;
    case "CENTER_RIGHT":
      top = inq_scroll_height / 2 - H / 2 + com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop();
      left = inq_scroll_width - W + com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft() - (isRightScrollBar ? scrollBarWidth : 0);
      break;
    case "LOWER_LEFT":
    ;
    case "BOTTOM_LEFT":
      top = inq_scroll_height - H + com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop() - (isBottomScrollBar ? scrollBarWidth : 0);
      left = com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft();
      break;
    case "LOWER_CENTER":
    ;
    case "BOTTOM_CENTER":
      top = inq_scroll_height - H + com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop() - (isBottomScrollBar ? scrollBarWidth : 0);
      left = inq_scroll_width / 2 - W / 2 + com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft();
      break;
    case "LOWER_RIGHT":
    ;
    case "BOTTOM_RIGHT":
      left = inq_scroll_width - W + com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft() - (isRightScrollBar ? scrollBarWidth : 0);
      top = inq_scroll_height - H + com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop() - (isBottomScrollBar ? scrollBarWidth : 0);
      break;
    case "POP_UNDER_CENTER":
      left = inq_scroll_width / 2 - W / 2 + com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft();
      top = inq_scroll_height / 2 - H + com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop();
      break;
    case "ABSOLUTE":
      left = X;
      top = Y;
      break;
    case "RELATIVE":
      left = X + com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft();
      top = Y + com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop();
      break;
    case "CENTER":
      left = inq_scroll_width / 2 - W / 2 + com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft();
      top = inq_scroll_height / 2 - H / 2 + com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop();
      break;
  }
  if (left == null || left < 0) {
    left = 100;
  }
  if (null == top || top < 0) {
    top = 100;
  }
  return new com.inq.utils.Point(left | 0, top | 0);
};
Application.hasRightScrollBar = function() {
  var clientHeight = window.parent.document.documentElement.clientHeight;
  var clientWidth = window.parent.document.documentElement.clientWidth;
  var scrollHeight = window.parent.document.documentElement.scrollHeight;
  var innerWidth = window.parent.innerWidth;
  return clientHeight < scrollHeight || clientWidth < innerWidth;
};
Application.hasBottomScrollBar = function() {
  var clientWidth = window.parent.document.documentElement.clientWidth;
  var scrollWidth = window.parent.document.documentElement.scrollWidth;
  var clientHeight = window.parent.document.documentElement.clientHeight;
  var innerHeight = window.parent.innerHeight;
  return clientWidth < scrollWidth || clientHeight < innerHeight;
};
Application.prototype._draw = function(mxml) {
  com.inq.ui.SkinLoader.prototype._draw.call(this, mxml);
  this.applyStyle();
  if (Application.getLaunchWhenReady()) {
    Application.Run();
  }
};
Application.prototype.executeCode = function() {
  try {
    var onInit = com.inq.utils.Util.getConfig("onInit", null);
    if (onInit != null) {
      onInit();
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
};
Application.prototype.successSkinLoad = function(event) {
  var sMxml = com.inq.utils.StringUtil.htmlDecode(this.loaderSkin.data);
  this._draw(sMxml);
  this.run();
};
Application.prototype.failedSkinLoad = function(event) {
  haxe.Log.trace("Could not open script", {fileName:"Application.hx", lineNumber:687, className:"Application", methodName:"failedSkinLoad"});
  return;
};
Application.prototype._init = function() {
  var ix;
  var skin;
  var srptagsArray;
  var doc = js.Lib.document;
  com.inq.utils.Util.publish("com", window.com);
  com.inq.utils.Util.publish("Application", Application);
  com.inq.utils.Util.publish("Application.application", this);
  com.inq.utils.Util.publish("Application.application.setVisible", $bind(this, this.setVisible));
  com.inq.utils.Util.publish("Application.application.close", $bind(this, this.close));
  com.inq.utils.Util.publish("Application.application.restartTimer", $bind(this, this.restartTimer));
  com.inq.utils.Util.publish("Application.getInitialized", Application.getInitialized);
  com.inq.utils.Util.publish("Application.Run", Application.Run);
  com.inq.utils.Util.publish("Application.application.sendDTEvent", $bind(this, this.sendDTEvent));
  var Inq = js.Lib.window.Inq;
  com.inq.ui.Stage.getInstance().setVisible(false);
  if (js.Lib.window.frameElement) {
    var pDoc = window.frameElement.ownerDocument;
    this.stg = pDoc.getElementById("inqChatStage");
  }
  if (!com.inq.flash.client.control.FlashPeer.getIsSkinLocal()) {
    skin = com.inq.flash.client.control.FlashPeer.getSkin();
    skin = com.inq.flash.client.control.PersistenceManager.GetValue("skn", skin);
    if (skin.indexOf("\\") < 0 && skin.indexOf("/") < 0) {
      skin = com.inq.ui.SkinLoader.getSkinBase() + "/" + skin;
    }
  }
  this.addEventListener(com.inq.events.Event.COMPLETE, com.inq.flash.client.control.FlashPeer.onChatShown);
  this.drawSkin(skin);
  this.initialized = true;
};
Application.prototype.getImagePath = function() {
  if (com.inq.flash.client.control.FlashPeer.getIsSkinLocal()) {
    var imagePath = com.inq.flash.client.control.FlashPeer.getMediaPath();
    return imagePath;
  } else {
    if (this.imgpath) {
      return this.imgpath;
    }
    var skinFolderName = com.inq.flash.client.control.FlashPeer.getSkin().split("/").pop().split(".").shift();
    return this.imgpath = com.inq.flash.client.control.FlashPeer.getImagePath() + skinFolderName + "/";
  }
};
Application.prototype.resize = function() {
  com.inq.ui.SkinLoader.prototype.resize.call(this);
  this.resizer(Application.containsOutside);
  this.resizer(this.contains);
  com.inq.flash.client.chatskins.BalloonNotifier.Resize();
};
Application.prototype.initializeParameters = function() {
  this.parameters = new com.inq.utils.Dictionary;
  var flashvarsString = "";
  try {
    flashvarsString = com.inq.flash.client.control.FlashPeer.getFlashVars();
    var winName = window.parent.name;
    if (winName == "_inqPersistentChat" && flashvarsString.indexOf("PersistentFrame") == -1) {
      flashvarsString = "PersistentFrame=1&" + flashvarsString;
    }
    flashvarsString = flashvarsString.split("socket,").join("");
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("ERRORS:" + Std.string(e), {fileName:"Application.hx", lineNumber:240, className:"Application", methodName:"initializeParameters"});
    } else {
      throw e;
    }
  }
  var flashvars = flashvarsString.split("&");
  var _g = 0;
  while (_g < flashvars.length) {
    var fv = flashvars[_g];
    ++_g;
    var namekey = ("" + fv).split("=");
    this.parameters[namekey[0]] = namekey.length == 1 ? null : decodeURIComponent(namekey[1]);
  }
  com.inq.flash.client.control.FlashVars._init();
  com.inq.flash.client.chatskins.SndMgr._init();
};
Application.prototype.close = function() {
  window.onunload = function(ev) {
    return true;
  };
  com.inq.flash.client.chatskins.SndMgr.setMute(false);
  com.inq.flash.client.control.PersistenceManager.SetValue("m", 1, null, false);
  this.applicationController.disable();
  var div = this._div;
  if (div != null) {
    var parentnode = div.parentNode;
    if (parentnode != null) {
      try {
        parentnode.removeChild(div);
      } catch (e) {
        if (js.Boot.__instanceof(e, Error)) {
          haxe.Log.trace("ERROR REMOVING DIV:" + Std.string(e), {fileName:"Application.hx", lineNumber:206, className:"Application", methodName:"close"});
        } else {
          throw e;
        }
      }
      this._div = null;
    }
  }
  var inqTitleBar = window.parent.document.getElementById("inqTitleBar");
  var inqFrame = window.parent.document.getElementById("inqChatStage");
  if (inqFrame != null) {
    inqFrame.style.display = "none";
  }
  this.setVisibleResizeCorner(false);
  if (inqTitleBar != null) {
    inqTitleBar.style.display = "none";
  }
  com.inq.stage.ViewportMgr.close();
};
Application.prototype.getTextInput = function(keyId) {
  return this.getMxmlItem(keyId);
};
Application.keydownHandler = function(event) {
  if (com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getVisible() && event.keyCode == com.inq.ui.Keyboard.ESCAPE) {
    com.inq.flash.client.chatskins.EmailMgr.actionCancelEmail();
    return false;
  }
  if (event.keyCode == com.inq.ui.Keyboard.ESCAPE && com.inq.utils.Util.getConfig("escToClose", false)) {
    com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChat(null);
    return false;
  }
  if (event.keyCode == com.inq.ui.Keyboard.ESCAPE && com.inq.utils.Util.getConfig("escToCloseWhenNoChat", false) && com.inq.flash.client.chatskins.SkinControl.timerTimeout != null) {
    com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChat(null);
    return false;
  }
};
Application.prototype.getCanvas = function(keyId) {
  return this.getMxmlItem(keyId);
};
Application.prototype.getButton = function(keyId) {
  return this.getMxmlItem(keyId);
};
Application.prototype.getMxmlItem = function(keyId) {
  return this[keyId];
};
Application.prototype.setMxmlItem = function(container) {
  var keyId = container.getID();
  this[keyId] = container;
};
Application.prototype.getXFrameItems = function() {
  var items = [];
  for (var key in this) {
    var item = this[key];
    if (js.Boot.__instanceof(item, com.inq.ui.XFrame)) {
      items.push(item);
    }
  }
  return items;
};
Application.prototype.getClearImage = function() {
  return this["clearImage"];
};
Application.prototype.getPanelWindow = function() {
  return this.panelWindow;
};
Application.prototype.setPanelWindow = function(val) {
  this.panelWindow = val;
};
Application.prototype.restartTimer = function(timeout, actionOnTimeout) {
  com.inq.flash.client.chatskins.SkinControl.restartTimer(timeout, actionOnTimeout);
};
Application.prototype.loaderSkin = null;
Application.prototype.skinpath = null;
Application.prototype.imgpath = null;
Application.prototype.path = null;
Application.prototype.titlebar = null;
Application.prototype.stg = null;
Application.prototype.stage = null;
Application.prototype.screen = null;
Application.prototype.currentState = null;
Application.prototype.parameters = null;
Application.prototype.area = null;
Application.prototype.onApplicationControllerInitializedHandlers = null;
Application.prototype.applicationController = null;
Application.prototype.chatData = null;
Application.prototype.initialized = null;
Application.prototype.url = null;
Application.prototype.__class__ = Application;
Application.__initTrace = Application._initTrace();
Application.hasRun = false;
Application.isPersistent = false;
Application.clientBodyMarginTop = 0;
Application.application = null;
Application.resizable = true;
Application.draggable = true;
Application.minWidth = 250;
Application.minHeight = 150;
Application.dragArea = com.inq.utils.Capabilities.getDefaultResizeArea();
Application.zIndexResize = 9999999;
Application.lWR = "launchWhenReady";
Application.popoutStageWidth = -1;
Application.popoutStageHeight = -1;
com.inq.utils.Dictionary = function(weakKeys) {
};
$hxClasses["com.inq.utils.Dictionary"] = com.inq.utils.Dictionary;
com.inq.utils.Dictionary.__name__ = ["com", "inq", "utils", "Dictionary"];
com.inq.utils.Dictionary.prototype.__class__ = com.inq.utils.Dictionary;
EventDispatcher = function() {
  com.inq.utils.Dictionary.call(this);
};
$hxClasses["EventDispatcher"] = EventDispatcher;
EventDispatcher.__name__ = ["EventDispatcher"];
EventDispatcher.__super__ = com.inq.utils.Dictionary;
for (var k in com.inq.utils.Dictionary.prototype) {
  EventDispatcher.prototype[k] = com.inq.utils.Dictionary.prototype[k];
}
EventDispatcher.prototype.__class__ = EventDispatcher;
Hash = function() {
  this.h = {};
};
$hxClasses["Hash"] = Hash;
Hash.__name__ = ["Hash"];
Hash.prototype.toString = function() {
  var s = new StringBuf;
  s.b += Std.string("{");
  var it = this.keys();
  while (it.hasNext()) {
    var i = it.next();
    s.b += Std.string(i);
    s.b += Std.string(" => ");
    s.b += Std.string(Std.string(this.get(i)));
    if (it.hasNext()) {
      s.b += Std.string(", ");
    }
  }
  s.b += Std.string("}");
  return s.b;
};
Hash.prototype.iterator = function() {
  return {ref:this.h, it:this.keys(), hasNext:function() {
    return this.it.hasNext();
  }, next:function() {
    var i = this.it.next();
    return this.ref["$" + i];
  }};
};
Hash.prototype.keys = function() {
  var a = [];
  for (var key in this.h) {
    if (this.h.hasOwnProperty(key)) {
      a.push(key.substr(1));
    }
  }
  return HxOverrides.iter(a);
};
Hash.prototype.remove = function(key) {
  key = "$" + key;
  if (!this.h.hasOwnProperty(key)) {
    return false;
  }
  delete this.h[key];
  return true;
};
Hash.prototype.exists = function(key) {
  return this.h.hasOwnProperty("$" + key);
};
Hash.prototype.get = function(key) {
  return this.h["$" + key];
};
Hash.prototype.set = function(key, value) {
  this.h["$" + key] = value;
};
Hash.prototype.h = null;
Hash.prototype.__class__ = Hash;
HxOverrides = function() {
};
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.dateStr = function(date) {
  var m = date.getMonth() + 1;
  var d = date.getDate();
  var h = date.getHours();
  var mi = date.getMinutes();
  var s = date.getSeconds();
  return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
  switch(s.length) {
    case 8:
      var k = s.split(":");
      var d = new Date;
      d["setTime"](0);
      d["setUTCHours"](k[0]);
      d["setUTCMinutes"](k[1]);
      d["setUTCSeconds"](k[2]);
      return d;
    case 10:
      var k = s.split("-");
      return new Date(k[0], k[1] - 1, k[2], 0, 0, 0);
    case 19:
      var k = s.split(" ");
      var y = k[0].split("-");
      var t = k[1].split(":");
      return new Date(y[0], y[1] - 1, y[2], t[0], t[1], t[2]);
    default:
      throw "Invalid date format : " + s;;
  }
};
HxOverrides.cca = function(s, index) {
  var x = s.charCodeAt(index);
  if (x != x) {
    return undefined;
  }
  return x;
};
HxOverrides.substr = function(s, pos, len) {
  if (pos != null && pos != 0 && len != null && len < 0) {
    return "";
  }
  if (len == null) {
    len = s.length;
  }
  if (pos < 0) {
    pos = s.length + pos;
    if (pos < 0) {
      pos = 0;
    }
  } else {
    if (len < 0) {
      len = s.length + len - pos;
    }
  }
  return s.substr(pos, len);
};
HxOverrides.remove = function(a, obj) {
  var i = 0;
  var l = a.length;
  while (i < l) {
    if (a[i] == obj) {
      a.splice(i, 1);
      return true;
    }
    i++;
  }
  return false;
};
HxOverrides.iter = function(a) {
  return {cur:0, arr:a, hasNext:function() {
    return this.cur < this.arr.length;
  }, next:function() {
    return this.arr[this.cur++];
  }};
};
HxOverrides.prototype.__class__ = HxOverrides;
IntHash = function() {
  this.h = {};
};
$hxClasses["IntHash"] = IntHash;
IntHash.__name__ = ["IntHash"];
IntHash.prototype.toString = function() {
  var s = new StringBuf;
  s.b += Std.string("{");
  var it = this.keys();
  while (it.hasNext()) {
    var i = it.next();
    s.b += Std.string(i);
    s.b += Std.string(" => ");
    s.b += Std.string(Std.string(this.get(i)));
    if (it.hasNext()) {
      s.b += Std.string(", ");
    }
  }
  s.b += Std.string("}");
  return s.b;
};
IntHash.prototype.iterator = function() {
  return {ref:this.h, it:this.keys(), hasNext:function() {
    return this.it.hasNext();
  }, next:function() {
    var i = this.it.next();
    return this.ref[i];
  }};
};
IntHash.prototype.keys = function() {
  var a = [];
  for (var key in this.h) {
    if (this.h.hasOwnProperty(key)) {
      a.push(key | 0);
    }
  }
  return HxOverrides.iter(a);
};
IntHash.prototype.remove = function(key) {
  if (!this.h.hasOwnProperty(key)) {
    return false;
  }
  delete this.h[key];
  return true;
};
IntHash.prototype.exists = function(key) {
  return this.h.hasOwnProperty(key);
};
IntHash.prototype.get = function(key) {
  return this.h[key];
};
IntHash.prototype.set = function(key, value) {
  this.h[key] = value;
};
IntHash.prototype.h = null;
IntHash.prototype.__class__ = IntHash;
IntIter = function(min, max) {
  this.min = min;
  this.max = max;
};
$hxClasses["IntIter"] = IntIter;
IntIter.__name__ = ["IntIter"];
IntIter.prototype.next = function() {
  return this.min++;
};
IntIter.prototype.hasNext = function() {
  return this.min < this.max;
};
IntIter.prototype.max = null;
IntIter.prototype.min = null;
IntIter.prototype.__class__ = IntIter;
List = function() {
  this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype.map = function(f) {
  var b = new List;
  var l = this.h;
  while (l != null) {
    var v = l[0];
    l = l[1];
    b.add(f(v));
  }
  return b;
};
List.prototype.filter = function(f) {
  var l2 = new List;
  var l = this.h;
  while (l != null) {
    var v = l[0];
    l = l[1];
    if (f(v)) {
      l2.add(v);
    }
  }
  return l2;
};
List.prototype.join = function(sep) {
  var s = new StringBuf;
  var first = true;
  var l = this.h;
  while (l != null) {
    if (first) {
      first = false;
    } else {
      s.b += Std.string(sep);
    }
    s.b += Std.string(l[0]);
    l = l[1];
  }
  return s.b;
};
List.prototype.toString = function() {
  var s = new StringBuf;
  var first = true;
  var l = this.h;
  s.b += Std.string("{");
  while (l != null) {
    if (first) {
      first = false;
    } else {
      s.b += Std.string(", ");
    }
    s.b += Std.string(Std.string(l[0]));
    l = l[1];
  }
  s.b += Std.string("}");
  return s.b;
};
List.prototype.iterator = function() {
  return {h:this.h, hasNext:function() {
    return this.h != null;
  }, next:function() {
    if (this.h == null) {
      return null;
    }
    var x = this.h[0];
    this.h = this.h[1];
    return x;
  }};
};
List.prototype.remove = function(v) {
  var prev = null;
  var l = this.h;
  while (l != null) {
    if (l[0] == v) {
      if (prev == null) {
        this.h = l[1];
      } else {
        prev[1] = l[1];
      }
      if (this.q == l) {
        this.q = prev;
      }
      this.length--;
      return true;
    }
    prev = l;
    l = l[1];
  }
  return false;
};
List.prototype.clear = function() {
  this.h = null;
  this.q = null;
  this.length = 0;
};
List.prototype.isEmpty = function() {
  return this.h == null;
};
List.prototype.pop = function() {
  if (this.h == null) {
    return null;
  }
  var x = this.h[0];
  this.h = this.h[1];
  if (this.h == null) {
    this.q = null;
  }
  this.length--;
  return x;
};
List.prototype.last = function() {
  return this.q == null ? null : this.q[0];
};
List.prototype.first = function() {
  return this.h == null ? null : this.h[0];
};
List.prototype.push = function(item) {
  var x = [item, this.h];
  this.h = x;
  if (this.q == null) {
    this.q = x;
  }
  this.length++;
};
List.prototype.add = function(item) {
  var x = [item];
  if (this.h == null) {
    this.h = x;
  } else {
    this.q[1] = x;
  }
  this.q = x;
  this.length++;
};
List.prototype.length = null;
List.prototype.q = null;
List.prototype.h = null;
List.prototype.__class__ = List;
Reflect = function() {
};
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o, field) {
  return Object.prototype.hasOwnProperty.call(o, field);
};
Reflect.field = function(o, field) {
  var v = null;
  try {
    v = o[field];
  } catch (e) {
  }
  return v;
};
Reflect.setField = function(o, field, value) {
  o[field] = value;
};
Reflect.getProperty = function(o, field) {
  var tmp;
  return o == null ? null : o.__properties__ && (tmp = o.__properties__["get_" + field]) ? o[tmp]() : o[field];
};
Reflect.setProperty = function(o, field, value) {
  var tmp;
  if (o.__properties__ && (tmp = o.__properties__["set_" + field])) {
    o[tmp](value);
  } else {
    o[field] = value;
  }
};
Reflect.callMethod = function(o, func, args) {
  return func.apply(o, args);
};
Reflect.fields = function(o) {
  var a = [];
  if (o != null) {
    for (var f in o) {
      if (o.hasOwnProperty(f)) {
        a.push(f);
      }
    }
  }
  return a;
};
Reflect.isFunction = function(f) {
  return typeof f == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a, b) {
  return a == b ? 0 : a > b ? 1 : -1;
};
Reflect.compareMethods = function(f1, f2) {
  if (f1 == f2) {
    return true;
  }
  if (!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
    return false;
  }
  return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isObject = function(v) {
  if (v == null) {
    return false;
  }
  var t = typeof v;
  return t == "string" || t == "object" && !v.__enum__ || t == "function" && (v.__name__ || v.__ename__);
};
Reflect.deleteField = function(o, f) {
  if (!Reflect.hasField(o, f)) {
    return false;
  }
  delete o[f];
  return true;
};
Reflect.copy = function(o) {
  var o2 = {};
  var _g = 0, _g1 = Reflect.fields(o);
  while (_g < _g1.length) {
    var f = _g1[_g];
    ++_g;
    o2[f] = Reflect.field(o, f);
  }
  return o2;
};
Reflect.makeVarArgs = function(f) {
  return function() {
    var a = Array.prototype.slice.call(arguments);
    return f(a);
  };
};
Reflect.prototype.__class__ = Reflect;
StringBuf = function() {
  this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype.toString = function() {
  return this.b;
};
StringBuf.prototype.addSub = function(s, pos, len) {
  this.b += HxOverrides.substr(s, pos, len);
};
StringBuf.prototype.addChar = function(c) {
  this.b += String.fromCharCode(c);
};
StringBuf.prototype.add = function(x) {
  this.b += Std.string(x);
};
StringBuf.prototype.b = null;
StringBuf.prototype.__class__ = StringBuf;
StringTools = function() {
};
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
  return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
  return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s) {
  return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
StringTools.htmlUnescape = function(s) {
  return s.split("&gt;").join(">").split("&lt;").join("<").split("&amp;").join("&").split("&quot;").join('"');
};
StringTools.startsWith = function(s, start) {
  return s.length >= start.length && HxOverrides.substr(s, 0, start.length) == start;
};
StringTools.endsWith = function(s, end) {
  var elen = end.length;
  var slen = s.length;
  return slen >= elen && HxOverrides.substr(s, slen - elen, elen) == end;
};
StringTools.isSpace = function(s, pos) {
  var c = HxOverrides.cca(s, pos);
  return c >= 9 && c <= 13 || c == 32;
};
StringTools.ltrim = function(s) {
  if (typeof s != "string") {
    return s;
  }
  var l = s.length;
  var r = 0;
  while (r < l && StringTools.isSpace(s, r)) {
    r++;
  }
  if (r > 0) {
    return HxOverrides.substr(s, r, l - r);
  } else {
    return s;
  }
};
StringTools.rtrim = function(s) {
  if (typeof s != "string") {
    return s;
  }
  var l = s.length;
  var r = 0;
  while (r < l && StringTools.isSpace(s, l - r - 1)) {
    r++;
  }
  if (r > 0) {
    return HxOverrides.substr(s, 0, l - r);
  } else {
    return s;
  }
};
StringTools.trim = function(s) {
  return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.rpad = function(s, c, l) {
  var sl = s.length;
  var cl = c.length;
  while (sl < l) {
    if (l - sl < cl) {
      s += HxOverrides.substr(c, 0, l - sl);
      sl = l;
    } else {
      s += c;
      sl += cl;
    }
  }
  return s;
};
StringTools.lpad = function(s, c, l) {
  var ns = "";
  var sl = s.length;
  if (sl >= l) {
    return s;
  }
  var cl = c.length;
  while (sl < l) {
    if (l - sl < cl) {
      ns += HxOverrides.substr(c, 0, l - sl);
      sl = l;
    } else {
      ns += c;
      sl += cl;
    }
  }
  return ns + s;
};
StringTools.replace = function(s, sub, by) {
  return s.split(sub).join(by);
};
StringTools.hex = function(n, digits) {
  var s = "";
  var hexChars = "0123456789ABCDEF";
  do {
    s = hexChars.charAt(n & 15) + s;
    n >>>= 4;
  } while (n > 0);
  if (digits != null) {
    while (s.length < digits) {
      s = "0" + s;
    }
  }
  return s;
};
StringTools.fastCodeAt = function(s, index) {
  return s.charCodeAt(index);
};
StringTools.isEOF = function(c) {
  return c != c;
};
StringTools.prototype.__class__ = StringTools;
Type = function() {
};
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
  if (o == null) {
    return null;
  }
  return o.__class__;
};
Type.getEnum = function(o) {
  if (o == null) {
    return null;
  }
  return o.__enum__;
};
Type.getSuperClass = function(c) {
  return c.__super__;
};
Type.getClassName = function(c) {
  var a = c.__name__;
  return a.join(".");
};
Type.getEnumName = function(e) {
  var a = e.__ename__;
  return a.join(".");
};
Type.resolveClass = function(name) {
  var cl = $hxClasses[name];
  if (cl == null || !cl.__name__) {
    return null;
  }
  return cl;
};
Type.resolveEnum = function(name) {
  var e = $hxClasses[name];
  if (e == null || !e.__ename__) {
    return null;
  }
  return e;
};
Type.createInstance = function(cl, args) {
  switch(args.length) {
    case 0:
      return new cl;
    case 1:
      return new cl(args[0]);
    case 2:
      return new cl(args[0], args[1]);
    case 3:
      return new cl(args[0], args[1], args[2]);
    case 4:
      return new cl(args[0], args[1], args[2], args[3]);
    case 5:
      return new cl(args[0], args[1], args[2], args[3], args[4]);
    case 6:
      return new cl(args[0], args[1], args[2], args[3], args[4], args[5]);
    case 7:
      return new cl(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    case 8:
      return new cl(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
    default:
      throw "Too many arguments";;
  }
  return null;
};
Type.createEmptyInstance = function(cl) {
  function empty() {
  }
  empty.prototype = cl.prototype;
  return new empty;
};
Type.createEnum = function(e, constr, params) {
  var f = Reflect.field(e, constr);
  if (f == null) {
    throw "No such constructor " + constr;
  }
  if (Reflect.isFunction(f)) {
    if (params == null) {
      throw "Constructor " + constr + " need parameters";
    }
    return f.apply(e, params);
  }
  if (params != null && params.length != 0) {
    throw "Constructor " + constr + " does not need parameters";
  }
  return f;
};
Type.createEnumIndex = function(e, index, params) {
  var c = e.__constructs__[index];
  if (c == null) {
    throw index + " is not a valid enum constructor index";
  }
  return Type.createEnum(e, c, params);
};
Type.getInstanceFields = function(c) {
  var a = [];
  for (var i in c.prototype) {
    a.push(i);
  }
  HxOverrides.remove(a, "__class__");
  HxOverrides.remove(a, "__properties__");
  return a;
};
Type.getClassFields = function(c) {
  var a = Reflect.fields(c);
  HxOverrides.remove(a, "__name__");
  HxOverrides.remove(a, "__interfaces__");
  HxOverrides.remove(a, "__properties__");
  HxOverrides.remove(a, "__super__");
  HxOverrides.remove(a, "prototype");
  return a;
};
Type.getEnumConstructs = function(e) {
  var a = e.__constructs__;
  return a.slice();
};
Type["typeof"] = function(v) {
  switch(typeof v) {
    case "boolean":
      return ValueType.TBool;
    case "string":
      return ValueType.TClass(String);
    case "number":
      if (Math.ceil(v) == v % 2147483648) {
        return ValueType.TInt;
      }
      return ValueType.TFloat;
    case "object":
      if (v == null) {
        return ValueType.TNull;
      }
      var e = v.__enum__;
      if (e != null) {
        return ValueType.TEnum(e);
      }
      var c = v.__class__;
      if (c != null) {
        return ValueType.TClass(c);
      }
      return ValueType.TObject;
    case "function":
      if (v.__name__ || v.__ename__) {
        return ValueType.TObject;
      }
      return ValueType.TFunction;
    case "undefined":
      return ValueType.TNull;
    default:
      return ValueType.TUnknown;
  }
};
Type.enumEq = function(a, b) {
  if (a == b) {
    return true;
  }
  try {
    if (a[0] != b[0]) {
      return false;
    }
    var _g1 = 2, _g = a.length;
    while (_g1 < _g) {
      var i = _g1++;
      if (!Type.enumEq(a[i], b[i])) {
        return false;
      }
    }
    var e = a.__enum__;
    if (e != b.__enum__ || e == null) {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
};
Type.enumConstructor = function(e) {
  return e[0];
};
Type.enumParameters = function(e) {
  return e.slice(2);
};
Type.enumIndex = function(e) {
  return e[1];
};
Type.allEnums = function(e) {
  var all = [];
  var cst = e.__constructs__;
  var _g = 0;
  while (_g < cst.length) {
    var c = cst[_g];
    ++_g;
    var v = Reflect.field(e, c);
    if (!Reflect.isFunction(v)) {
      all.push(v);
    }
  }
  return all;
};
Type.prototype.__class__ = Type;
Xml = function() {
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.Element = null;
Xml.PCData = null;
Xml.CData = null;
Xml.Comment = null;
Xml.DocType = null;
Xml.Prolog = null;
Xml.Document = null;
Xml.parse = function(str) {
  return haxe.xml.Parser.parse(str);
};
Xml.createElement = function(name) {
  var r = new Xml;
  r.nodeType = Xml.Element;
  r._children = new Array;
  r._attributes = new Hash;
  r.setNodeName(name);
  return r;
};
Xml.createPCData = function(data) {
  var r = new Xml;
  r.nodeType = Xml.PCData;
  r.setNodeValue(data);
  return r;
};
Xml.createCData = function(data) {
  var r = new Xml;
  r.nodeType = Xml.CData;
  r.setNodeValue(data);
  return r;
};
Xml.createComment = function(data) {
  var r = new Xml;
  r.nodeType = Xml.Comment;
  r.setNodeValue(data);
  return r;
};
Xml.createDocType = function(data) {
  var r = new Xml;
  r.nodeType = Xml.DocType;
  r.setNodeValue(data);
  return r;
};
Xml.createProlog = function(data) {
  var r = new Xml;
  r.nodeType = Xml.Prolog;
  r.setNodeValue(data);
  return r;
};
Xml.createDocument = function() {
  var r = new Xml;
  r.nodeType = Xml.Document;
  r._children = new Array;
  return r;
};
Xml.prototype.toString = function() {
  if (this.nodeType == Xml.PCData) {
    return this._nodeValue;
  }
  if (this.nodeType == Xml.CData) {
    return "<![CDATA[" + this._nodeValue + "]]\x3e";
  }
  if (this.nodeType == Xml.Comment) {
    return "\x3c!--" + this._nodeValue + "--\x3e";
  }
  if (this.nodeType == Xml.DocType) {
    return "<!DOCTYPE " + this._nodeValue + ">";
  }
  if (this.nodeType == Xml.Prolog) {
    return "<?" + this._nodeValue + "?>";
  }
  var s = new StringBuf;
  if (this.nodeType == Xml.Element) {
    s.b += Std.string("<");
    s.b += Std.string(this._nodeName);
    var $it0 = this._attributes.keys();
    while ($it0.hasNext()) {
      var k = $it0.next();
      s.b += Std.string(" ");
      s.b += Std.string(k);
      s.b += Std.string('="');
      s.b += Std.string(this._attributes.get(k));
      s.b += Std.string('"');
    }
    if (this._children.length == 0) {
      s.b += Std.string("/>");
      return s.b;
    }
    s.b += Std.string(">");
  }
  var $it1 = this.iterator();
  while ($it1.hasNext()) {
    var x = $it1.next();
    s.b += Std.string(x.toString());
  }
  if (this.nodeType == Xml.Element) {
    s.b += Std.string("</");
    s.b += Std.string(this._nodeName);
    s.b += Std.string(">");
  }
  return s.b;
};
Xml.prototype.insertChild = function(x, pos) {
  if (this._children == null) {
    throw "bad nodetype";
  }
  if (x._parent != null) {
    HxOverrides.remove(x._parent._children, x);
  }
  x._parent = this;
  this._children.splice(pos, 0, x);
};
Xml.prototype.removeChild = function(x) {
  if (this._children == null) {
    throw "bad nodetype";
  }
  var b = HxOverrides.remove(this._children, x);
  if (b) {
    x._parent = null;
  }
  return b;
};
Xml.prototype.addChild = function(x) {
  if (this._children == null) {
    throw "bad nodetype";
  }
  if (x._parent != null) {
    HxOverrides.remove(x._parent._children, x);
  }
  x._parent = this;
  this._children.push(x);
};
Xml.prototype.firstElement = function() {
  if (this._children == null) {
    throw "bad nodetype";
  }
  var cur = 0;
  var l = this._children.length;
  while (cur < l) {
    var n = this._children[cur];
    if (n.nodeType == Xml.Element) {
      return n;
    }
    cur++;
  }
  return null;
};
Xml.prototype.firstChild = function() {
  if (this._children == null) {
    throw "bad nodetype";
  }
  return this._children[0];
};
Xml.prototype.elementsNamed = function(name) {
  if (this._children == null) {
    throw "bad nodetype";
  }
  return {cur:0, x:this._children, hasNext:function() {
    var k = this.cur;
    var l = this.x.length;
    while (k < l) {
      var n = this.x[k];
      if (n.nodeType == Xml.Element && n._nodeName == name) {
        break;
      }
      k++;
    }
    this.cur = k;
    return k < l;
  }, next:function() {
    var k = this.cur;
    var l = this.x.length;
    while (k < l) {
      var n = this.x[k];
      k++;
      if (n.nodeType == Xml.Element && n._nodeName == name) {
        this.cur = k;
        return n;
      }
    }
    return null;
  }};
};
Xml.prototype.elements = function() {
  if (this._children == null) {
    throw "bad nodetype";
  }
  return {cur:0, x:this._children, hasNext:function() {
    var k = this.cur;
    var l = this.x.length;
    while (k < l) {
      if (this.x[k].nodeType == Xml.Element) {
        break;
      }
      k += 1;
    }
    this.cur = k;
    return k < l;
  }, next:function() {
    var k = this.cur;
    var l = this.x.length;
    while (k < l) {
      var n = this.x[k];
      k += 1;
      if (n.nodeType == Xml.Element) {
        this.cur = k;
        return n;
      }
    }
    return null;
  }};
};
Xml.prototype.iterator = function() {
  if (this._children == null) {
    throw "bad nodetype";
  }
  return {cur:0, x:this._children, hasNext:function() {
    return this.cur < this.x.length;
  }, next:function() {
    return this.x[this.cur++];
  }};
};
Xml.prototype.attributes = function() {
  if (this.nodeType != Xml.Element) {
    throw "bad nodeType";
  }
  return this._attributes.keys();
};
Xml.prototype.exists = function(att) {
  if (this.nodeType != Xml.Element) {
    throw "bad nodeType";
  }
  return this._attributes.exists(att);
};
Xml.prototype.remove = function(att) {
  if (this.nodeType != Xml.Element) {
    throw "bad nodeType";
  }
  this._attributes.remove(att);
};
Xml.prototype.set = function(att, value) {
  if (this.nodeType != Xml.Element) {
    throw "bad nodeType";
  }
  this._attributes.set(att, value);
};
Xml.prototype.get = function(att) {
  if (this.nodeType != Xml.Element) {
    throw "bad nodeType";
  }
  return this._attributes.get(att);
};
Xml.prototype.getParent = function() {
  return this._parent;
};
Xml.prototype.setNodeValue = function(v) {
  if (this.nodeType == Xml.Element || this.nodeType == Xml.Document) {
    throw "bad nodeType";
  }
  return this._nodeValue = v;
};
Xml.prototype.getNodeValue = function() {
  if (this.nodeType == Xml.Element || this.nodeType == Xml.Document) {
    throw "bad nodeType";
  }
  return this._nodeValue;
};
Xml.prototype.setNodeName = function(n) {
  if (this.nodeType != Xml.Element) {
    throw "bad nodeType";
  }
  return this._nodeName = n;
};
Xml.prototype.getNodeName = function() {
  if (this.nodeType != Xml.Element) {
    throw "bad nodeType";
  }
  return this._nodeName;
};
Xml.prototype._parent = null;
Xml.prototype._children = null;
Xml.prototype._attributes = null;
Xml.prototype._nodeValue = null;
Xml.prototype._nodeName = null;
Xml.prototype.parent = null;
Xml.prototype.nodeValue = null;
Xml.prototype.nodeName = null;
Xml.prototype.nodeType = null;
Xml.prototype.__class__ = Xml;
com.inq.events.Event = function(type, bubbles, cancelable) {
  this.type = type;
};
$hxClasses["com.inq.events.Event"] = com.inq.events.Event;
com.inq.events.Event.__name__ = ["com", "inq", "events", "Event"];
com.inq.events.Event.ID3 = null;
com.inq.events.Event.ADDED_TO_STAGE = null;
com.inq.events.Event.REMOVED_FROM_STAGE = null;
com.inq.events.Event.prototype.type = null;
com.inq.events.Event.prototype.target = null;
com.inq.events.Event.prototype.eventPhase = null;
com.inq.events.Event.prototype.currentTarget = null;
com.inq.events.Event.prototype.cancelable = null;
com.inq.events.Event.prototype.bubbles = null;
com.inq.events.Event.prototype.__class__ = com.inq.events.Event;
com.inq.events.Event.ACTIVATE = "activate";
com.inq.events.Event.ADDED = "added";
com.inq.events.Event.CANCEL = "cancel";
com.inq.events.Event.CHANGE = "change";
com.inq.events.Event.CLOSE = "close";
com.inq.events.Event.COMPLETE = "complete";
com.inq.events.Event.CONNECT = "connect";
com.inq.events.Event.DEACTIVATE = "deactivate";
com.inq.events.Event.ENTER_FRAME = "enterFrame";
com.inq.events.Event.INIT = "init";
com.inq.events.Event.MOUSE_LEAVE = "mouseLeave";
com.inq.events.Event.OPEN = "open";
com.inq.events.Event.REMOVED = "removed";
com.inq.events.Event.RENDER = "render";
com.inq.events.Event.RESIZE = "resize";
com.inq.events.Event.SCROLL = "scroll";
com.inq.events.Event.SELECT = "select";
com.inq.events.Event.SOUND_COMPLETE = "soundComplete";
com.inq.events.Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
com.inq.events.Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
com.inq.events.Event.TAB_INDEX_CHANGE = "tabIndexChange";
com.inq.events.Event.UNLOAD = "unload";
com.inq.events.TextEvent = function(type, bubbles, cancelable, text) {
  com.inq.events.Event.call(this, type);
};
$hxClasses["com.inq.events.TextEvent"] = com.inq.events.TextEvent;
com.inq.events.TextEvent.__name__ = ["com", "inq", "events", "TextEvent"];
com.inq.events.TextEvent.__super__ = com.inq.events.Event;
for (var k in com.inq.events.Event.prototype) {
  com.inq.events.TextEvent.prototype[k] = com.inq.events.Event.prototype[k];
}
com.inq.events.TextEvent.prototype.m_text = null;
com.inq.events.TextEvent.prototype.text = null;
com.inq.events.TextEvent.prototype.__class__ = com.inq.events.TextEvent;
com.inq.events.TextEvent.LINK = "link";
com.inq.events.TextEvent.TEXT_INPUT = "textInput";
com.inq.events.ErrorEvent = function(type, bubbles, cancelable, text) {
  com.inq.events.TextEvent.call(this, type);
};
$hxClasses["com.inq.events.ErrorEvent"] = com.inq.events.ErrorEvent;
com.inq.events.ErrorEvent.__name__ = ["com", "inq", "events", "ErrorEvent"];
com.inq.events.ErrorEvent.__super__ = com.inq.events.TextEvent;
for (var k in com.inq.events.TextEvent.prototype) {
  com.inq.events.ErrorEvent.prototype[k] = com.inq.events.TextEvent.prototype[k];
}
com.inq.events.ErrorEvent.prototype.__class__ = com.inq.events.ErrorEvent;
com.inq.events.ErrorEvent.ERROR = "error";
com.inq.events.FocusEvent = function(type, bubbles, cancelable, relatedObject, shiftKey, keyCode) {
  com.inq.events.Event.call(this, type);
};
$hxClasses["com.inq.events.FocusEvent"] = com.inq.events.FocusEvent;
com.inq.events.FocusEvent.__name__ = ["com", "inq", "events", "FocusEvent"];
com.inq.events.FocusEvent.__super__ = com.inq.events.Event;
for (var k in com.inq.events.Event.prototype) {
  com.inq.events.FocusEvent.prototype[k] = com.inq.events.Event.prototype[k];
}
com.inq.events.FocusEvent.KEY_FOCUS_CHANGE = null;
com.inq.events.FocusEvent.MOUSE_FOCUS_CHANGE = null;
com.inq.events.FocusEvent.prototype.m_shiftKey = null;
com.inq.events.FocusEvent.prototype.m_relatedObject = null;
com.inq.events.FocusEvent.prototype.m_keyCode = null;
com.inq.events.FocusEvent.prototype.shiftKey = null;
com.inq.events.FocusEvent.prototype.relatedObject = null;
com.inq.events.FocusEvent.prototype.keyCode = null;
com.inq.events.FocusEvent.prototype.__class__ = com.inq.events.FocusEvent;
com.inq.events.FocusEvent.FOCUS_IN = "FocusIn";
com.inq.events.FocusEvent.FOCUS_OUT = "FocusOut";
com.inq.events.HTTPStatusEvent = function(type, bubbles, cancelable, status) {
  com.inq.events.Event.call(this, type);
};
$hxClasses["com.inq.events.HTTPStatusEvent"] = com.inq.events.HTTPStatusEvent;
com.inq.events.HTTPStatusEvent.__name__ = ["com", "inq", "events", "HTTPStatusEvent"];
com.inq.events.HTTPStatusEvent.__super__ = com.inq.events.Event;
for (var k in com.inq.events.Event.prototype) {
  com.inq.events.HTTPStatusEvent.prototype[k] = com.inq.events.Event.prototype[k];
}
com.inq.events.HTTPStatusEvent.prototype.m_status = null;
com.inq.events.HTTPStatusEvent.prototype.status = null;
com.inq.events.HTTPStatusEvent.prototype.__class__ = com.inq.events.HTTPStatusEvent;
com.inq.events.HTTPStatusEvent.HTTP_STATUS = "http_status";
com.inq.events.IOErrorEvent = function(type, bubbles, cancelable, text) {
  com.inq.events.ErrorEvent.call(this, type);
};
$hxClasses["com.inq.events.IOErrorEvent"] = com.inq.events.IOErrorEvent;
com.inq.events.IOErrorEvent.__name__ = ["com", "inq", "events", "IOErrorEvent"];
com.inq.events.IOErrorEvent.__super__ = com.inq.events.ErrorEvent;
for (var k in com.inq.events.ErrorEvent.prototype) {
  com.inq.events.IOErrorEvent.prototype[k] = com.inq.events.ErrorEvent.prototype[k];
}
com.inq.events.IOErrorEvent.prototype.__class__ = com.inq.events.IOErrorEvent;
com.inq.events.IOErrorEvent.DISK_ERROR = "diskError";
com.inq.events.IOErrorEvent.IO_ERROR = "ioError";
com.inq.events.IOErrorEvent.NETWORK_ERROR = "networkError";
com.inq.events.IOErrorEvent.VERIFY_ERROR = "verifyError";
com.inq.events.KeyboardEvent = function(type, bubbles, cancelable, charCode, keyCode, keyLocation, ctrlKey, altKey, shiftKey) {
  com.inq.events.Event.call(this, type);
};
$hxClasses["com.inq.events.KeyboardEvent"] = com.inq.events.KeyboardEvent;
com.inq.events.KeyboardEvent.__name__ = ["com", "inq", "events", "KeyboardEvent"];
com.inq.events.KeyboardEvent.__super__ = com.inq.events.Event;
for (var k in com.inq.events.Event.prototype) {
  com.inq.events.KeyboardEvent.prototype[k] = com.inq.events.Event.prototype[k];
}
com.inq.events.KeyboardEvent.prototype.m_shiftKey = null;
com.inq.events.KeyboardEvent.prototype.m_keyLocation = null;
com.inq.events.KeyboardEvent.prototype.m_keyCode = null;
com.inq.events.KeyboardEvent.prototype.m_ctrlKey = null;
com.inq.events.KeyboardEvent.prototype.m_charCode = null;
com.inq.events.KeyboardEvent.prototype.m_altKey = null;
com.inq.events.KeyboardEvent.prototype.updateAfterEvent = function() {
};
com.inq.events.KeyboardEvent.prototype.shiftKey = null;
com.inq.events.KeyboardEvent.prototype.keyLocation = null;
com.inq.events.KeyboardEvent.prototype.keyCode = null;
com.inq.events.KeyboardEvent.prototype.ctrlKey = null;
com.inq.events.KeyboardEvent.prototype.charCode = null;
com.inq.events.KeyboardEvent.prototype.altKey = null;
com.inq.events.KeyboardEvent.prototype.__class__ = com.inq.events.KeyboardEvent;
com.inq.events.KeyboardEvent.KEY_DOWN = "KeyDown";
com.inq.events.KeyboardEvent.KEY_UP = "KeyUp";
com.inq.events.KeyboardEvent.KEY_PRESS = "KeyPress";
com.inq.events.MouseEvent = function(type, bubbles, cancelable, localX, localY, relatedObject, ctrlKey, altKey, shiftKey, buttonDown, delta) {
  com.inq.events.Event.call(this, type);
};
$hxClasses["com.inq.events.MouseEvent"] = com.inq.events.MouseEvent;
com.inq.events.MouseEvent.__name__ = ["com", "inq", "events", "MouseEvent"];
com.inq.events.MouseEvent.__super__ = com.inq.events.Event;
for (var k in com.inq.events.Event.prototype) {
  com.inq.events.MouseEvent.prototype[k] = com.inq.events.Event.prototype[k];
}
com.inq.events.MouseEvent.DOUBLE_CLICK = null;
com.inq.events.MouseEvent.MOUSE_DOWN = null;
com.inq.events.MouseEvent.MOUSE_MOVE = null;
com.inq.events.MouseEvent.MOUSE_OUT = null;
com.inq.events.MouseEvent.MOUSE_OVER = null;
com.inq.events.MouseEvent.MOUSE_UP = null;
com.inq.events.MouseEvent.MOUSE_WHEEL = null;
com.inq.events.MouseEvent.ROLL_OUT = null;
com.inq.events.MouseEvent.ROLL_OVER = null;
com.inq.events.MouseEvent.prototype.m_shiftKey = null;
com.inq.events.MouseEvent.prototype.m_relatedObject = null;
com.inq.events.MouseEvent.prototype.m_localY = null;
com.inq.events.MouseEvent.prototype.m_localX = null;
com.inq.events.MouseEvent.prototype.m_delta = null;
com.inq.events.MouseEvent.prototype.m_ctrlKey = null;
com.inq.events.MouseEvent.prototype.m_buttonDown = null;
com.inq.events.MouseEvent.prototype.m_altKey = null;
com.inq.events.MouseEvent.prototype.stageY = null;
com.inq.events.MouseEvent.prototype.stageX = null;
com.inq.events.MouseEvent.prototype.shiftKey = null;
com.inq.events.MouseEvent.prototype.relatedObject = null;
com.inq.events.MouseEvent.prototype.localY = null;
com.inq.events.MouseEvent.prototype.localX = null;
com.inq.events.MouseEvent.prototype.delta = null;
com.inq.events.MouseEvent.prototype.ctrlKey = null;
com.inq.events.MouseEvent.prototype.buttonDown = null;
com.inq.events.MouseEvent.prototype.altKey = null;
com.inq.events.MouseEvent.prototype.__class__ = com.inq.events.MouseEvent;
com.inq.events.MouseEvent.CLICK = "click";
com.inq.events.ProgressEvent = function(type, bubbles, cancelable, bytesLoaded, bytesTotal) {
  com.inq.events.Event.call(this, type);
};
$hxClasses["com.inq.events.ProgressEvent"] = com.inq.events.ProgressEvent;
com.inq.events.ProgressEvent.__name__ = ["com", "inq", "events", "ProgressEvent"];
com.inq.events.ProgressEvent.__super__ = com.inq.events.Event;
for (var k in com.inq.events.Event.prototype) {
  com.inq.events.ProgressEvent.prototype[k] = com.inq.events.Event.prototype[k];
}
com.inq.events.ProgressEvent.prototype.m_bytesTotal = null;
com.inq.events.ProgressEvent.prototype.m_bytesLoaded = null;
com.inq.events.ProgressEvent.prototype.bytesTotal = null;
com.inq.events.ProgressEvent.prototype.bytesLoaded = null;
com.inq.events.ProgressEvent.prototype.__class__ = com.inq.events.ProgressEvent;
com.inq.events.ProgressEvent.PROGRESS = "progress";
com.inq.events.ProgressEvent.SOCKET_DATA = "socketData";
com.inq.events.SecurityErrorEvent = function(type, bubbles, cancelable, text) {
  com.inq.events.ErrorEvent.call(this, type);
};
$hxClasses["com.inq.events.SecurityErrorEvent"] = com.inq.events.SecurityErrorEvent;
com.inq.events.SecurityErrorEvent.__name__ = ["com", "inq", "events", "SecurityErrorEvent"];
com.inq.events.SecurityErrorEvent.__super__ = com.inq.events.ErrorEvent;
for (var k in com.inq.events.ErrorEvent.prototype) {
  com.inq.events.SecurityErrorEvent.prototype[k] = com.inq.events.ErrorEvent.prototype[k];
}
com.inq.events.SecurityErrorEvent.prototype.__class__ = com.inq.events.SecurityErrorEvent;
com.inq.events.SecurityErrorEvent.SECURITY_ERROR = "securityError";
if (!com.inq.flash.client.chatskins) {
  com.inq.flash.client.chatskins = {};
}
;com.inq.flash.client.chatskins.BalloonNotifier = function() {
};
$hxClasses["com.inq.flash.client.chatskins.BalloonNotifier"] = com.inq.flash.client.chatskins.BalloonNotifier;
com.inq.flash.client.chatskins.BalloonNotifier.__name__ = ["com", "inq", "flash", "client", "chatskins", "BalloonNotifier"];
com.inq.flash.client.chatskins.BalloonNotifier.Clear = function() {
  var elements = null;
  try {
    elements = Application.application._div.getElementsByTagName("*");
    if (elements == null) {
      return;
    }
  } catch (unknown) {
    return;
  }
  var ix;
  var _g1 = 0, _g = elements.length;
  while (_g1 < _g) {
    var ix1 = _g1++;
    try {
      var el = elements[ix1];
      if (el == null) {
        continue;
      }
      if (el["balloon"] != null) {
        el.balloon.destroy();
        el.balloon = null;
      }
    } catch (unknown) {
      haxe.Log.trace("Clear failed" + Std.string(unknown), {fileName:"BalloonNotifier.hx", lineNumber:35, className:"com.inq.flash.client.chatskins.BalloonNotifier", methodName:"Clear"});
    }
  }
};
com.inq.flash.client.chatskins.BalloonNotifier.Resize = function() {
  var elements = null;
  try {
    elements = Application.application._div.getElementsByTagName("*");
    if (elements == null) {
      return;
    }
  } catch (unknown) {
    return;
  }
  var ix;
  var _g1 = 0, _g = elements.length;
  while (_g1 < _g) {
    var ix1 = _g1++;
    try {
      var el = elements[ix1];
      if (el == null) {
        continue;
      }
      if (el["balloon"] != null) {
        el.balloon.resize();
      }
    } catch (unknown) {
      haxe.Log.trace("Resize failed" + Std.string(unknown), {fileName:"BalloonNotifier.hx", lineNumber:58, className:"com.inq.flash.client.chatskins.BalloonNotifier", methodName:"Resize"});
    }
  }
};
com.inq.flash.client.chatskins.BalloonNotifier.Notify = function(element, text) {
  com.inq.flash.client.chatskins.BalloonNotifier.show(element, text, "BalloonNotify");
};
com.inq.flash.client.chatskins.BalloonNotifier.Warn = function(element, text) {
  com.inq.flash.client.chatskins.BalloonNotifier.show(element, text, "BalloonWarn");
  element.onfocus = function(ev) {
    element.balloon.destroy();
  };
};
com.inq.flash.client.chatskins.BalloonNotifier.show = function(element, text, styleName) {
  var c = window.document.getElementById("chatWindow_span").parentNode;
  if (c != null || c.length > 0) {
    element.balloon = new com.inq.ui.BalloonOverlaying(Std.string(element.id) + "_balloon", styleName, element, text, c);
    element.balloon.addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.BalloonNotifier.onBalloonClick);
  }
};
com.inq.flash.client.chatskins.BalloonNotifier.onBalloonClick = function(me) {
  try {
    var target = me.currentTarget;
    var el = null;
    el = target.destroy();
    if (el != null) {
      if (el != null && el.focus != null) {
        el.focus();
      }
    }
  } catch (unknown) {
    haxe.Log.trace("onBalloonClick" + Std.string(unknown), {fileName:"BalloonNotifier.hx", lineNumber:90, className:"com.inq.flash.client.chatskins.BalloonNotifier", methodName:"onBalloonClick"});
  }
  return true;
};
com.inq.flash.client.chatskins.BalloonNotifier.prototype.__class__ = com.inq.flash.client.chatskins.BalloonNotifier;
com.inq.flash.client.chatskins.ChatTextArea = function(__textArea) {
  this._ta = null;
  this._setHtmlText("");
  this._tabStops = null;
  this._textField = null;
  this._initialized = false;
  this._onInitialized = null;
  this.arrayOpeners = new Array;
  this.arrayTranscripts = new Array;
  if (null != __textArea) {
    this._textArea = __textArea;
  }
  this._ta = __textArea;
  this._indent = 80;
  this._renderTimer = null;
  this.setTabStops();
  this.applyStyles();
  this.reverseChat = com.inq.utils.Util.getConfig("reverseChat", false);
};
$hxClasses["com.inq.flash.client.chatskins.ChatTextArea"] = com.inq.flash.client.chatskins.ChatTextArea;
com.inq.flash.client.chatskins.ChatTextArea.__name__ = ["com", "inq", "flash", "client", "chatskins", "ChatTextArea"];
com.inq.flash.client.chatskins.ChatTextArea.prototype.setStyle = function(styleName, styleValue) {
  if (this._ta != null) {
    this._ta.setStyle(styleName, styleValue);
  }
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.getTranscriptMessage = function(index) {
  return this.arrayTranscripts[index];
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.replaceTranscriptLineNoRender = function(index, newLine) {
  if (index < 0 || index > this.arrayTranscripts.length) {
    return false;
  }
  this.arrayTranscripts[index]["Msg"] = newLine;
  return true;
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.replaceTranscriptLine = function(index, newLine) {
  if (this.replaceTranscriptLineNoRender(index, newLine)) {
    this.render();
  }
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.getTranscriptLine = function(index) {
  if (index < 0 || index > this.arrayTranscripts.length) {
    return null;
  }
  return this.arrayTranscripts[index]["Msg"];
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.findTranscriptLineIndex = function(subString) {
  var o;
  var _g1 = 0, _g = this.arrayTranscripts.length;
  while (_g1 < _g) {
    var i = _g1++;
    o = this.arrayTranscripts[i];
    if (null != o) {
      try {
        if (o["Msg"].length > 0) {
          if (o["Msg"].indexOf(subString) != -1) {
            return i;
          }
        }
      } catch (e) {
        if (js.Boot.__instanceof(e, Error)) {
        } else {
          throw e;
        }
      }
    }
  }
  return -1;
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.getHtmlText = function() {
  return this.__htmlText;
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.addTranscriptLine = function(Id, Msg, MsgType, _html) {
  var defaultAgentAlias = com.inq.utils.Util.getConfig("defaultAgentAlias", "");
  var usecolon = defaultAgentAlias == "" && Id == "&nbsp;" ? "" : ":";
  var sText = Msg;
  switch(MsgType) {
    case com.inq.flash.client.chatskins.ChatTextArea.AGENT:
      Msg = Msg.split("&apos;").join("'");
      if (usecolon == ":") {
        Id = com.inq.flash.client.chatskins.ChatTextArea.AGENT_ID_PFX + Id + usecolon + com.inq.flash.client.chatskins.ChatTextArea.AGENT_ID_SFX;
      } else {
        Id = com.inq.flash.client.chatskins.ChatTextArea.AGENT_ID_PFX + com.inq.flash.client.chatskins.ChatTextArea.AGENT_ID_SFX.split("&nbsp;").join("");
      }
      Msg = com.inq.flash.client.chatskins.ChatTextArea.AGENT_MSG_PFX + Msg + com.inq.flash.client.chatskins.ChatTextArea.AGENT_MSG_SFX;
      sText = Id + Msg;
      break;
    case com.inq.flash.client.chatskins.ChatTextArea.CUSTOMER:
      Id = com.inq.flash.client.chatskins.ChatTextArea.CUST_ID_PFX + Id + com.inq.flash.client.chatskins.ChatTextArea.CUST_ID_SFX;
      Msg = com.inq.flash.client.chatskins.ChatTextArea.CUST_MSG_PFX + Msg + com.inq.flash.client.chatskins.ChatTextArea.CUST_MSG_SFX;
      sText = Id + Msg;
      break;
    case com.inq.flash.client.chatskins.ChatTextArea.SYSTEM:
      Msg = Msg.split("&nl;").join("<br/>");
      Msg = com.inq.flash.client.chatskins.ChatTextArea.SYS_PFX + Msg + com.inq.flash.client.chatskins.ChatTextArea.SYS_SFX;
      sText = Msg;
      break;
    case com.inq.flash.client.chatskins.ChatTextArea.SYSTEM_STATUS:
      Msg = com.inq.flash.client.chatskins.ChatTextArea.SYSSTAT_PFX + Msg + com.inq.flash.client.chatskins.ChatTextArea.SYSSTAT_SFX;
      sText = Msg;
      break;
  }
  _html = this.reverseChat ? sText + _html : _html + sText;
  return _html;
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.addBufferedAriaMsg = function(Id, Msg, MsgType, force) {
  var iniBuf;
  var ariaMsgObj = {id:Id, msg:Msg, msgType:MsgType, f:force};
  this.ariaMessages.push(ariaMsgObj);
  if (this.ariaMessages.length == 1) {
    var _inTxt = (com.inq.utils.Capabilities.isSafari() || com.inq.utils.Capabilities.isIOSWebView()) && com.inq.utils.Capabilities.isMobile() ? "Double tap to start editing mode" : com.inq.flash.client.chatskins.SkinControl.getInputArea().getText();
    if (!_inTxt) {
      _inTxt = "Type your message here";
    }
    iniBuf = Application.IsPersistent() ? 25 * 1E3 : _inTxt.length * 3 * 60;
    this.ariaTimer = new com.inq.utils.Timer(iniBuf);
    this.ariaTimer.run = $bind(this, function ariaCb() {
      this.ariaTimer = this.timedAriaMsg(this.ariaTimer);
      if (this.ariaTimer) {
        this.ariaTimer.run = $bind(this, ariaCb);
      }
    });
    var clear = $bind(this, this.clearTimer);
    com.inq.ui.Stage.getStageElement().onclick = clear;
    com.inq.ui.Stage.getStageElement().onkeyup = clear;
  } else {
    if (!this.ariaTimer && this.ariaBufIndex != -1) {
      com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg(Id, Msg, MsgType, force);
    }
  }
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.timedAriaMsg = function(timer) {
  var item = this.ariaMessages[this.ariaBufIndex];
  timer.stop();
  if (this.ariaBuflastMessage != item.msg) {
    com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg(item.id, item.msg, item.msgType, item.f);
  }
  this.ariaBuflastMessage = item.msg;
  this.ariaBufIndex++;
  if (this.ariaBufIndex < this.ariaMessages.length) {
    var _inTxt = this.ariaMessages[this.ariaBufIndex].msg;
    return new com.inq.utils.Timer(_inTxt.length * 90);
  }
  return null;
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.clearTimer = function() {
  if (this.ariaTimer) {
    this.ariaTimer.stop();
    this.ariaTimer = null;
    this.ariaBufIndex = -1;
    this.ariaBuflastMessage = null;
  }
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg = function(Id, Msg, MsgType, force) {
  if (typeof force === "undefined") {
    force = false;
  }
  if (typeof com.inq.flash.client.chatskins.ChatTextArea.ariaMessage == "undefined") {
    com.inq.flash.client.chatskins.ChatTextArea.isAriaMessageOn = true;
    com.inq.flash.client.chatskins.ChatTextArea.ariaMessage = Application.application.getMxmlItem("tc-aria-readme") || Application.application.getMxmlItem("tcChat_tc-aria-readme");
    com.inq.flash.client.chatskins.ChatTextArea.ariaMessageAndroidProxy = Application.application.getMxmlItem("tc-readme-proxy") || Application.application.getMxmlItem("tcChat_tc-readme-proxy");
    com.inq.flash.client.chatskins.ChatTextArea.isAriaMessageOn = typeof com.inq.flash.client.chatskins.ChatTextArea.ariaMessage == "undefined" ? false : true;
  }
  if (com.inq.flash.client.chatskins.ChatTextArea.ariaMessage == null) {
    return;
  }
  if (com.inq.flash.client.chatskins.ChatTextArea.isAriaMessageOn == true && (MsgType == com.inq.flash.client.chatskins.ChatTextArea.AGENT || MsgType == com.inq.flash.client.chatskins.ChatTextArea.CUSTOMER || MsgType == com.inq.flash.client.chatskins.ChatTextArea.SYSTEM || MsgType == com.inq.flash.client.chatskins.ChatTextArea.SYSTEM_STATUS)) {
    if (this.addAriaMsgLast !== Msg || force) {
      if (/android/i.test(navigator.userAgent.toLowerCase())) {
        com.inq.flash.client.chatskins.ChatTextArea.ariaMessage._div.innerHTML = " ";
        if (com.inq.flash.client.chatskins.ChatTextArea.ariaMessageAndroidProxy != null) {
          com.inq.flash.client.chatskins.ChatTextArea.ariaMessageAndroidProxy._div.innerHTML = Msg;
        }
      }
      if (com.inq.flash.client.control.MinimizeManager.minimized && com.inq.flash.client.control.MinimizeManager.ariaMegMini) {
        com.inq.flash.client.control.MinimizeManager.ariaMegMini._div.innerHTML = Msg;
      } else {
        com.inq.flash.client.chatskins.ChatTextArea.ariaMessage._div.innerHTML = Msg;
        if (com.inq.utils.Capabilities.isIphone() && com.inq.flash.client.chatskins.ChatTextArea.ariaResetTimerID == -1) {
          var resetMsg = function() {
            com.inq.flash.client.chatskins.ChatTextArea.ariaMessage._div.innerHTML = "";
            com.inq.flash.client.chatskins.ChatTextArea.ariaResetTimerID = -1;
          };
          com.inq.flash.client.chatskins.ChatTextArea.ariaResetTimerID = com.inq.utils.Timer.delay(resetMsg, com.inq.flash.client.chatskins.ChatTextArea.RESET_MSG_DELAY).id;
        }
      }
      this.addAriaMsgLast = Msg;
    }
  }
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.addTranscript = function(Id, Msg, MsgType, position) {
  var object;
  var res;
  try {
    if (this.arrayTranscripts.length > 0) {
      object = this.arrayTranscripts[this.arrayTranscripts.length - 1];
      if (object["MsgType"] == com.inq.flash.client.chatskins.ChatTextArea.SYSTEM_STATUS) {
        this.arrayTranscripts.pop();
      }
    }
    var object1 = {};
    object1["Id"] = Id;
    object1["Msg"] = Msg;
    object1["MsgType"] = MsgType;
    if (this.arrayTranscripts.length <= position) {
      position = -1;
    }
    if (position == -1) {
      this.arrayTranscripts.push(object1);
      res = this.arrayTranscripts.length - 1;
    } else {
      this.arrayTranscripts[res = position] = object1;
    }
    this.render();
    return res;
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("ChatTextArea.addTranscript:451 Error:" + Std.string(e), {fileName:"ChatTextArea.hx", lineNumber:554, className:"com.inq.flash.client.chatskins.ChatTextArea", methodName:"addTranscript"});
    } else {
      throw e;
    }
  }
  return -1;
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.addOpenerScript = function(Id, Msg, MsgType, position) {
  var object = {};
  object["Id"] = Id;
  object["Msg"] = Msg;
  object["MsgType"] = MsgType;
  if (position == -1) {
    if (this.arrayOpeners.length > 0 && this.arrayOpeners[this.arrayOpeners.length - 1]["Msg"] == Msg) {
      this.arrayOpeners.pop();
    }
    this.arrayOpeners.push(object);
  } else {
    this.arrayOpeners[position] = object;
  }
  this.render();
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.clearTranscript = function() {
  this._setHtmlText("");
  this._ta._setHtmlText("<table>" + this.__htmlText + "</table>");
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.scrollToEnd = function(ta) {
  try {
    if (ta == null) {
      ta = this._ta;
    }
    if (!this.reverseChat) {
      ta.scrollToBottom();
    } else {
      ta.scrollToTop();
    }
  } catch (e) {
    haxe.Log.trace("Error scrolling text area:", {fileName:"ChatTextArea.hx", lineNumber:504, className:"com.inq.flash.client.chatskins.ChatTextArea", methodName:"scrollToEnd"});
    haxe.Log.trace(e, {fileName:"ChatTextArea.hx", lineNumber:505, className:"com.inq.flash.client.chatskins.ChatTextArea", methodName:"scrollToEnd"});
  }
};
com.inq.flash.client.chatskins.ChatTextArea.prototype._render = function() {
  try {
    this._renderTimer = null;
    this._setHtmlText(this.renderToHtml());
    if (com.inq.utils.Capabilities.isSafari() || com.inq.utils.Capabilities.isMobile()) {
      this._ta._setHtmlText("<table>" + this.__htmlText + "</table>");
      this.scrollToEnd(this._ta);
      return;
    }
    var taid = this._textArea.getID();
    var ta2 = com.inq.ui.TextArea.clone(this._ta, taid + "2");
    var p = this._ta.parent;
    ta2.attachTo(p, this._ta);
    ta2.setVisible(false);
    ta2._setHtmlText("<table>" + this.__htmlText + "</table>");
    ta2.setVisible(true);
    this._ta.setID(taid + "_old");
    ta2.setID(taid);
    this._ta.setVisible(false);
    this.scrollToEnd(ta2);
    var taTemp = this._ta;
    this._ta = this._textArea = ta2;
    ta2 = taTemp;
    Application.application.setMxmlItem(this._ta);
    ta2.removeFrom();
    ta2 = null;
  } catch (e) {
    haxe.Log.trace(e, {fileName:"ChatTextArea.hx", lineNumber:480, className:"com.inq.flash.client.chatskins.ChatTextArea", methodName:"_render"});
  }
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.render = function() {
  if (this._renderTimer != null) {
    this._renderTimer.stop();
  }
  this._renderTimer = com.inq.utils.Timer.delay($bind(this, this._render), com.inq.flash.client.chatskins.ChatTextArea.RENDER_DELAY);
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.renderToHtml = function() {
  var i;
  var o;
  var htmlText = "";
  var _g1 = 0, _g = this.arrayOpeners.length;
  while (_g1 < _g) {
    var i1 = _g1++;
    o = this.arrayOpeners[i1];
    if (null != o) {
      try {
        htmlText = this.addTranscriptLine(o["Id"], o["Msg"], o["MsgType"], htmlText);
        if (_g1 === _g && this.arrayTranscripts.length == 0 && com.inq.utils.Util.getConfig("readOpenerScript", true)) {
          com.inq.flash.client.chatskins.ChatTextArea.prototype.addBufferedAriaMsg(o["Id"], o["Id"] + " " + o["Msg"], o["MsgType"]);
        }
      } catch (e) {
        if (js.Boot.__instanceof(e, Error)) {
        } else {
          throw e;
        }
      }
    }
  }
  var _g1 = 0, _g = this.arrayTranscripts.length;
  while (_g1 < _g) {
    var i1 = _g1++;
    o = this.arrayTranscripts[i1];
    if (null != o) {
      try {
        var id = null;
        id = o["Id"];
        if (id != null && o["Msg"].length > 0) {
          htmlText = this.addTranscriptLine(o["Id"], o["Msg"], o["MsgType"], htmlText);
          if (_g1 === _g) {
            com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg(o["Id"], o["Id"] + " " + o["Msg"], o["MsgType"]);
          }
        }
      } catch (e) {
        if (js.Boot.__instanceof(e, Error)) {
        } else {
          throw e;
        }
      }
    }
  }
  return htmlText;
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.setTabStops = function() {
  try {
    var width = this._textArea.getWidth();
    var lmt = Math.floor(this._textArea.getWidth());
    if (lmt <= 0) {
      lmt = this._indent + 500;
    }
    this._tabStops = new Array;
    var ix = 0;
    var tab = this._indent;
    while (tab < lmt) {
      if (tab != 0) {
        this._tabStops[ix++] = tab;
      }
      tab += 10;
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("ChatTextArea.setTabStops ERROR: " + Std.string(e), {fileName:"ChatTextArea.hx", lineNumber:392, className:"com.inq.flash.client.chatskins.ChatTextArea", methodName:"setTabStops"});
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.getLength = function() {
  return this._ta._getHtmlText().length;
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.setIndent = function(indent) {
  this._indent = indent;
  this.setTabStops();
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.setGraphicId = function(graphicID) {
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.applyStyles = function() {
  var sAgentColor;
  var sCustomerColor;
  var sFontSize;
  var sIndent;
  var sTabStops;
  var agentSample;
  var sFont;
  sAgentColor = com.inq.flash.client.chatskins.SkinControl.transcriptAgentColor;
  sCustomerColor = com.inq.flash.client.chatskins.SkinControl.transcriptCustomerColor;
  sFontSize = com.inq.flash.client.chatskins.SkinControl.transcriptFontSize;
  sIndent = com.inq.flash.client.chatskins.SkinControl.transcriptIndent;
  sTabStops = "[" + sIndent + "]";
  var sFont1 = com.inq.flash.client.chatskins.SkinControl.transcriptFont;
  var agentSample1 = com.inq.flash.client.chatskins.SkinControl.transcriptAgentSample;
  var css = new com.inq.ui.StyleSheet;
  var cw = Application.application.getMxmlItem("chatWindow");
  css.setStyle("html", {});
  css.setStyle("body", {fontFamily:sFont1, fontSize:sFontSize, fontWeight:"normal"});
  var styleObj;
  var styleId;
  var styleData;
  styleId = "systemMsg";
  styleData = com.inq.utils.Util.getConfig(styleId, null);
  if (styleData != null) {
    css.setStyle("." + styleId, styleData);
    styleId = "customerId";
    styleObj = com.inq.utils.Util.getConfig(styleId, null);
    if (styleObj != null) {
      styleObj["verticalAlign"] = "top";
      styleObj["vertical-align"] = "top";
    }
    css.setStyle("." + styleId, styleObj);
    styleId = "agentId";
    css.setStyle("." + styleId, com.inq.utils.Util.getConfig(styleId, null));
    styleId = "agentMsg";
    try {
      cw._setStyleSheet(css);
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
      } else {
        throw e;
      }
    }
    styleObj = com.inq.utils.Util.getConfig(styleId, null);
    if (styleObj != null) {
      styleObj["tabStops"] = com.inq.flash.client.chatskins.SkinControl.transcriptTabStops;
      styleObj["marginLeft"] = sIndent;
    }
    css.setStyle("." + styleId, styleObj);
    styleId = "customerMsg";
    styleObj = com.inq.utils.Util.getConfig(styleId, null);
    if (styleObj != null) {
      styleObj["tabStops"] = sTabStops;
      styleObj["marginLeft"] = sIndent;
    }
    css.setStyle("." + styleId, styleObj);
    try {
      this._ta._setStyleSheet(css);
    } catch (e) {
    }
  }
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.exportData = function() {
  var ix;
  var o;
  var txt = "{ " + "__taId: " + com.inq.utils.StringUtil.toJsString(this._textArea.getID()) + ",\n" + "__htmlText: " + com.inq.utils.StringUtil.toJsString(this.__htmlText) + ",\n" + "_initialized: " + Std.string(this._initialized) + ",\n" + "arrayOpeners: [";
  var _g1 = 0, _g = this.arrayOpeners.length;
  while (_g1 < _g) {
    var ix1 = _g1++;
    if (null != (o = this.arrayOpeners[ix1])) {
      try {
        if (ix1 != 0) {
          txt += ",";
        }
        txt += "{Id:" + com.inq.utils.StringUtil.toJsString(o["Id"]) + ",Msg:" + com.inq.utils.StringUtil.toJsString(o["Msg"]) + ",MsgType:" + (o["MsgType"] + "}\n");
      } catch (e) {
        if (js.Boot.__instanceof(e, Error)) {
        } else {
          throw e;
        }
      }
    }
  }
  txt += "],\n";
  txt += "arrayTranscripts: [";
  var _g1 = 0, _g = this.arrayTranscripts.length;
  while (_g1 < _g) {
    var ix1 = _g1++;
    if (null != (o = this.arrayTranscripts[ix1])) {
      try {
        if (ix1 != 0) {
          txt += ",";
        }
        txt += "{Id:" + com.inq.utils.StringUtil.toJsString(o["Id"]) + ",Msg:" + com.inq.utils.StringUtil.toJsString(o["Msg"]) + ",MsgType:" + (o["MsgType"] + "}\n");
      } catch (e) {
        if (js.Boot.__instanceof(e, Error)) {
        } else {
          throw e;
        }
      }
    }
  }
  txt += "]\n";
  txt += "}";
  return txt;
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.importData = function(data) {
  var obj = this.stringToObject(data);
  var importedHtml = obj["__htmlText"];
  this._setHtmlText(importedHtml);
  var taid = obj["__taId"];
  this._initialized = obj["_initialized"];
  this.arrayOpeners = obj["arrayOpeners"];
  this.arrayTranscripts = obj["arrayTranscripts"];
  if (this._ta == null) {
    this._ta = this._textArea = Application.application.getMxmlItem(taid);
  }
  if (this._ta != null) {
    try {
      this._ta._setHtmlText("<table>" + importedHtml + "</table>");
    } catch (e) {
      haxe.Log.trace("importData ERROR: " + Std.string(e), {fileName:"ChatTextArea.hx", lineNumber:198, className:"com.inq.flash.client.chatskins.ChatTextArea", methodName:"importData"});
    }
  } else {
    haxe.Log.trace("Error: could NOT access the base textarea", {fileName:"ChatTextArea.hx", lineNumber:201, className:"com.inq.flash.client.chatskins.ChatTextArea", methodName:"importData"});
  }
  this.scrollToBottom();
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.stringToObject = function(s) {
  var func;
  var obj = null;
  try {
    var func1 = new Function("return " + s + ";");
    obj = func1();
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("ERROR: \n" + s, {fileName:"ChatTextArea.hx", lineNumber:178, className:"com.inq.flash.client.chatskins.ChatTextArea", methodName:"stringToObject"});
    } else {
      throw e;
    }
  }
  return obj;
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.scrollToTop = function() {
  this._textArea.scrollToTop();
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.scrollToBottom = function() {
  this._textArea.scrollToBottom();
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.setActualSize = function(w, h) {
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.setHtmlText = function(str) {
  this._setHtmlText(str);
  var sTabStops = "[" + this._tabStops.join(",") + "]";
  var sTextFormatStart = "<table>";
  var sTextFormatEnd = "</table>";
  this._textArea._setHtmlText(sTextFormatStart + this.__htmlText + sTextFormatEnd);
};
com.inq.flash.client.chatskins.ChatTextArea.prototype._setHtmlText = function(htmlText) {
  this.__htmlText = htmlText;
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.syncForms = function() {
  var allForms = this._ta._div.getElementsByTagName("FORM");
  var tix, fix;
  var inputs;
  var _g1 = 0, _g = allForms.length;
  while (_g1 < _g) {
    var fix1 = _g1++;
    inputs = allForms[fix1].getElementsByTagName("INPUT");
    var _g3 = 0, _g2 = inputs.length;
    while (_g3 < _g2) {
      var iix = _g3++;
      inputs[iix].setAttribute("value", inputs[iix].value);
    }
  }
  var divScratch = js.Lib.document.createElement("DIV");
  var findex = 0;
  var _g1 = 0, _g = this.arrayTranscripts.length;
  while (_g1 < _g) {
    var tix1 = _g1++;
    divScratch.innerHTML = this.arrayTranscripts[tix1]["Msg"];
    var frms = divScratch.getElementsByTagName("FORM");
    if (frms != null && frms.length > 0 && allForms.length > findex) {
      this.arrayTranscripts[tix1]["Msg"] = allForms[findex].parentNode.innerHTML;
      findex += frms.length;
    }
  }
  this.__htmlText = this.renderToHtml();
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.setStyleSheet = function(ss) {
  return;
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.getY = function() {
  return this._textArea.getY();
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.getX = function() {
  return this._textArea.getX();
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.getWidth = function() {
  return this._textArea.getWidth();
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.getHeight = function() {
  return this._textArea.getHeight();
};
com.inq.flash.client.chatskins.ChatTextArea.prototype.reverseChat = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype._renderTimer = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype._initialized = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype.htmlText = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype.styleSheet = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype.onInitialized = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype.indent = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype.y = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype.x = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype.width = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype.height = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype._onInitialized = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype._indent = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype._tabStops = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype.__htmlText = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype._ta = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype._textArea = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype._textField = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype.arrayTranscripts = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype.arrayOpeners = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype.__class__ = com.inq.flash.client.chatskins.ChatTextArea;
com.inq.flash.client.chatskins.ChatTextArea.RENDER_DELAY = 10;
com.inq.flash.client.chatskins.ChatTextArea.RESET_MSG_DELAY = 1E3;
com.inq.flash.client.chatskins.ChatTextArea.AGENT = 1;
com.inq.flash.client.chatskins.ChatTextArea.CUSTOMER = 2;
com.inq.flash.client.chatskins.ChatTextArea.SYSTEM = 3;
com.inq.flash.client.chatskins.ChatTextArea.SYSTEM_STATUS = 4;
com.inq.flash.client.chatskins.ChatTextArea.AGENT_ID_PFX = "<tr><td class='tcChat_agentLine' style='vertical-align: top'><span class='agentId'>";
com.inq.flash.client.chatskins.ChatTextArea.AGENT_ID_SFX = "&nbsp;</span>";
com.inq.flash.client.chatskins.ChatTextArea.AGENT_MSG_PFX = "<span class='agentMsg'>";
com.inq.flash.client.chatskins.ChatTextArea.AGENT_MSG_SFX = "</span></td></tr>";
com.inq.flash.client.chatskins.ChatTextArea.CUST_ID_PFX = "<tr><td class='tcChat_customerLine' style='vertical-align: top'><span class='customerId'>";
com.inq.flash.client.chatskins.ChatTextArea.CUST_ID_SFX = ":&nbsp;</span>";
com.inq.flash.client.chatskins.ChatTextArea.CUST_MSG_PFX = "<span class='customerMsg'>";
com.inq.flash.client.chatskins.ChatTextArea.CUST_MSG_SFX = "</span></td></tr>";
com.inq.flash.client.chatskins.ChatTextArea.SYS_PFX = "<tr><td><span class='systemMsg'>";
com.inq.flash.client.chatskins.ChatTextArea.SYS_SFX = "</span></td></tr>";
com.inq.flash.client.chatskins.ChatTextArea.SYSSTAT_PFX = "<tr><td><span class='systemStatMsg'>";
com.inq.flash.client.chatskins.ChatTextArea.SYSSTAT_SFX = "</span></td></tr>";
com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsgLast = "";
com.inq.flash.client.chatskins.ChatTextArea.prototype.ariaMessages = [];
com.inq.flash.client.chatskins.ChatTextArea.prototype.ariaBufIndex = 0;
com.inq.flash.client.chatskins.ChatTextArea.prototype.ariaBuflastMessage = null;
com.inq.flash.client.chatskins.ChatTextArea.prototype.ariaTimer = null;
com.inq.flash.client.chatskins.ChatTextArea.ariaResetTimerID = -1;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase = function() {
  this.iframe = null;
  this.windowPosition = null;
  this.chatArea = null;
  this.hasFocus = null;
  this.blurToken = null;
  this.focusToken = null;
  this.inited = false;
  this.onBlurHandlerScheduleId = 0;
  this.orbeonDtidMap = {};
  this.keyboardHeightArray = [null, null];
  this.focusElement = null;
  this.bResizeToViewport = false;
  this.curScroll = null;
  this.focusScroll = null;
  this.tapTimer = 0;
  $bindAll(this);
};
$hxClasses.registerClass(com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase, "com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase");
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.iframe = null;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.windowPosition = null;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.chatArea = null;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.hasFocus = false;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.blurToken = null;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.focusToken = null;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.inited = false;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onBlurHandlerScheduleId = 0;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.orbeonDtidMap = {};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.keyboardHeightArray = [null, null];
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.focusElement = null;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.bResizeToViewport = false;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.curScroll = null;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.focusScroll = null;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.tapTimer = 0;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.scrollState = 0;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.viewPort;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.isTouched = false;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.init = function() {
  if (!com.inq.utils.Capabilities.isMobile() || !com.inq.utils.Capabilities.isAutoZoom()) {
    this.inited = false;
    return this.inited;
  }
  if (window.top.pageYOffset == 0) {
    window.top.scrollBy(0, 1);
  }
  this.iframe = window.parent.document.getElementById("inqChatStage");
  this.bindListeners();
  this.orbeonDtidMap = {};
  com.inq.utils.Util.publish("Inq.xforms.bindOrbeonListeners", this.bindOrbeonListeners);
  com.inq.utils.Util.publish("Inq.xforms.unbindOrbeonListeners", this.unbindOrbeonListeners);
  this.inited = true;
  return this.inited;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.Close = function() {
  if (!this.inited) {
    return;
  }
  this.unbindListeners();
  if (this.blurToken != null) {
    window.clearInterval(this.blurToken);
    this.blurToken = null;
  }
  if (this.focusToken != null) {
    window.clearInterval(this.focusToken);
    this.focusToken = null;
  }
  this.restoreWindowPosition();
  this.inited = false;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.bindListeners = function() {
  var stageDiv = com.inq.ui.Stage.getStageElement();
  if (!com.inq.utils.Capabilities.isIpad()) {
    com.inq.utils.Capabilities.BindListener(stageDiv, "touchstart", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onTouchStart);
    com.inq.utils.Capabilities.BindListener(stageDiv, "touchend", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onTouchEnd);
  }
  var _g = 0, _g1 = ["txtInput", "emailInput"];
  while (_g < _g1.length) {
    try {
      var n = _g1[_g];
      ++_g;
      var container = Application.application.getTextInput(n);
      if (!container) {
        continue;
      }
      var input = container.getInput();
      if (input != null) {
        com.inq.utils.Capabilities.BindListener(input, "focus", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onFocus);
        com.inq.utils.Capabilities.BindListener(input, "blur", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onBlur);
        com.inq.utils.Capabilities.BindListener(input, "paste", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onPaste);
      }
    } catch (err) {
      haxe.Log.trace("Error: " + err, {fileName:"ChatTextFocusMonitorImplBase.js", lineNumber:167, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase", methodName:"bindListeners"});
    }
  }
  var txtInput = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
  if (txtInput != null) {
    txtInput.setFocus();
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.bindOrbeonListeners = function(dtid, fields) {
  var ix = 0;
  while (ix < fields.length) {
    var el = fields[ix];
    ++ix;
    if (el != null) {
      com.inq.utils.Capabilities.BindListener(el, "focus", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onFocus);
      com.inq.utils.Capabilities.BindListener(el, "blur", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onBlur);
      com.inq.utils.Capabilities.BindListener(el, "paste", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onPaste);
    }
  }
  this.orbeonDtidMap[dtid] = fields;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.unbindOrbeonListeners = function(dtid) {
  var ix = 0;
  var fields = this.orbeonDtidMap[dtid];
  if (fields && fields.length > 0) {
    while (ix < fields.length) {
      var el = fields[ix];
      ++ix;
      if (el != null) {
        com.inq.utils.Capabilities.UnbindListener(el, "focus", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onFocus);
        com.inq.utils.Capabilities.UnbindListener(el, "blur", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onBlur);
        com.inq.utils.Capabilities.UnbindListener(el, "paste", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onPaste);
      }
    }
    this.orbeonDtidMap[dtid] = null;
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.blur = function() {
  if (this.focusElement != null) {
    this.focusElement.blur();
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.unbindListeners = function() {
  var stageDiv = com.inq.ui.Stage.getStageElement();
  if (!com.inq.utils.Capabilities.isIpad()) {
    com.inq.utils.Capabilities.UnbindListener(stageDiv, "touchstart", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onTouchStart);
    com.inq.utils.Capabilities.UnbindListener(stageDiv, "touchend", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onTouchEnd);
  }
  var _g = 0, _g1 = ["txtInput", "emailInput"];
  while (_g < _g1.length) {
    var n = _g1[_g];
    ++_g;
    var container = Application.application.getTextInput(n);
    if (container == null) {
      continue;
    }
    var input = container.getInput();
    if (input != null) {
      com.inq.utils.Capabilities.UnbindListener(input, "focus", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onFocus);
      com.inq.utils.Capabilities.UnbindListener(input, "blur", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onBlur);
      com.inq.utils.Capabilities.UnbindListener(input, "paste", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onPaste);
    }
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.HasFocus = function() {
  return this.hasFocus;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.getFocusElement = function() {
  return this.focusElement;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.scrollToPrevious = function() {
  if (this.windowPosition != null) {
    com.inq.flash.client.chatskins.ScrollMonitor.ScrollTo(this.windowPosition.x, this.windowPosition.y);
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.saveWindowPositionForce = function() {
  this.windowPosition = com.inq.utils.Capabilities.getViewport();
  if (this.windowPosition.y == 0) {
    this.windowPosition.y = 1;
  }
  this.chatArea = Application.GetArea();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.saveWindowPosition = function() {
  if (this.windowPosition == null && this.chatArea == null) {
    this.windowPosition = com.inq.utils.Capabilities.getViewport();
    this.chatArea = Application.GetArea();
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.clearWindowPosition = function() {
  this.windowPosition = null;
  this.chatArea = null;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.hasSavedWindowPosition = function() {
  return this.windowPosition != null && this.chatArea != null;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.restoreWindowPosition = function() {
  var stage = com.inq.ui.Stage.getInstance();
  var stageIsVisible = stage.getVisible();
  if (Application.IsPersistent()) {
    com.inq.flash.client.chatskins.ScrollMonitor.ScrollToTop();
    var __this__ = this;
    com.inq.utils.Timer.delay(function() {
      __this__.resizeToViewport("restore 1");
    }, 1);
  } else {
    if (this.windowPosition != null) {
      com.inq.flash.client.chatskins.ScrollMonitor.ScrollTo(this.windowPosition.x, this.windowPosition.y);
    }
    if (com.inq.utils.Capabilities.isPhone() && this.chatArea == null) {
      this.resizeToViewport("restoreWindowPosition");
    }
    if (this.chatArea != null) {
      Application.SetArea(this.chatArea);
    }
  }
  stage.setVisible(stageIsVisible);
  this.windowPosition = this.chatArea = null;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.FixIPhoneFocusScroll = function() {
  if (this.focusScroll.X != top.scrollX || this.focusScroll.Y != top.scrollY) {
    window.top.scrollTo(this.focusScroll.X, this.focusScroll.Y);
    return true;
  } else {
    return false;
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onFocus = function(ev, element) {
  var isButtonHasFirstFocus = com.inq.flash.client.chatskins.SkinControl.accessibilityHelp.isButtonHasFirstFocus;
  this.hasFocus = true;
  this.focusElement = element;
  if (com.inq.utils.Capabilities.isTablet() && !Application.IsPersistent()) {
    com.inq.flash.client.chatskins.ScrollMonitor.suspend();
    com.inq.utils.Capabilities.waitFor(com.inq.utils.Capabilities.viewportStopsMoving(800), 200, function() {
      com.inq.flash.client.chatskins.ScrollMonitor.resume();
      com.inq.flash.client.chatskins.ScrollMonitor.moveChat(true);
    });
    return false;
  }
  if (ev.relatedTarget && ev.relatedTarget.type != "image" && this.focusScroll) {
    return this.onFocusRelatedTargetImpl(ev);
  } else {
    if (isButtonHasFirstFocus === true) {
      com.inq.flash.client.chatskins.SkinControl.accessibilityHelp.isButtonHasFirstFocus = false;
    }
    this.saveScrollPosition();
    this.focusScroll = this.curScroll;
    this.saveWindowPosition();
    return this.onFocusImpl(ev, element);
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onFocusRelatedTargetImpl = function(ev) {
  this.hasFocus = true;
  this.FixIPhoneFocusScroll();
  var __this__ = this;
  com.inq.utils.Timer.delay(function() {
    __this__.resizeToViewportFocused();
  }, 100);
  return false;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onFocusImpl = function(ev, element) {
  if (com.inq.utils.Capabilities.isPhone() || com.inq.utils.Capabilities.isIpad() && Application.IsPersistent()) {
    this.focusElement = element;
    this.bindOrientationListener();
    this.focusToken = null;
    var __this__ = this;
    com.inq.utils.Timer.delay(function() {
      __this__.FixIPhoneFocusScroll();
      __this__.resizeToViewport("onFocus");
    }, 0);
  }
  return true;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onTouchStart = function(ev, element) {
  this.saveScrollPosition();
  var date = new Date;
  var time = date.getTime();
  if (time - this.tapTimer < 500) {
    ev.preventDefault();
  }
  this.tapTimer = time;
  return true;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.saveScrollPosition = function() {
  this.curScroll = {X:top.scrollX, Y:top.scrollY};
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onMouseDown = function(ev) {
  return true;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onTouchMove = function(ev) {
  return true;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onTouchEnd = function(ev) {
  top.scrollTo(this.curScroll.X, this.curScroll.Y);
  return true;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.zoomViewport = function(clientWin) {
  if (com.inq.utils.Capabilities.isPhone()) {
    var newZoom = com.inq.stage.ViewportMgr.getChatZoomLevel();
    if (newZoom != Application.initialZoom) {
      Application.initialZoom = newZoom;
      Application.application.setStyle("zoom", "" + Application.initialZoom);
    }
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.resizeToViewport = function(from) {
  if (this.bResizeToViewport || com.inq.flash.client.control.MinimizeManager.minimized) {
    return;
  }
  this.bResizeToViewport = true;
  var clientWin = window.top;
  if (this.hasFocus && (com.inq.utils.Capabilities.isPhone() || com.inq.utils.Capabilities.isIpad())) {
    this.resizeToViewportImpl();
  } else {
    this.zoomViewport(clientWin);
    com.inq.flash.client.chatskins.ScrollMonitor.bindAll();
    try {
      var viewPort = com.inq.utils.Capabilities.getViewport();
      Application.SetArea(viewPort);
      Application.Resize();
      this.bResizeToViewport = false;
    } catch (err) {
      haxe.Log.trace("Error: " + err, {fileName:"ChatTextFocusMonitorImplBase.js", lineNumber:111, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase", methodName:"resizeToViewport"});
    }
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.resizeToViewportImpl = function() {
  var viewPort = com.inq.utils.Capabilities.getViewport();
  Application.SetArea(viewPort);
  Application.Resize();
  this.zoomViewport(clientWin);
  this.scrollTranscriptToEnd(from);
  var __this__ = this;
  com.inq.utils.Timer.delay(function() {
    __this__.FixIPhoneFocusScroll();
  }, 0);
  this.bResizeToViewport = false;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.scrollTranscriptToEnd = function(from) {
  com.inq.utils.Timer.delay(function() {
    com.inq.flash.client.chatskins.SkinControl.cw.scrollToEnd();
  }, 1);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.resizeToViewportFocused = function() {
  var keyboardHeight = this.getKeyboardHeight();
  var clientWin = window.parent;
  if (keyboardHeight) {
    viewPort = com.inq.utils.Capabilities.getViewport();
    viewPort.h = this.adjustFocusedHeight(viewPort.h);
    viewPort.h -= keyboardHeight;
    Application.SetArea(viewPort);
    Application.Resize();
    this.zoomViewport(clientWin);
    if (com.inq.utils.Capabilities.isAndroid()) {
      com.inq.utils.Capabilities.waitFor(com.inq.utils.Capabilities.viewportStopsMoving(800), 200, function() {
        com.inq.flash.client.chatskins.SkinControl.cw.scrollToEnd();
      });
    } else {
      com.inq.utils.Timer.delay(function() {
        com.inq.flash.client.chatskins.SkinControl.cw.scrollToEnd();
      }, 1);
    }
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.adjustFocusedHeight = function(viewportHeight) {
  return viewportHeight;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.getKeyboardHeight = function() {
  var h = this.keyboardHeightArray[com.inq.utils.Capabilities.getOrientation() ? 0 : 1];
  return h;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.setKeyboardHeight = function(keyboardHeight) {
  this.keyboardHeightArray[com.inq.utils.Capabilities.getOrientation() ? 0 : 1] = keyboardHeight;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.bindOrientationListener = function() {
  var clientWin = window.parent;
  com.inq.utils.Capabilities.BindListener(clientWin, "orientationchange", this.onOrientationChange);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.unbindOrientationListener = function() {
  var clientWin = window.parent;
  com.inq.utils.Capabilities.UnbindListener(clientWin, "orientationchange", this.onOrientationChange);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onOrientationChange = function(ev) {
  if (com.inq.ui.Stage.getInstance().getVisible()) {
    if (this.hasFocus) {
      this.clearWindowPosition();
      this.blur();
    } else {
      var __this__ = this;
      com.inq.utils.Timer.delay(function() {
        __this__.resizeToViewport("onOrientationChange:" + ev.type);
      }, 1);
    }
  }
  return true;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onBlurHandlerPhoneIphone = function() {
  this.hasFocus = false;
  this.unbindOrientationListener();
  this.blurToken = null;
  if (!com.inq.flash.client.control.MinimizeManager.minimized) {
    this.clearWindowPosition();
    this.restoreWindowPosition("onBlurHandlerPhoneIphone");
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onPaste = function(evt) {
  haxe.Timer.delay(function() {
    var txt = evt.srcElement;
    txt.value = txt.value.replace(/\n*$/, "");
  }, 10);
  return true;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.isBlurHandlerPending = function() {
  return this.onBlurHandlerScheduleId != null;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.cancelBlurHandler = function() {
  switch(typeof this.onBlurHandlerScheduleId) {
    case "object":
      try {
        this.onBlurHandlerScheduleId.clear();
      } catch (e) {
        clearTimeout(this.onBlurHandlerScheduleId);
      }
      break;
    default:
      clearTimeout(this.onBlurHandlerScheduleId);
      break;
  }
  this.onBlurHandlerScheduleId = null;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onBlur = function(ev) {
  if (ev && ev.relatedTarget) {
    if (com.inq.utils.Capabilities.isPhone()) {
      if (com.inq.utils.Capabilities.isSafari() && ev && ev.relatedTarget && (ev.relatedTarget.nodeName.toUpperCase() == "SELECT" || ev.relatedTarget.nodeName.toUpperCase() == "INPUT") && !ev.relatedTarget.onfocus) {
        ev.relatedTarget.onfocus = com.inq.flash.client.chatskins.ChatTextFocusMonitor.onFocus;
        ev.relatedTarget.onblur = com.inq.flash.client.chatskins.ChatTextFocusMonitor.onBlur;
      }
    }
    return false;
  }
  this.hasFocus = false;
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.isTouched = false;
  return this.onBlurImpl(ev);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.blurFocusedElement = function() {
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onBlurImpl = function(ev) {
  if (com.inq.utils.Capabilities.isIphone()) {
    this.onBlurHandlerScheduleId = com.inq.utils.Capabilities.setDomSafeTimeout(this.onBlurHandlerPhoneIphone, 1);
  } else {
    if (com.inq.utils.Capabilities.isPhone() || com.inq.utils.Capabilities.isIpad() && Application.IsPersistent()) {
      this.unbindOrientationListener();
      this.blurToken = null;
      if (!com.inq.flash.client.control.MinimizeManager.minimized) {
        var __this__ = this;
        com.inq.utils.Timer.delay(function() {
          if (false && this.hasSavedWindowPosition()) {
            __this__.resizeToViewport("onBlur:856");
          } else {
            __this__.resizeToViewport("onBlur:544");
          }
        }, 1);
      }
    } else {
      var k = function() {
        com.inq.flash.client.chatskins.ScrollMonitor.notify();
      };
      k();
    }
  }
  return true;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.isIos6 = function() {
  var agent = com.inq.utils.Capabilities.getUserAgent();
  return agent.indexOf("iPhone OS 6_") != -1;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.prototype.onScrollCallback = function() {
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplVodafoneAppIos = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.call(this);
};
$hxClasses.extend(com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase, com.inq.flash.client.chatskins.ChatTextFocusMonitorImplVodafoneAppIos, "com.inq.flash.client.chatskins.ChatTextFocusMonitorImplVodafoneAppIos");
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplVodafoneAppIos.prototype.resizeToViewport = function(from) {
  if (this.bResizeToViewport || com.inq.flash.client.control.MinimizeManager.minimized) {
    return;
  }
  this.bResizeToViewport = true;
  var clientWin = window.top;
  this.zoomViewport(clientWin);
  com.inq.flash.client.chatskins.ScrollMonitor.bindAll();
  try {
    viewPort = com.inq.utils.Capabilities.getViewport();
    if (this.hasFocus || !com.inq.utils.Capabilities.getOrientation()) {
      viewPort.h = clientWin.innerHeight;
    } else {
      viewPort.h = clientWin.screen.availHeight;
    }
    Application.SetArea(viewPort);
    Application.Resize();
    this.bResizeToViewport = false;
    if (this.hasFocus) {
      com.inq.utils.Timer.delay(function() {
        com.inq.flash.client.chatskins.SkinControl.cw.scrollToEnd();
      }, 100);
    }
  } catch (err) {
    haxe.Log.trace("Error: " + err, {fileName:"ChatTextFocusMonitorImplVodafoneApplos.js", lineNumber:59, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitorImplVodafoneAppIos", methodName:"resizeToViewport"});
    this.bResizeToViewport = false;
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplVodafoneAppIos.prototype.onBlurImpl = function(ev) {
  var stage = com.inq.ui.Stage.getInstance();
  var stageIsVisible = stage.getVisible();
  var clientWin = window.parent;
  if (stageIsVisible) {
    clientWin.scrollTo(0, 0);
  }
  this.onBlurHandlerPhoneIphone();
  return true;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplResize = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.call(this);
};
$hxClasses.extend(com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase, com.inq.flash.client.chatskins.ChatTextFocusMonitorImplResize, "com.inq.flash.client.chatskins.ChatTextFocusMonitorImplResize");
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplResize.prototype.onFocusRelatedTargetImpl = function(ev) {
  this.hasFocus = true;
  return false;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplResize.prototype.onBlurImpl = function(ev) {
  this.unbindOrientationListener();
  this.blurToken = null;
  return true;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplResize.prototype.resizeToViewportImpl = function(from) {
  var clientWin = window.top;
  viewPort = com.inq.utils.Capabilities.getViewport();
  Application.SetArea(viewPort);
  this.zoomViewport(clientWin);
  this.scrollTranscriptToEnd();
  this.bResizeToViewport = false;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplResize.prototype.onFocusImpl = function(ev, element) {
  this.focusElement = element;
  this.bindOrientationListener();
  this.focusToken = null;
  if (this.hasFocus) {
    com.inq.utils.Capabilities.waitFor(com.inq.utils.Capabilities.viewportStopsMoving(800), 200, function() {
      com.inq.flash.client.chatskins.SkinControl.cw.scrollToEnd();
    });
  }
  return true;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplOverlapped = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.call(this);
};
$hxClasses.extend(com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase, com.inq.flash.client.chatskins.ChatTextFocusMonitorImplOverlapped, "com.inq.flash.client.chatskins.ChatTextFocusMonitorImplOverlapped");
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplOverlapped.prototype.resizeToViewport = function(from) {
  if (this.bResizeToViewport || com.inq.flash.client.control.MinimizeManager.minimized) {
    return;
  }
  this.bResizeToViewport = true;
  var clientWin = window.top;
  com.inq.flash.client.chatskins.ScrollMonitor.unbindAll();
  if (this.hasFocus && (com.inq.utils.Capabilities.isPhone() || com.inq.utils.Capabilities.isIpad())) {
    var scrollListener;
    var keyboardHeight = this.getKeyboardHeight();
    if (keyboardHeight == null) {
      com.inq.utils.Capabilities.BindListener(clientWin, "scroll", scrollListener = function(event) {
        viewPort = com.inq.utils.Capabilities.getViewport();
        if (false) {
          top.window.alert("viewport = (" + viewPort.w + "," + viewPort.h + ")");
        }
        if (!com.inq.utils.Capabilities.isIphone()) {
          Application.SetArea(viewPort);
          Application.Resize();
          this.zoomViewport(clientWin);
          if (com.inq.utils.Capabilities.isAndroid()) {
            com.inq.utils.Capabilities.waitFor(com.inq.utils.Capabilities.viewportStopsMoving(800), 200, function() {
              com.inq.flash.client.chatskins.SkinControl.cw.scrollToEnd();
            });
          } else {
            com.inq.utils.Timer.delay(function() {
              com.inq.flash.client.chatskins.SkinControl.cw.scrollToEnd();
            }, 1);
          }
        }
        com.inq.utils.Capabilities.UnbindListener(clientWin, "scroll", scrollListener);
        if (com.inq.utils.Capabilities.isIphone()) {
          var scrollListenerToOrigin;
          com.inq.utils.Capabilities.BindListener(clientWin, "scroll", scrollListenerToOrigin = function(event) {
            com.inq.utils.Capabilities.UnbindListener(clientWin, "scroll", scrollListenerToOrigin);
            keyboardHeight = clientWin.innerHeight - viewPort.h;
            if (keyboardHeight > 0) {
              this.setKeyboardHeight(keyboardHeight);
              this.resizeToViewportFocused();
            } else {
              keyboardHeight = null;
            }
          });
          clientWin.scrollTo(0, 1);
        }
        var __this__ = this;
        com.inq.utils.Timer.delay(function() {
          __this__.FixIPhoneFocusScroll();
        }, 0);
        com.inq.flash.client.chatskins.ScrollMonitor.bindAll();
        this.bResizeToViewport = false;
        return false;
      });
      clientWin.scrollTo(0, clientWin.document.documentElement.offsetHeight);
    } else {
      this.resizeToViewportFocused();
      this.bResizeToViewport = false;
    }
  } else {
    this.zoomViewport(clientWin);
    com.inq.flash.client.chatskins.ScrollMonitor.bindAll();
    try {
      viewPort = com.inq.utils.Capabilities.getViewport();
      if (false) {
        top.window.alert("viewport = (" + viewPort.w + "," + viewPort.h + ")");
      }
      Application.SetArea(viewPort);
      Application.Resize();
      this.bResizeToViewport = false;
    } catch (err) {
      haxe.Log.trace("Error: " + err, {fileName:"ChatTextFocusMonitorImplBase.js", lineNumber:111, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase", methodName:"resizeToViewport"});
      this.bResizeToViewport = false;
    }
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7 = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplOverlapped.call(this);
};
$hxClasses.extend(com.inq.flash.client.chatskins.ChatTextFocusMonitorImplOverlapped, com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7, "com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7");
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.KeyboardTable = {};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.KeyboardTable["568"] = [252, 216, 0, 0];
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.KeyboardTable["320"] = [193, 163, 0, 44];
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.KeyboardTable["736"] = [270, 229, 0, 0];
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.KeyboardTable["414"] = [238, 208, 0, 44];
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.KeyboardTable["667"] = [257, 216, 0, 0];
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.KeyboardTable["375"] = [239, 209, 0, 44];
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.KeyboardTable["480"] = [252, 217, 0, 0];
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.KeyboardTable["768"] = [435, 396, 21, 0];
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.KeyboardTable["1024"] = [347, 308, 21, 0];
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.INDX_PREDICTIVE = 0;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.INDX_NONPREDICTIVE = 1;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.INDX_LANDSCAPE_FUDGEFACTOR = 2;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.INDX_LANDSCAPE_CHROMED_FUDGEFACTOR = 3;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_INITIAL = 0;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS = 1;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLL = 2;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLLTO_NEARTOP = 3;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLLTOBOTTOM = 4;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLLBACK = 5;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLLBACK_TOBOTTOM = 6;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLL_ABSOLUTE = 7;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_COMPLETED = 8;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.INDX_PREDICTIVE = 0;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.INDX_NONPREDICTIVE = 1;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.INDX_LANDSCAPE_FUDGEFACTOR = 2;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.INDX_LANDSCAPE_CHROMED_FUDGEFACTOR = 3;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.realInnerHeight = null;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.soonToHaveFocus = null;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.soonToHaveFocusTime = 0;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.keyboardHeightArray = [null, null];
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.iOS8ViewableHeight = 0;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.iOS8FocusElement = null;
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.setKeyboardHeight = function(keyboardHeight) {
  this.keyboardHeightArray[com.inq.utils.Capabilities.getOrientation() ? 0 : 1] = keyboardHeight;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.getKeyboardHeight = function() {
  return this.keyboardHeightArray[com.inq.utils.Capabilities.getOrientation() ? 0 : 1];
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.FixIPhoneFocusScroll = function() {
  return false;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.blurFocusedElement = function() {
  try {
    this.focusScroll = null;
    if (this.iOS8FocusElement === null) {
      return;
    }
    var __this__ = this;
    com.inq.utils.Timer.delay(function() {
      __this__.iOS8FocusElement.blur();
    }, 100);
  } catch (err) {
    haxe.Log.trace("Error: " + err, {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:371, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitor", methodName:"blurFocusedElement"});
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.resizeToViewport = function(from) {
  if (this.bResizeToViewport || com.inq.flash.client.control.MinimizeManager.minimized) {
    return;
  }
  this.bResizeToViewport = true;
  var clientWin = window.top;
  if (this.hasFocus && (com.inq.utils.Capabilities.isPhone() || com.inq.utils.Capabilities.isIpad())) {
    this.resizeToViewportFocused();
    this.bResizeToViewport = false;
  } else {
    this.zoomViewport(clientWin);
    com.inq.flash.client.chatskins.ScrollMonitor.bindAll();
    try {
      this.viewPort = com.inq.utils.Capabilities.getViewport();
      if (false) {
        top.window.alert("viewport = (" + this.viewPort.w + "," + this.viewPort.h + ")");
      }
      Application.SetArea(this.viewPort);
      Application.Resize();
      this.bResizeToViewport = false;
    } catch (err) {
      haxe.Log.trace("Error: " + err, {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:111, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7", methodName:"resizeToViewport"});
      this.bResizeToViewport = false;
    }
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.resizeToViewportFocused = function() {
  var clientWin = window.parent;
  var oldSize = Application.GetArea();
  this.viewPort = com.inq.utils.Capabilities.getViewport();
  this.viewPort.h = this.iOS8ViewableHeight;
  if (false) {
    top.window.alert("viewport = (" + viewPort.w + "," + viewPort.h + ")");
  }
  haxe.Log.trace("viewport height: " + this.viewPort.h, {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:1239, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7", methodName:"resizeToViewportFocused"});
  Application.SetArea(this.viewPort);
  Application.Resize();
  this.zoomViewport(clientWin);
  if (this.viewPort.h != oldSize.h || this.viewPort.w != oldSize.w) {
    com.inq.utils.Timer.delay(function() {
      com.inq.flash.client.chatskins.SkinControl.cw.scrollToEnd();
    }, 1);
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.calculateViewableArea = function() {
  var kb = 0;
  var vph = 0;
  var isPortrait = com.inq.utils.Capabilities.getOrientation();
  var iPhone = com.inq.utils.Capabilities.isIphone();
  var clientWin = window.top;
  var vals = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.KeyboardTable["" + com.inq.utils.Capabilities.getScreenHeight()];
  if (!vals) {
    if (iPhone) {
      vals = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.KeyboardTable[isPortrait ? "736" : "414"];
    } else {
      vals = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.KeyboardTable[isPortrait ? "1024" : "768"];
    }
  }
  var type = this.iOS8FocusElement.type.toString().toUpperCase();
  var ix = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.INDX_PREDICTIVE;
  var oh = 0;
  oh = vals[com.inq.utils.Capabilities.isChromed() ? com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.INDX_LANDSCAPE_CHROMED_FUDGEFACTOR : com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.INDX_LANDSCAPE_FUDGEFACTOR];
  var fudge = iPhone && !isPortrait ? oh : 0;
  if (type === "PASSWORD") {
    ix = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.INDX_NONPREDICTIVE;
  }
  if (com.inq.utils.Capabilities.isSafariVersionPrior8()) {
    ix = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.INDX_NONPREDICTIVE;
  }
  kb = vals[ix] + fudge;
  vph = this.realInnerHeight - kb;
  return vph;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.onScrollCallback = function() {
  try {
    var clientWin = window.parent;
    var keyboardHeight = 0;
    var bottomScroll = Math.max(clientWin.document.body.scrollHeight, clientWin.document.body.offsetHeight, clientWin.document.documentElement.clientHeight, clientWin.document.documentElement.scrollHeight, clientWin.document.documentElement.offsetHeight);
    haxe.Log.trace("State: " + this.scrollState, {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:380, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitor", methodName:"onScrollCallback"});
    if (com.inq.flash.client.control.MinimizeManager.minimized) {
      return;
    }
    var stageVisible = com.inq.ui.Stage.getInstance().getVisible();
    if (!stageVisible) {
      return;
    }
    switch(this.scrollState) {
      case undefined:
        haxe.Log.trace("State is undefined!!!: " + this.scrollState, {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:391, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitor", methodName:"onScrollCallback"});
        break;
      case com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS:
        this.scrollState = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLL;
        var keyboardHeight = this.getKeyboardHeight();
        if (!keyboardHeight) {
          this.scrollState = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLLTO_NEARTOP;
          haxe.Log.trace("State: " + this.scrollState, {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:402, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitor", methodName:"onScrollCallback"});
          this.viewPort = com.inq.utils.Capabilities.getViewport();
          com.inq.utils.Timer.delay(function() {
            clientWin.scrollTo(0, 1);
          }, 1);
        } else {
          haxe.Log.trace("Keyboard height: " + keyboardHeight, {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:142, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7", methodName:"uponScrolliOS7"});
          this.scrollState = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLLBACK_TOBOTTOM;
          haxe.Log.trace("State: " + this.scrollState, {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:408, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitor", methodName:"onScrollCallback"});
          com.inq.utils.Timer.delay(function() {
            clientWin.scrollTo(0, bottomScroll);
          }, 1);
        }
        break;
      case com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLLTO_NEARTOP:
        this.viewPort.h = clientWin.innerHeight;
        this.scrollState = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLLTOBOTTOM;
        if (!this.realInnerHeight) {
          this.realInnerHeight = clientWin.innerHeight;
        }
        com.inq.utils.Timer.delay(function() {
          clientWin.scrollTo(0, bottomScroll);
        }, 1);
        break;
      case com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLLBACK:
        this.scrollState = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLL_ABSOLUTE;
        this.iOS8ViewableHeight = this.calculateViewableArea();
        com.inq.utils.Timer.delay(function() {
          clientWin.scrollTo(0, bottomScroll);
        }, 1);
        break;
      case com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLLBACK_TOBOTTOM:
      ;
      case com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLL_ABSOLUTE:
        this.resizeToViewportFocused();
        this.saveScrollPosition();
        this.focusScroll = this.curScroll;
        break;
      case com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLLTOBOTTOM:
        keyboardHeight = 0 - (clientWin.innerHeight - this.viewPort.h);
        this.iOS8ViewableHeight = this.calculateViewableArea();
        this.scrollState = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLLBACK;
        com.inq.utils.Timer.delay(function() {
          clientWin.scrollTo(0, 0);
        }, 1);
        break;
      case com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_INITIAL:
        if (this.viewPort !== null && !this.hasFocus && this.viewPort.h !== clientWin.innerHeight) {
          this.viewPort.h = clientWin.innerHeight;
          this.resizeToViewport("Fix Height");
        }
        break;
      default:
      ;
    }
  } catch (err) {
    haxe.Log.trace("Error: " + err, {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:154, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7", methodName:"uponScrolliOS8"});
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.onBlurImpl = function(ev, element) {
  this.scrollState = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_INITIAL;
  return com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.__super__.prototype.onBlurImpl.call(this, ev, element);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.onFocusImpl = function(ev, element) {
  this.scrollState = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS;
  this.iOS8FocusElement = element;
  if (!("orientation" in window)) {
    com.inq.utils.Timer.delay(function() {
      var clientWin = window.parent;
      clientWin.scrollBy(0, 1);
    }, 10);
  }
  return com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.__super__.prototype.onFocusImpl.call(this, ev, element);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.onFocusRelatedTargetImpl = function(ev) {
  this.hasFocus = true;
  var __this__ = this;
  com.inq.utils.Timer.delay(function() {
    window.top.scrollTo(__this__.focusScroll.X, __this__.focusScroll.Y);
  }, 100);
  ev.preventDefault();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.onOrientationChange = function(ev) {
  this.blurFocusedElement();
  var clientWin = window.parent;
  clientWin.scrollTo(0, 0);
  this.realInnerHeight = null;
  return com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.__super__.prototype.onOrientationChange.call(this, ev);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.prototype.onTouchStart = function(ev, element) {
  haxe.Log.trace("onTouchStart: ", {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:465, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitor", methodName:"onTouchStart"});
  var el = ev.target;
  if (this.hasFocus && el && el.id.indexOf("btnCloseChat") == -1) {
    haxe.Log.trace("target element: " + element.id, {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:465, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitor", methodName:"onTouchStart"});
    try {
      var possibleButton = el.container;
      if (possibleButton) {
        if (js.Boot.__instanceof(possibleButton, com.inq.ui.Button)) {
          ev.preventDefault();
          possibleButton.softClick();
          haxe.Log.trace("softClick: ", {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:473, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitor", methodName:"onTouchStart"});
        } else {
          haxe.Log.trace("Not a button: ", {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:479, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitor", methodName:"onTouchStart"});
          this.soonToHaveFocus = possibleButton;
          this.soonToHaveFocusTime = (new Date).getTime() + 500;
        }
      } else {
        haxe.Log.trace("Not a Button: ", {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:485, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitor", methodName:"onTouchStart"});
        this.soonToHaveFocus = null;
        this.soonToHaveFocusTime = (new Date).getTime() + 500;
      }
    } catch (err) {
      haxe.Log.trace("Error: " + err, {fileName:"ChatTextFocusMonitorImplIphoneSafari7.js", lineNumber:485, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitor", methodName:"onTouchStart"});
    }
  }
  if (this.scrollState == com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_SCROLL_ABSOLUTE) {
    this.scrollState = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_FOCUS_COMPLETED;
  }
  return com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.__super__.prototype.onTouchStart.call(this, ev);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari8 = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari8.__super__.call(this);
};
$hxClasses.extend(com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7, com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari8, "com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari8");
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari8.prototype.onBlurImpl = function(ev, element) {
  var stage = com.inq.ui.Stage.getInstance();
  var stageIsVisible = stage.getVisible();
  var clientWin = window.parent;
  if (stageIsVisible && (com.inq.utils.Capabilities.isSafariVersion8() || com.inq.utils.Capabilities.isSafariVersion9())) {
    clientWin.scrollTo(0, 0);
  }
  this.scrollState = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7.STATE_INITIAL;
  return com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari8.__super__.prototype.onBlurImpl.call(this, ev, element);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari8.prototype.onOrientationChange = function(ev) {
  this.blurFocusedElement();
  var clientWin = window.parent;
  var stage = com.inq.ui.Stage.getInstance();
  var stageIsVisible = stage.getVisible();
  if (stageIsVisible) {
    clientWin.scrollTo(0, 0);
  }
  return com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari8.__super__.prototype.onOrientationChange.call(this, ev);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari9 = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari9.__super__.call(this);
};
$hxClasses.extend(com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari8, com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari9, "com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari9");
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplCRiOS8 = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplCRiOS8.__super__.call(this);
};
$hxClasses.extend(com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari8, com.inq.flash.client.chatskins.ChatTextFocusMonitorImplCRiOS8, "com.inq.flash.client.chatskins.ChatTextFocusMonitorImplCRiOS8");
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplCRiOS8.prototype.resizeToViewportFocused = function() {
  var clientWin = window.parent;
  var oldSize = Application.GetArea();
  this.viewPort = com.inq.utils.Capabilities.getViewport();
  if (false) {
    top.window.alert("viewport = (" + viewPort.w + "," + viewPort.h + ")");
  }
  haxe.Log.trace("viewport height: " + this.viewPort.h, {fileName:"ChatTextFocusMonitorImplCRiOS8.js", lineNumber:1239, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitorImplCRiOS8", methodName:"resizeToViewportFocused"});
  Application.SetArea(this.viewPort);
  this.zoomViewport(clientWin);
  if (this.viewPort.h != oldSize.h || this.viewPort.w != oldSize.w) {
    com.inq.utils.Timer.delay(function() {
      com.inq.flash.client.chatskins.SkinControl.cw.scrollToEnd();
      Application.Resize();
    }, 100);
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplCRiOS8.prototype.onFocusImpl = function(ev, element) {
  var retVal = com.inq.flash.client.chatskins.ChatTextFocusMonitorImplCRiOS8.__super__.prototype.onFocusImpl.call(this, ev, element);
  this.onScrollCallback();
  return retVal;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneChrome = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplOverlapped.call(this);
};
$hxClasses.extend(com.inq.flash.client.chatskins.ChatTextFocusMonitorImplOverlapped, com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneChrome, "com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneChrome");
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplOverlapped.call(this);
};
$hxClasses.extend(com.inq.flash.client.chatskins.ChatTextFocusMonitorImplOverlapped, com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari, "com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari");
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplAndroid = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplResize.call(this);
};
$hxClasses.extend(com.inq.flash.client.chatskins.ChatTextFocusMonitorImplResize, com.inq.flash.client.chatskins.ChatTextFocusMonitorImplAndroid, "com.inq.flash.client.chatskins.ChatTextFocusMonitorImplAndroid");
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplAndroid.prototype.FixIPhoneFocusScroll = function() {
  return false;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplResize.call(this);
};
$hxClasses.extend(com.inq.flash.client.chatskins.ChatTextFocusMonitorImplResize, com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone, "com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone");
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone.prototype.bindListeners = function() {
  var stageDiv = com.inq.ui.Stage.getStageElement();
  com.inq.utils.Capabilities.BindListener(stageDiv, "mousedown", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onMouseDown);
  com.inq.utils.Capabilities.BindListener(stageDiv, "touchstart", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onTouchStart);
  com.inq.utils.Capabilities.BindListener(stageDiv, "touchend", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onTouchEnd);
  com.inq.utils.Capabilities.BindListener(stageDiv, "touchmove", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onTouchMove);
  ["txtInput", "emailInput"].forEach(function(inputName) {
    var container = Application.application.getTextInput(inputName);
    if (!container) {
      return;
    }
    var input = container.getInput();
    if (input) {
      com.inq.utils.Capabilities.BindListener(input, "touchstart", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onFocus);
      com.inq.utils.Capabilities.BindListener(input, "activate", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onFocus);
      com.inq.utils.Capabilities.BindListener(input, "deactivate", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onBlur);
      com.inq.utils.Capabilities.BindListener(input, "paste", com.inq.flash.client.chatskins.ChatTextFocusMonitor.onPaste);
    }
  });
  var txtInput = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
  if (txtInput != null) {
    txtInput.setFocus();
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone.prototype.resizeToViewport = function(from) {
  if (this.bResizeToViewport || com.inq.flash.client.control.MinimizeManager.minimized) {
    return;
  }
  this.bResizeToViewport = true;
  var clientWin = window.top;
  if (this.hasFocus) {
    this.resizeToViewportImpl();
  } else {
    this.zoomViewport(clientWin);
    com.inq.flash.client.chatskins.ScrollMonitor.bindAll();
    try {
      var viewPort = com.inq.utils.Capabilities.getViewport();
      Application.SetArea(viewPort);
      Application.Resize();
      this.bResizeToViewport = false;
    } catch (err) {
      haxe.Log.trace("Error: " + err, {fileName:"ChatTextFocusMonitorImplBase.js", lineNumber:111, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase", methodName:"resizeToViewport"});
    }
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone.prototype.onMouseDown = function(ev) {
  if (com.inq.flash.client.chatskins.ChatTextFocusMonitor.HasFocus() && ev.target != this.focusElement) {
    ev.preventDefault();
    ev.stopPropagation();
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone.prototype.onTouchStart = function(ev, element) {
  if (this.hasFocus) {
    var possibleButton = ev.target.container;
    if (possibleButton) {
      if (js.Boot.__instanceof(possibleButton, com.inq.ui.Button)) {
        ev.preventDefault();
        ev.stopPropagation();
        possibleButton.softClick();
        this.keepFocus = true;
      }
    } else {
      ev.preventDefault();
      ev.stopPropagation();
    }
  }
  return com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone.__super__.prototype.onTouchStart.call(this, ev);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone.prototype.onTouchMove = function(ev) {
  this.keepFocus = this.hasFocus;
  ev.preventDefault();
  ev.stopPropagation();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone.prototype.onTouchEnd = function(ev) {
  if (this.keepFocus) {
    this.keepFocus = false;
    if (this.focusElement) {
      var self = this;
      setTimeout(function() {
        self.focusElement.focus();
      }, 1);
    }
  } else {
    if (this.hasFocus) {
      var self = this;
      if (this.focusElement != ev.target) {
        setTimeout(function() {
          self.focusElement.blur();
        }, 1);
      } else {
        setTimeout(function() {
          self.focusElement.focus();
        }, 1);
      }
    }
  }
  return com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone.__super__.prototype.onTouchEnd.call(this, ev);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone.prototype.onFocusImpl = function(ev, element) {
  this.focusElement = element;
  this.bindOrientationListener();
  this.focusToken = null;
  var self = this;
  com.inq.utils.Capabilities.waitFor(com.inq.utils.Capabilities.viewportStopsMoving(500), 200, function() {
    self.FixIPhoneFocusScroll();
    self.resizeToViewport("ChatTextFocusMonitorImplWindowsPhone.onFocusImpl");
  }, 15, 3);
  return true;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone.prototype.onBlurImpl = function(ev) {
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplResize.prototype.onBlurImpl.apply(this, arguments);
  var self = this;
  com.inq.utils.Capabilities.waitFor(com.inq.utils.Capabilities.viewportStopsMoving(500), 200, function() {
    self.resizeToViewport("ChatTextFocusMonitorImplWindowsPhone.onBlurImpl");
  }, 15, 3);
  return true;
};
com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone.prototype.keepFocus = false;
com.inq.flash.client.chatskins.ChatTextFocusMonitor = function() {
};
$hxClasses.registerClass(com.inq.flash.client.chatskins.ChatTextFocusMonitor, "com.inq.flash.client.chatskins.ChatTextFocusMonitor");
com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl = null;
com.inq.flash.client.chatskins.ChatTextFocusMonitor._isCriOS8 = /(iPhone|iPod|iPad).*(CPU\s(iPhone|iPod|iPad)\sOS\s(6|7|8|9)_).*AppleWebKit?.*CriOS/i.test(navigator.userAgent);
com.inq.flash.client.chatskins.ChatTextFocusMonitor.init = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.closing = false;
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().init();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl = function() {
  if (!!com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl) {
    return com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl;
  } else {
    var agent = com.inq.utils.Capabilities.getUserAgent();
    if (com.inq.utils.Capabilities.isSafariVersion9()) {
      com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl = new com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari9;
    } else {
      if (com.inq.utils.Capabilities.isSafariVersionPrior8()) {
        com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl = new com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari7;
      } else {
        if (com.inq.utils.Capabilities.isSafariVersion8()) {
          com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl = new com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari8;
        } else {
          if (/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(agent)) {
            com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl = new com.inq.flash.client.chatskins.ChatTextFocusMonitorImplVodafoneAppIos;
          } else {
            if (com.inq.utils.Capabilities.isChromeiOS8()) {
              com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl = new com.inq.flash.client.chatskins.ChatTextFocusMonitorImplCRiOS8;
            } else {
              if (com.inq.utils.Capabilities.isWindowsPhone()) {
                com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl = new com.inq.flash.client.chatskins.ChatTextFocusMonitorImplWindowsPhone;
              } else {
                if (/(iPhone|iPod|iPad).*AppleWebKit?.*CriOS/i.test(agent)) {
                  com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl = new com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneChrome;
                } else {
                  if (/(iPhone|iPod|iPad).*AppleWebKit(?!.*CriOS).*Safari/i.test(agent)) {
                    com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl = new com.inq.flash.client.chatskins.ChatTextFocusMonitorImplIphoneSafari;
                  } else {
                    if (/android/i.test(agent)) {
                      com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl = new com.inq.flash.client.chatskins.ChatTextFocusMonitorImplAndroid;
                    } else {
                      com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl = new com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return com.inq.flash.client.chatskins.ChatTextFocusMonitor.impl;
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.Close = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.closing = true;
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().Close();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.blur = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().blur();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.HasFocus = function() {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().HasFocus();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.getFocusElement = function() {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().getFocusElement();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.blurFocusedElement = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().blurFocusedElement();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.scrollToPrevious = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().scrollToPrevious();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.saveWindowPositionForce = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().saveWindowPositionForce();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.saveWindowPosition = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().saveWindowPosition();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.clearWindowPosition = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().clearWindowPosition();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.hasSavedWindowPosition = function() {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().hasSavedWindowPosition();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.restoreWindowPosition = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().restoreWindowPosition();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.FixIPhoneFocusScroll = function() {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().FixIPhoneFocusScroll();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.onFocus = function(ev) {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().onFocus(ev, this);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.onTouchStart = function(ev) {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().onTouchStart(ev, this);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.onMouseDown = function(ev) {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().onMouseDown(ev, this);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.onTouchMove = function(ev) {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().onTouchMove(ev, this);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.onTouchEnd = function(ev) {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().onTouchEnd(ev, this);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.resizeToViewportIphone = function(from) {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().resizeToViewportIphone();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.resizeToViewportLegacy = function(from) {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().resizeToViewportLegacy(from);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.resizeToViewport = function(from) {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().resizeToViewport(from);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.getKeyboardHeight = function() {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().getKeyboardHeight();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.setKeyboardHeight = function(keyboardHeight) {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().setKeyboardHeight(keyboardHeight);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.onOrientationChange = function(ev) {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().onOrientationChange(ev, this);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.onBlurHandlerPhoneIphone = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().onBlurHandlerPhoneIphone();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.onPaste = function(ev) {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().onPaste(ev, this);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.isBlurHandlerPending = function() {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().isBlurHandlerPending();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.cancelBlurHandler = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().cancelBlurHandler();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.onBlur = function(ev) {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().onBlur(ev, this);
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.isIos6 = function() {
  return com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().isIos6();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.onScrollCallback = function() {
  try {
    com.inq.flash.client.chatskins.ChatTextFocusMonitor.getImpl().onScrollCallback();
  } catch (err) {
    haxe.Log.trace("Error: " + err, {fileName:"ChatTextFocusMonitor.js", lineNumber:167, className:"com.inq.flash.client.chatskins.ChatTextFocusMonitor", methodName:"onScrollCallback"});
  }
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.isVersion8 = function() {
  return com.inq.utils.Capabilities.isSafariVersion8();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.isVersionPrior8 = function() {
  return com.inq.utils.Capabilities.isSafariVersionPrior8();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.isCriOS8 = function() {
  return com.inq.utils.Capabilities.isChromeiOS8();
};
com.inq.flash.client.chatskins.ChatTextFocusMonitor.SAFARI_KEYBOARD_HEIGHT_PORTRAIT = 260;
com.inq.flash.client.chatskins.ChatTextFocusMonitor.SAFARI_KEYBOARD_HEIGHT_LANDSCAPE = 162;
com.inq.flash.client.chatskins.CoBrowseMgr = function() {
};
com.inq.flash.client.chatskins.CoBrowseMgr.init = function() {
  com.inq.flash.client.chatskins.CoBrowseMgr.customerAcceptsCobrowse = _getLocalizedMessage("customerAcceptsCobrowse");
  com.inq.flash.client.chatskins.CoBrowseMgr.customerDeclinesCobrowse = _getLocalizedMessage("customerDeclinesCobrowse");
  com.inq.flash.client.chatskins.CoBrowseMgr.customerAcceptsSharedControl = _getLocalizedMessage("customerAcceptsSharedControl");
  com.inq.flash.client.chatskins.CoBrowseMgr.customerDeclinesSharedControl = _getLocalizedMessage("customerDeclinesSharedControl");
  com.inq.flash.client.chatskins.CoBrowseMgr.customerEndCobrowseSession = _getLocalizedMessage("customerEndCobrowseSession");
  com.inq.flash.client.chatskins.CoBrowseMgr.agentEndCobrowseSession = _getLocalizedMessage("agentEndCobrowseSession");
  com.inq.flash.client.chatskins.CoBrowseMgr.customerPerformanceTest = _getLocalizedMessage("customerPerformanceTest");
  com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseInitializationFail = _getLocalizedMessage("cobrowseInitializationFail");
  com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseUnexpectedFail = _getLocalizedMessage("cobrowseUnexpectedFail");
  com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseSuppressed = _getLocalizedMessage("cobrowseSuppressed");
  com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseNotAccessMainWindow = _getLocalizedMessage("cobrowseNotAccessMainWindow");
  com.inq.flash.client.chatskins.CoBrowseMgr.notSupportedBrowser = _getLocalizedMessage("notSupportedBrowser");
  com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseTestSuccess = com.inq.utils.Util.getConfig("cobrowseTestSuccessMsg", _getLocalizedMessage("cobrowseTestSuccess"));
  com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseTestFail = com.inq.utils.Util.getConfig("cobrowseTestFailMsg", _getLocalizedMessage("cobrowseTestFail"));
  com.inq.flash.client.control.FlashPeer.setCiFunction("ciAcceptCobInv", com.inq.flash.client.chatskins.CoBrowseMgr.acceptCobInv);
  com.inq.flash.client.control.FlashPeer.setCiFunction("ciDeclineCobInv", com.inq.flash.client.chatskins.CoBrowseMgr.declineCobInv);
  com.inq.flash.client.control.FlashPeer.setCiFunction("ciAcceptCobShareInv", com.inq.flash.client.chatskins.CoBrowseMgr.acceptCobShareInv);
  com.inq.flash.client.control.FlashPeer.setCiFunction("ciDeclineCobShareInv", com.inq.flash.client.chatskins.CoBrowseMgr.declineCobShareInv);
  com.inq.flash.client.control.FlashPeer.setCiFunction("ciAcceptCobAndShareInv", com.inq.flash.client.chatskins.CoBrowseMgr.acceptCobAndShareInv);
  com.inq.utils.Util.publish("com.inq.flash.client.chatskins.CoBrowseMgr.stopCob", com.inq.flash.client.chatskins.CoBrowseMgr.stopCob);
  com.inq.utils.Util.publish("com.inq.flash.client.chatskins.CoBrowseMgr.sendCobrowseEnded", com.inq.flash.client.chatskins.CoBrowseMgr.sendCobrowseEnded);
  com.inq.utils.Util.publish("com.inq.flash.client.chatskins.CoBrowseMgr.setFocusOnChatInputField", com.inq.flash.client.chatskins.CoBrowseMgr.setFocusOnChatInputField);
  com.inq.flash.client.chatskins.CoBrowseMgr.cobEndButtonID = com.inq.utils.Util.getConfig("cobEndButtonID", "tcChat_cobend");
  com.inq.flash.client.chatskins.CoBrowseMgr.btnCobEndHTML = com.inq.utils.Util.getConfig("cobEndButton", "");
  function _getLocalizedMessage(key) {
    return com.inq.flash.client.control.FlashPeer.getLocalizedMessage(key);
  }
};
com.inq.flash.client.chatskins.CoBrowseMgr.ariaCobStart = function() {
  com.inq.flash.client.chatskins.CoBrowseMgr.addCobEndButton();
  if (com.inq.flash.client.control.MinimizeManager.minimized !== true) {
    com.inq.flash.client.chatskins.SkinControl.hideModalWindowDivs(false);
  }
};
com.inq.flash.client.chatskins.CoBrowseMgr.ariaCobEnd = function() {
  com.inq.flash.client.chatskins.CoBrowseMgr.removeCobEndButton();
  if (com.inq.flash.client.control.MinimizeManager.minimized !== true) {
    com.inq.flash.client.chatskins.SkinControl.hideModalWindowDivs(true);
  }
};
com.inq.flash.client.chatskins.CoBrowseMgr.addCobEndButton = function() {
  if (com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat() && document.getElementById(com.inq.flash.client.chatskins.CoBrowseMgr.cobEndButtonID) == null) {
    var btnCobEnd = document.createElement("div");
    btnCobEnd.innerHTML = com.inq.flash.client.chatskins.CoBrowseMgr.btnCobEndHTML;
    var chatDiv = document.getElementById("chat");
    if (chatDiv) {
      chatDiv.appendChild(btnCobEnd);
    }
  }
  com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", com.inq.utils.Util.getConfig("cobSessionStartMsg", "You're being assisted"), com.inq.flash.client.chatskins.ChatTextArea.SYSTEM);
};
com.inq.flash.client.chatskins.CoBrowseMgr.removeCobEndButton = function() {
  var cobEnd = document.getElementById(com.inq.flash.client.chatskins.CoBrowseMgr.cobEndButtonID);
  if (cobEnd != null) {
    try {
      var div_cobend = cobEnd.parentNode;
      div_cobend.parentNode.removeChild(div_cobend);
    } catch (e) {
      cobEnd.parentNode.style.display = "none";
    }
  }
};
com.inq.flash.client.chatskins.CoBrowseMgr.stopCob = function() {
  if (Inq["CBC"]) {
    Inq["CBC"].stop();
    if (com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
      com.inq.flash.client.chatskins.SkinControl.setFocusOnInputField();
    }
  }
};
com.inq.flash.client.chatskins.CoBrowseMgr.setFocusOnChatInputField = function() {
  if (!(com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat() && com.inq.utils.Util.isIE)) {
    com.inq.flash.client.chatskins.SkinControl.setFocusOnInputField();
  }
};
com.inq.flash.client.chatskins.CoBrowseMgr.performanceTest = function(execTime) {
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessageQuietly(com.inq.flash.client.chatskins.CoBrowseMgr.customerPerformanceTest + " " + execTime + "ms", com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_PERFORMANCE_TEST);
};
com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseFailHandler = function(failMsg) {
  if (!failMsg) {
    failMsg = com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseUnexpectedFail;
  }
  if (com.inq.flash.client.control.FlashPeer.isCobrowseEnagaged()) {
    com.inq.flash.client.control.FlashPeer.endCob();
  }
  var sentMsg = false;
  if (com.inq.flash.client.chatskins.SkinControl.getApplicationController().isConnected()) {
    com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessageQuietly(failMsg, com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_END);
    sentMsg = true;
  }
  return sentMsg;
};
com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseSuppressedPage = function() {
  if (!com.inq.flash.client.chatskins.SkinControl.getApplicationController().isConnected()) {
    return false;
  } else {
    com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessageQuietly(com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseSuppressed, com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_SUPPRESSED);
    return true;
  }
};
com.inq.flash.client.chatskins.CoBrowseMgr.getCobrowseEnableHighlight = function() {
  try {
    return Inq["cobrowseEnableHighlight"];
  } catch (e) {
    haxe.Log.trace(e, {fileName:"CobrowseMgr.js", lineNumber:160, className:"com.inq.flash.client.chatskins.CoBrowseMgr", methodName:"getCobrowseEnableHighlight"});
    return true;
  }
};
com.inq.flash.client.chatskins.CoBrowseMgr.showCobBanner = function() {
  if (!com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat() && Inq["CBC"]) {
    Inq["CBC"]["showBanner"]();
    window.setTimeout(com.inq.flash.client.chatskins.CoBrowseMgr.focusCobEndBtn, 500);
  }
};
com.inq.flash.client.chatskins.CoBrowseMgr.focusCobEndBtn = function() {
  var btnCobend = window.parent.document.getElementById("tcChat_cobend");
  if (btnCobend != null) {
    btnCobend.focus();
  }
};
com.inq.flash.client.chatskins.CoBrowseMgr.acceptCobInv = function(startPerformanceTest) {
  if (com.inq.flash.client.control.FlashPeer.isCobrowseEnagaged()) {
    return;
  }
  if (!com.inq.flash.client.chatskins.CoBrowseMgr.isSupportedBrowser()) {
    return;
  }
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessage(com.inq.flash.client.chatskins.CoBrowseMgr.customerAcceptsCobrowse, com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_ACCEPT, com.inq.flash.client.chatskins.CoBrowseMgr.getCobrowseEnableHighlight());
  com.inq.flash.client.chatskins.CoBrowseMgr.showCobBanner();
  com.inq.flash.client.control.FlashPeer.acceptCobInvSafe(startPerformanceTest);
};
com.inq.flash.client.chatskins.CoBrowseMgr.declineCobInv = function() {
  if (com.inq.flash.client.control.FlashPeer.isCobrowseEnagaged()) {
    return;
  }
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessage(com.inq.flash.client.chatskins.CoBrowseMgr.customerDeclinesCobrowse, com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_DECLINE);
};
com.inq.flash.client.chatskins.CoBrowseMgr.acceptCobAndShareInv = function(startPerformanceTest) {
  if (com.inq.flash.client.control.FlashPeer.isCobrowseEnagaged() || com.inq.flash.client.control.FlashPeer.isCobrowseSharedControl()) {
    return;
  }
  if (!com.inq.flash.client.chatskins.CoBrowseMgr.isSupportedBrowser()) {
    return;
  }
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessage(com.inq.flash.client.chatskins.CoBrowseMgr.customerAcceptsCobrowse, com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_ACCEPT);
  com.inq.flash.client.chatskins.CoBrowseMgr.showCobBanner();
  com.inq.flash.client.control.FlashPeer.acceptCobAndShareInv(startPerformanceTest);
};
com.inq.flash.client.chatskins.CoBrowseMgr.acceptCobShareInv = function(startPerformanceTest) {
  if (com.inq.flash.client.control.FlashPeer.isCobrowseSharedControl()) {
    return;
  }
  if (!com.inq.flash.client.chatskins.CoBrowseMgr.isSupportedBrowser()) {
    return;
  }
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessage(com.inq.flash.client.chatskins.CoBrowseMgr.customerAcceptsSharedControl, com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_ACCEPT_SHARE);
  com.inq.flash.client.control.FlashPeer.acceptCobShareInv(startPerformanceTest);
};
com.inq.flash.client.chatskins.CoBrowseMgr.declineCobShareInv = function() {
  if (com.inq.flash.client.control.FlashPeer.isCobrowseSharedControl()) {
    return;
  }
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessage(com.inq.flash.client.chatskins.CoBrowseMgr.customerDeclinesSharedControl, com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_DECLINE_SHARE);
};
com.inq.flash.client.chatskins.CoBrowseMgr.endCob = function() {
  if (!com.inq.flash.client.control.FlashPeer.isCobrowseEnagaged()) {
    return;
  }
  com.inq.flash.client.chatskins.CoBrowseMgr.sendCobrowseEnded();
  com.inq.flash.client.control.FlashPeer.endCob();
};
com.inq.flash.client.chatskins.CoBrowseMgr.agentEndsCob = function() {
  if (!com.inq.flash.client.control.FlashPeer.isCobrowseEnagaged()) {
    return;
  }
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessage(com.inq.flash.client.chatskins.CoBrowseMgr.agentEndCobrowseSession, com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_END);
  com.inq.flash.client.control.FlashPeer.endCob();
};
com.inq.flash.client.chatskins.CoBrowseMgr.sendCobrowseEnded = function() {
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessage(com.inq.flash.client.chatskins.CoBrowseMgr.customerEndCobrowseSession, com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_END);
};
com.inq.flash.client.chatskins.CoBrowseMgr.sendMessageQuietly = function(message) {
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessageQuietly(message, com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_ACCEPT);
};
com.inq.flash.client.chatskins.CoBrowseMgr.reportIssuePersistAccessToMain = function() {
  var result = true;
  if (com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
    try {
      if (window.parent.opener && window.parent.opener.inqFrame) {
        result = true;
      } else {
        result = false;
      }
    } catch (e) {
      result = false;
    }
  }
  if (result === false) {
    com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessageQuietly(com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseNotAccessMainWindow, com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_ISSUE_PERSIST_ACCESS_TO_MAIN);
  }
};
com.inq.flash.client.chatskins.CoBrowseMgr.isSupportedBrowser = function() {
  var result = true;
  try {
    var browInfo = com.inq.flash.client.control.FlashPeer.getBrowserTypeAndVersion();
    var browName = browInfo[0];
    var browVer = browInfo[1];
    if (browName === "MSIE" && parseInt(browVer.split(".")[0]) <= 7) {
      result = false;
    }
  } catch (e) {
  }
  if (result === false) {
    com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessageQuietly(com.inq.flash.client.chatskins.CoBrowseMgr.notSupportedBrowser, com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_END);
  }
  return result;
};
com.inq.flash.client.chatskins.CoBrowseMgr.customerAcceptsCobrowse = null;
com.inq.flash.client.chatskins.CoBrowseMgr.customerDeclinesCobrowse = null;
com.inq.flash.client.chatskins.CoBrowseMgr.customerAcceptsSharedControl = null;
com.inq.flash.client.chatskins.CoBrowseMgr.customerDeclinesSharedControl = null;
com.inq.flash.client.chatskins.CoBrowseMgr.customerEndCobrowseSession = null;
com.inq.flash.client.chatskins.CoBrowseMgr.agentEndCobrowseSession = null;
com.inq.flash.client.chatskins.CoBrowseMgr.customerPerformanceTest = null;
com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseInitializationFail = null;
com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseUnexpectedFail = null;
com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseSuppressed = null;
com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseTestSuccess = null;
com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseTestFail = null;
com.inq.flash.client.chatskins.EmailMgr = function() {
};
$hxClasses["com.inq.flash.client.chatskins.EmailMgr"] = com.inq.flash.client.chatskins.EmailMgr;
com.inq.flash.client.chatskins.EmailMgr.__name__ = ["com", "inq", "flash", "client", "chatskins", "EmailMgr"];
com.inq.flash.client.chatskins.EmailMgr._init = function() {
  var win = window;
  return true;
};
com.inq.flash.client.chatskins.EmailMgr.init = function() {
  com.inq.flash.client.chatskins.EmailMgr.emailButtonCap = Application.application.getButton("btnEmailCapture");
  com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap = Application.application.getMxmlItem("emailCapture");
  com.inq.flash.client.chatskins.EmailMgr.emailButton = Application.application.getButton("btnEmail");
  com.inq.flash.client.chatskins.EmailMgr.emailCanvas = Application.application.getMxmlItem("email");
  com.inq.flash.client.chatskins.EmailMgr.chatCanvas = Application.application.getMxmlItem("chat");
  com.inq.flash.client.chatskins.EmailMgr.tyCanvas = Application.application.getMxmlItem("thankYou");
  com.inq.flash.client.chatskins.EmailMgr.focusEmailField = com.inq.utils.Util.getConfig("focusEmailField", false);
  if (com.inq.flash.client.chatskins.EmailMgr.emailButtonCap != null && com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap != null) {
    com.inq.flash.client.chatskins.EmailMgr.setCaptureState(com.inq.flash.client.control.PersistenceManager.GetValue("emlc", 0));
    if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnEmailCapture")) {
      Application.application.getButton("btnEmailCapture").addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.EmailMgr.showEmailCaptureCanvas);
    }
    if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnSendEmailCapture")) {
      Application.application.getButton("btnSendEmailCapture").addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.EmailMgr.actionBtnCaptureSendEmail);
    }
  }
  if (com.inq.flash.client.chatskins.EmailMgr.emailButton != null && com.inq.flash.client.chatskins.EmailMgr.emailCanvas != null) {
    com.inq.flash.client.chatskins.EmailMgr.setState(com.inq.flash.client.control.PersistenceManager.GetValue("eml", 0));
    if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnEmail")) {
      Application.application.getButton("btnEmail").addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.EmailMgr.showEmailCanvas);
    }
    if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnSendEmail")) {
      Application.application.getButton("btnSendEmail").addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.EmailMgr.actionBtnSendEmail);
    }
  }
  return true;
};
com.inq.flash.client.chatskins.EmailMgr.showEmailCaptureCanvas = function(me) {
  com.inq.flash.client.chatskins.EmailMgr.setCaptureState(com.inq.flash.client.chatskins.EmailMgr.SHOW_ALL_STATE);
  return false;
};
com.inq.flash.client.chatskins.EmailMgr.showEmailCanvas = function() {
  if (com.inq.utils.Capabilities.isIpad()) {
    return com.inq.flash.client.chatskins.EmailMgr.showEmailCanvasIpad();
  }
  com.inq.flash.client.chatskins.EmailMgr.modalEmailCanvas();
  if (com.inq.utils.Capabilities.isMobile()) {
    com.inq.flash.client.chatskins.EmailMgr.setState(com.inq.flash.client.chatskins.EmailMgr.SHOW_ALL_STATE);
    var ti = Application.application.getTextInput("emailInput");
    if (ti != null) {
      ti.setFocus(true);
    }
  } else {
    if (navigator.userAgent.toLowerCase().indexOf("firefox") > -1 && Application.application.getXFrameItems().length > 0) {
      window.setTimeout(function() {
        com.inq.flash.client.chatskins.EmailMgr.setState(com.inq.flash.client.chatskins.EmailMgr.SHOW_ALL_STATE);
        var ti = Application.application.getTextInput("emailInput");
        if (ti != null) {
          ti.setFocus(true);
        }
      }, 200);
    } else {
      com.inq.flash.client.chatskins.EmailMgr.setState(com.inq.flash.client.chatskins.EmailMgr.SHOW_ALL_STATE);
      var ti = Application.application.getTextInput("emailInput");
      if (ti != null && ti._visible === true) {
        ti.setFocus(true);
      } else {
        var cti = Application.application.getTextInput("txtInput");
        if (cti != null) {
          cti.setFocus(true);
        }
        window.setTimeout(function() {
          var ti = Application.application.getTextInput("emailInput");
          if (ti != null) {
            ti.setFocus(true);
          }
        }, 200);
      }
    }
  }
};
com.inq.flash.client.chatskins.EmailMgr.showEmailCanvasIpad = function(me) {
  window.setTimeout(function() {
    com.inq.flash.client.chatskins.EmailMgr.setState(com.inq.flash.client.chatskins.EmailMgr.SHOW_ALL_STATE);
    var ti = Application.application.getTextInput("emailInput");
    if (ti != null) {
      ti.setFocus(true);
    }
  }, 1E3);
  com.inq.flash.client.chatskins.EmailMgr.modalEmailCanvas();
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.isTouched = true;
  return false;
};
com.inq.flash.client.chatskins.EmailMgr.modalEmailCanvas = function() {
  com.inq.aria.ModalWindow.modalEmailCanvas();
};
com.inq.flash.client.chatskins.EmailMgr.unModalEmailCanvas = function() {
  com.inq.aria.ModalWindow.unModalEmailCanvas();
};
com.inq.flash.client.chatskins.EmailMgr.setCaptureState = function(state) {
  if (com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap != null && com.inq.flash.client.chatskins.EmailMgr.emailButtonCap != null) {
    switch(state) {
      case com.inq.flash.client.chatskins.EmailMgr.SHOW_BUTTON_STATE:
        com.inq.flash.client.chatskins.EmailMgr.emailButtonCap.setVisible(true);
        com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.setVisible(false);
        break;
      case com.inq.flash.client.chatskins.EmailMgr.SHOW_ALL_STATE:
        if (!com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.getVisible()) {
          var chatHeight = 0;
          if (com.inq.flash.client.chatskins.EmailMgr.emailCanvas != null && com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getVisible()) {
            chatHeight += Std.parseInt(com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getStyle("top")) + com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getHeight() + com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.getHeight();
            com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.setStyle("top", "" + Std.string(Std.parseInt(com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getStyle("top")) + com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getHeight()));
          } else {
            chatHeight += Std.parseInt(com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.getStyle("top")) + com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.getHeight();
          }
          com.inq.flash.client.chatskins.EmailMgr.chatCanvas.setStyle("top", "" + chatHeight);
          if (com.inq.flash.client.chatskins.EmailMgr.tyCanvas != null) {
            com.inq.flash.client.chatskins.EmailMgr.tyCanvas.setStyle("top", "" + chatHeight);
          }
          com.inq.flash.client.chatskins.EmailMgr.emailButtonCap.setVisible(true);
          com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.setVisible(true);
        }
        break;
      case com.inq.flash.client.chatskins.EmailMgr.SHOW_NONE_STATE:
        var chatHeight = 0;
        var emailCanvasCapTop = Std.parseInt(com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.getStyle("top"));
        if (com.inq.flash.client.chatskins.EmailMgr.emailCanvas != null && com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getVisible()) {
          var emailCanvasTop = Std.parseInt(com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getStyle("top"));
          if (emailCanvasCapTop < emailCanvasTop) {
            com.inq.flash.client.chatskins.EmailMgr.emailCanvas.setStyle("top", emailCanvasCapTop);
            chatHeight += emailCanvasCapTop + com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getHeight();
          } else {
            chatHeight += emailCanvasCapTop;
          }
        } else {
          chatHeight += emailCanvasCapTop;
        }
        com.inq.flash.client.chatskins.EmailMgr.chatCanvas.setStyle("top", "" + chatHeight);
        if (com.inq.flash.client.chatskins.EmailMgr.tyCanvas != null) {
          com.inq.flash.client.chatskins.EmailMgr.tyCanvas.setStyle("top", "" + chatHeight);
        }
        com.inq.flash.client.chatskins.EmailMgr.emailButtonCap.setVisible(false);
        com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.setVisible(false);
        break;
      default:
        com.inq.flash.client.chatskins.EmailMgr.emailButtonCap.setVisible(true);
        com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.setVisible(false);
    }
    com.inq.flash.client.control.PersistenceManager.SetValue("emlc", state);
  }
};
com.inq.flash.client.chatskins.EmailMgr.setState = function(state) {
  if (com.inq.flash.client.chatskins.EmailMgr.emailCanvas != null && com.inq.flash.client.chatskins.EmailMgr.emailButton != null) {
    switch(state) {
      case com.inq.flash.client.chatskins.EmailMgr.SHOW_BUTTON_STATE:
        com.inq.flash.client.chatskins.EmailMgr.emailButton.setVisible(true);
        com.inq.flash.client.chatskins.EmailMgr.emailCanvas.setVisible(false);
        break;
      case com.inq.flash.client.chatskins.EmailMgr.SHOW_ALL_STATE:
        if (!com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getVisible()) {
          var chatHeight = 0;
          if (com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap != null && com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.getVisible()) {
            chatHeight += Std.parseInt(com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.getStyle("top")) + com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getHeight() + com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.getHeight();
            com.inq.flash.client.chatskins.EmailMgr.emailCanvas.setStyle("top", "" + Std.string(Std.parseInt(com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.getStyle("top")) + com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.getHeight()));
          } else {
            chatHeight += Std.parseInt(com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getStyle("top")) + com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getHeight();
          }
          com.inq.flash.client.chatskins.EmailMgr.chatCanvas.setStyle("top", "" + chatHeight);
          if (com.inq.flash.client.chatskins.EmailMgr.tyCanvas != null) {
            com.inq.flash.client.chatskins.EmailMgr.tyCanvas.setStyle("top", "" + chatHeight);
          }
          com.inq.flash.client.chatskins.EmailMgr.emailButton.setVisible(true);
          com.inq.flash.client.chatskins.EmailMgr.emailCanvas.setVisible(true);
          if (com.inq.flash.client.chatskins.EmailMgr.focusEmailField) {
            var emailInputCapture = Application.application.getMxmlItem("emailInput");
            emailInputCapture.setFocus();
          }
        }
        break;
      case com.inq.flash.client.chatskins.EmailMgr.SHOW_NONE_STATE:
        var chatHeight = 0;
        var emailCanvasTop = Std.parseInt(com.inq.flash.client.chatskins.EmailMgr.emailCanvas.getStyle("top"));
        if (com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap != null && com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.getVisible()) {
          var emailCanvasCapTop = Std.parseInt(com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.getStyle("top"));
          if (emailCanvasTop < emailCanvasCapTop) {
            com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.setStyle("top", emailCanvasTop);
            chatHeight += emailCanvasTop + com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap.getHeight();
          } else {
            chatHeight += emailCanvasTop;
          }
        } else {
          chatHeight += emailCanvasTop;
        }
        com.inq.flash.client.chatskins.EmailMgr.chatCanvas.setStyle("top", "" + chatHeight);
        if (com.inq.flash.client.chatskins.EmailMgr.tyCanvas != null) {
          com.inq.flash.client.chatskins.EmailMgr.tyCanvas.setStyle("top", "" + chatHeight);
        }
        com.inq.flash.client.chatskins.EmailMgr.emailButton.setVisible(false);
        com.inq.flash.client.chatskins.EmailMgr.emailCanvas.setVisible(false);
        break;
      default:
        com.inq.flash.client.chatskins.EmailMgr.emailButton.setVisible(true);
        com.inq.flash.client.chatskins.EmailMgr.emailCanvas.setVisible(false);
    }
    com.inq.flash.client.control.PersistenceManager.SetValue("eml", state);
  }
};
com.inq.flash.client.chatskins.EmailMgr.actionBtnCaptureSendEmail = function(me) {
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("emailInputCapture")) {
    var emailInputCapture = Application.application.getMxmlItem("emailInputCapture");
    var emailAddressCapture = emailInputCapture._getInput();
    try {
      emailAddressCapture = StringTools.trim(emailAddressCapture);
      if (emailAddressCapture.length != 0) {
        com.inq.flash.client.control.FlashPeer.captureEmailAddress(emailAddressCapture);
        com.inq.flash.client.chatskins.EmailMgr.setCaptureState(com.inq.flash.client.chatskins.EmailMgr.SHOW_NONE_STATE);
      }
    } catch (e) {
    }
  }
  return false;
};
com.inq.flash.client.chatskins.EmailMgr.actionBtnSendEmail = function() {
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("emailInput")) {
    var emailInput = Application.application.getMxmlItem("emailInput");
    var emailAddress = emailInput._getInput();
    try {
      emailAddress = StringTools.trim(emailAddress);
      if (emailAddress.length != 0 && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(emailAddress)) {
        com.inq.flash.client.control.FlashPeer.requestTranscript(emailAddress);
        com.inq.flash.client.chatskins.EmailMgr.saveRequestedStatus();
        var successItem = Application.application.getMxmlItem("SuccessSend");
        if (successItem) {
          successItem.setVisible(true);
          var aBtn = Application.application.getButton("btnCloseEmail");
          if (aBtn != null) {
            aBtn.setImageFocus();
          }
        } else {
          com.inq.flash.client.chatskins.EmailMgr.setState(com.inq.flash.client.chatskins.EmailMgr.SHOW_NONE_STATE);
          com.inq.flash.client.chatskins.EmailMgr.unModalEmailCanvas();
          var txtInput = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
          txtInput.setFocus();
        }
        if (com.inq.utils.Util.isIE) {
          setTimeout(function() {
            com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", com.inq.flash.client.chatskins.EmailMgr.SUCCESS_MSG_PART1, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, true);
            setTimeout(function() {
              com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", com.inq.flash.client.chatskins.EmailMgr.SUCCESS_MSG, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, true);
            }, 1E3);
          }, 1500);
        } else {
          setTimeout(function() {
            com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", com.inq.flash.client.chatskins.EmailMgr.SUCCESS_MSG, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, true);
          }, 2E3);
        }
      } else {
        var failedItem = Application.application.getMxmlItem("FailedSend");
        var failedMsg = com.inq.flash.client.chatskins.EmailMgr.FAIL_MSG;
        if (failedItem) {
          failedMsg = failedItem._div ? failedItem._div.innerText : failedMsg;
        }
        if (!com.inq.utils.Capabilities.isIphone() && !com.inq.utils.Util.isIE) {
          com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", failedMsg, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, true);
        }
        var emailInputCapture = Application.application.getMxmlItem("emailInput");
        emailInputCapture.setFocus(true);
        if (failedItem) {
          failedItem.setVisible(true);
        }
        if (com.inq.utils.Capabilities.isIphone() || com.inq.utils.Util.isIE) {
          setTimeout(function() {
            com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", com.inq.flash.client.chatskins.EmailMgr.FAIL_MSG_PART1, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, true);
            setTimeout(function() {
              com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", failedMsg, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, true);
            }, 1E3);
          }, 1500);
        }
      }
    } catch (e) {
    }
  }
  return false;
};
com.inq.flash.client.chatskins.EmailMgr.actionCancelEmail = function() {
  com.inq.flash.client.chatskins.EmailMgr.unModalEmailCanvas();
  com.inq.flash.client.chatskins.EmailMgr.setState(com.inq.flash.client.chatskins.EmailMgr.SHOW_NONE_STATE);
  var successSendItem = Application.application.getMxmlItem("SuccessSend");
  if (successSendItem && !successSendItem.getVisible()) {
    com.inq.flash.client.chatskins.EmailMgr.setState(com.inq.flash.client.chatskins.EmailMgr.SHOW_BUTTON_STATE);
  }
  var txtInput = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
  if (com.inq.utils.Capabilities.isIpad()) {
    txtInput.setVisible(false);
    com.inq.utils.Timer.delay(function() {
      txtInput.setVisible(true);
      txtInput.setFocus();
    }, 1E3);
  } else {
    if (com.inq.utils.Capabilities.isIphone()) {
      txtInput.setVisible(false);
      txtInput.setVisible(true);
      try {
        com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", txtInput._introduction, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, true);
      } catch (er) {
      }
    }
    txtInput.setFocus(true);
  }
};
com.inq.flash.client.chatskins.EmailMgr.saveRequestedStatus = function() {
  com.inq.flash.client.control.PersistenceManager.SetValue(com.inq.flash.client.chatskins.EmailMgr.REQUEST_STATUS_COOKIE_NAME, com.inq.flash.client.chatskins.EmailMgr.REQUEST_STATUS_REQUESTED);
};
com.inq.flash.client.chatskins.EmailMgr.getRequestStatus = function() {
  return com.inq.flash.client.control.PersistenceManager.GetValue(com.inq.flash.client.chatskins.EmailMgr.REQUEST_STATUS_COOKIE_NAME, com.inq.flash.client.chatskins.EmailMgr.REQUEST_STATUS_DEFAULT);
};
com.inq.flash.client.chatskins.EmailMgr.prototype.__class__ = com.inq.flash.client.chatskins.EmailMgr;
com.inq.flash.client.chatskins.EmailMgr.SHOW_BUTTON_STATE = 0;
com.inq.flash.client.chatskins.EmailMgr.SHOW_ALL_STATE = 1;
com.inq.flash.client.chatskins.EmailMgr.SHOW_NONE_STATE = 2;
com.inq.flash.client.chatskins.EmailMgr._initialized = com.inq.flash.client.chatskins.EmailMgr._init();
com.inq.flash.client.chatskins.EmailMgr.emailButton = null;
com.inq.flash.client.chatskins.EmailMgr.emailButtonCap = null;
com.inq.flash.client.chatskins.EmailMgr.emailCanvas = null;
com.inq.flash.client.chatskins.EmailMgr.emailCanvasCap = null;
com.inq.flash.client.chatskins.EmailMgr.chatCanvas = null;
com.inq.flash.client.chatskins.EmailMgr.tyCanvas = null;
com.inq.flash.client.chatskins.EmailMgr.ariaDivsHidden = null;
com.inq.flash.client.chatskins.EmailMgr.hasRequested = null;
com.inq.flash.client.chatskins.EmailMgr.REQUEST_STATUS_COOKIE_NAME = "tsquest";
com.inq.flash.client.chatskins.EmailMgr.REQUEST_STATUS_REQUESTED = 1;
com.inq.flash.client.chatskins.EmailMgr.REQUEST_STATUS_DEFAULT = 0;
com.inq.flash.client.chatskins.EmailMgr.FAIL_MSG_PART1 = "Validation Fail";
com.inq.flash.client.chatskins.EmailMgr.FAIL_MSG = "Fail to send email address for chat transcript";
com.inq.flash.client.chatskins.EmailMgr.SUCCESS_MSG_PART1 = "Validation Success";
com.inq.flash.client.chatskins.EmailMgr.SUCCESS_MSG = "Your request has been sent.  Your transcript will be sent to you when your chat is completed.";
com.inq.flash.client.chatskins.FocusMonitor = function() {
};
$hxClasses["com.inq.flash.client.chatskins.FocusMonitor"] = com.inq.flash.client.chatskins.FocusMonitor;
com.inq.flash.client.chatskins.FocusMonitor.__name__ = ["com", "inq", "flash", "client", "chatskins", "FocusMonitor"];
com.inq.flash.client.chatskins.FocusMonitor.init = function() {
  com.inq.flash.client.chatskins.FocusMonitor.clientWin = window.parent;
  com.inq.flash.client.chatskins.FocusMonitor.clientDoc = window.parent.doc;
  if (com.inq.flash.client.chatskins.FocusMonitor.clientWin.name != "_inqPersistentChat") {
    return false;
  }
  try {
    var sChatNeedsFocusInterval;
    com.inq.flash.client.chatskins.FocusMonitor._sTitleBarText = com.inq.utils.Util.getConfig("sPersistentFrameTitle", "Chat");
    com.inq.flash.client.chatskins.FocusMonitor._sTitleBarFlashText = com.inq.utils.Util.getConfig("sChatNeedsFocusTitle", "**********");
    sChatNeedsFocusInterval = com.inq.utils.Util.getConfig("iChatNeedsFocusInterval", "2000");
    try {
      com.inq.flash.client.chatskins.FocusMonitor._timerInterval = Std.parseInt(sChatNeedsFocusInterval);
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
        com.inq.flash.client.chatskins.FocusMonitor._timerInterval = 2E3;
      } else {
        throw e;
      }
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  if (null != window["attachEvent"]) {
    window.parent.document.onfocusin = com.inq.flash.client.chatskins.FocusMonitor.whenFocus;
    window.parent.document.onfocusout = com.inq.flash.client.chatskins.FocusMonitor.whenBlur;
  } else {
    if (null != window["addEventListener"]) {
      window.addEventListener("focus", com.inq.flash.client.chatskins.FocusMonitor.whenFocus, false);
      window.addEventListener("blur", com.inq.flash.client.chatskins.FocusMonitor.whenBlur, false);
    }
  }
  return true;
};
com.inq.flash.client.chatskins.FocusMonitor.isFocused = function() {
  return com.inq.flash.client.chatskins.FocusMonitor._bFocused;
};
com.inq.flash.client.chatskins.FocusMonitor.toggleTitlebar = function() {
  var ttl = window.parent.document.title;
  window.parent.document.title = ttl != com.inq.flash.client.chatskins.FocusMonitor._sTitleBarFlashText ? com.inq.flash.client.chatskins.FocusMonitor._sTitleBarFlashText : com.inq.flash.client.chatskins.FocusMonitor._sTitleBarText;
};
com.inq.flash.client.chatskins.FocusMonitor.startTitlebarFlash = function() {
  if (com.inq.flash.client.chatskins.FocusMonitor.clientWin.name != "_inqPersistentChat") {
    return;
  }
  if (com.inq.utils.Util.getConfig("divSkin", false) == true) {
    return;
  }
  if (com.inq.flash.client.chatskins.FocusMonitor._timer != -1) {
    return;
  }
  window.parent.document.title = com.inq.flash.client.chatskins.FocusMonitor._sTitleBarFlashText;
  com.inq.flash.client.chatskins.FocusMonitor._timer = window.setInterval(com.inq.flash.client.chatskins.FocusMonitor.toggleTitlebar, com.inq.flash.client.chatskins.FocusMonitor._timerInterval);
};
com.inq.flash.client.chatskins.FocusMonitor.stopTitlebarFlash = function() {
  if (com.inq.flash.client.chatskins.FocusMonitor._timer != -1) {
    window.clearInterval(com.inq.flash.client.chatskins.FocusMonitor._timer);
  }
  com.inq.flash.client.chatskins.FocusMonitor._timer = -1;
  window.parent.document.title = com.inq.flash.client.chatskins.FocusMonitor._sTitleBarText;
};
com.inq.flash.client.chatskins.FocusMonitor.whenBlur = function(e) {
  if (com.inq.flash.client.chatskins.FocusMonitor._bFocused) {
    haxe.Log.trace("lost focus", {fileName:"FocusMonitor.hx", lineNumber:84, className:"com.inq.flash.client.chatskins.FocusMonitor", methodName:"whenBlur"});
  }
  com.inq.flash.client.chatskins.FocusMonitor._bFocused = false;
  return true;
};
com.inq.flash.client.chatskins.FocusMonitor.whenFocus = function(e) {
  if (!com.inq.flash.client.chatskins.FocusMonitor._bFocused) {
    haxe.Log.trace("gained focus", {fileName:"FocusMonitor.hx", lineNumber:92, className:"com.inq.flash.client.chatskins.FocusMonitor", methodName:"whenFocus"});
  }
  com.inq.flash.client.chatskins.FocusMonitor.stopTitlebarFlash();
  com.inq.flash.client.chatskins.FocusMonitor._bFocused = true;
  return true;
};
com.inq.flash.client.chatskins.FocusMonitor.prototype.__class__ = com.inq.flash.client.chatskins.FocusMonitor;
com.inq.flash.client.chatskins.FocusMonitor.clientWin = null;
com.inq.flash.client.chatskins.FocusMonitor.clientDoc = null;
com.inq.flash.client.chatskins.FocusMonitor._timerIdScroll = -1;
com.inq.flash.client.chatskins.FocusMonitor._bFocused = true;
com.inq.flash.client.chatskins.FocusMonitor._sTitleBarText = "Let's Chat";
com.inq.flash.client.chatskins.FocusMonitor._sTitleBarFlashText = "<<<<<>>>>>";
com.inq.flash.client.chatskins.FocusMonitor._timerInterval = 2E3;
com.inq.flash.client.chatskins.FocusMonitor._timer = -1;
com.inq.flash.client.chatskins.FontMgr = function() {
};
$hxClasses["com.inq.flash.client.chatskins.FontMgr"] = com.inq.flash.client.chatskins.FontMgr;
com.inq.flash.client.chatskins.FontMgr.__name__ = ["com", "inq", "flash", "client", "chatskins", "FontMgr"];
com.inq.flash.client.chatskins.FontMgr.init = function() {
  if (com.inq.flash.client.chatskins.FontMgr.defaultSkin == null) {
    var fullyQualifiedSkinPath = com.inq.flash.client.control.FlashPeer.getSkin();
    var defaultMXMLFileName = com.inq.flash.client.control.PersistenceManager.GetValue("skn", fullyQualifiedSkinPath);
    com.inq.flash.client.chatskins.FontMgr.defaultSkin = defaultMXMLFileName;
  }
  var skin = com.inq.utils.Util.getConfig("nextSkin", null);
  if (skin != null) {
    skin = skin.replace(/\.(skin|zip)$/, ".mxml");
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnFontSize")) {
    Application.application.getButton("btnFontSize").addEventListener(com.inq.events.MouseEvent.CLICK, $bind(this, this.actionBtnNewFont));
    Application.application.getButton("btnFontSize").setVisible(true);
    com.inq.flash.client.chatskins.FontMgr.nameNextSkin = skin;
    if (!com.inq.flash.client.control.FlashPeer.getIsSkinLocal()) {
      com.inq.ui.SkinLoader.PreloadNewSkin(com.inq.flash.client.chatskins.FontMgr.nameNextSkin);
      haxe.Log.trace("skin is " + com.inq.flash.client.chatskins.FontMgr.nameNextSkin, {fileName:"FontMgr.hx", lineNumber:50, className:"com.inq.flash.client.chatskins.FontMgr", methodName:"init"});
    }
  }
  return true;
};
com.inq.flash.client.chatskins.FontMgr.toggleFontSize = function(size) {
  size = parseInt(size);
  var newSize = 0;
  if (this.isLarger) {
    newSize = size - 3;
  } else {
    newSize = size + 3;
  }
  return newSize.toString();
};
com.inq.flash.client.chatskins.FontMgr.toggleElements = function(elements) {
  var isDivChat = com.inq.utils.Util.getConfig("divSkin", false) && !com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat();
  var chatsWindow = isDivChat === true ? window.parent.window : window;
  var fontSize = null;
  var fontUnits = null;
  var el = null;
  if (elements && elements.length > 0) {
    for (var i = 0;i < elements.length;i++) {
      el = elements[i];
      if (chatsWindow.getComputedStyle !== null) {
        fontSize = chatsWindow.getComputedStyle(el, null).fontSize;
      } else {
        if (el.currentStyle.fontSize !== null) {
          fontSize = el.currentStyle.fontSize;
        }
      }
      fontUnits = fontSize.slice(-2);
      fontSize = fontSize.slice(0, -2);
      el.style.fontSize = this.toggleFontSize(fontSize) + fontUnits;
    }
  }
};
com.inq.flash.client.chatskins.FontMgr.actionBtnNewFont = function(me) {
  var skin = com.inq.utils.Util.getConfig("nextSkin", null);
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.isTouched = true;
  if (skin === null) {
    var isDivChat = com.inq.utils.Util.getConfig("divSkin", false) && !com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat();
    var chatDocument = isDivChat === true ? window.parent.document : window.document;
    var customerIDElements = chatDocument.getElementsByClassName("customerId");
    this.toggleElements(customerIDElements);
    var customerMsgElements = chatDocument.getElementsByClassName("customerMsg");
    this.toggleElements(customerMsgElements);
    var agentIdElements = chatDocument.getElementsByClassName("agentId");
    this.toggleElements(agentIdElements);
    var agentMsgElements = chatDocument.getElementsByClassName("agentMsg");
    this.toggleElements(agentMsgElements);
    var systemMsgElements = chatDocument.getElementsByClassName("systemMsg");
    this.toggleElements(systemMsgElements);
    var systemStatMsgElements = chatDocument.getElementsByClassName("systemStatMsg");
    this.toggleElements(systemStatMsgElements);
    var textAreaElements = chatDocument.getElementsByTagName("textarea");
    this.toggleElements(textAreaElements);
    if (this.isLarger) {
      this.isLarger = false;
    } else {
      this.isLarger = true;
    }
  } else {
    try {
      if (Inq.CHM.isV3Continue()) {
        com.inq.flash.client.control.ApplicationController.isSkipRestoreMsgOnce = true;
        var skinName = com.inq.flash.client.control.FlashPeer.getSkin();
        if (com.inq.flash.client.chatskins.FontMgr.nameNextSkin == com.inq.flash.client.control.PersistenceManager.GetValue("skn", skinName)) {
          var defaultSkinFileName = com.inq.flash.client.chatskins.FontMgr.defaultSkin;
          defaultSkinFileName = defaultSkinFileName.replace(com.inq.ui.SkinLoader.getSkinBase(), "");
          defaultSkinFileName = defaultSkinFileName.replace("/", "");
          com.inq.ui.SkinLoader.LoadNewSkin(defaultSkinFileName);
        } else {
          com.inq.ui.SkinLoader.LoadNewSkin(com.inq.flash.client.chatskins.FontMgr.nameNextSkin);
        }
      }
    } catch (error) {
      haxe.Log.trace("Error setting new font:" + error.msg + " " + error.type + "\n", {fileName:"FontMgr.js", lineNumber:101, className:"com.inq.flash.client.control.FontMgr", methodName:"actionBtnNewFont"});
    }
  }
};
com.inq.flash.client.chatskins.FontMgr.nameNextSkin = null;
com.inq.flash.client.chatskins.FontMgr.isLarger = false;
com.inq.flash.client.chatskins.FormMgr = function() {
};
$hxClasses["com.inq.flash.client.chatskins.FormMgr"] = com.inq.flash.client.chatskins.FormMgr;
com.inq.flash.client.chatskins.FormMgr.__name__ = ["com", "inq", "flash", "client", "chatskins", "FormMgr"];
com.inq.flash.client.chatskins.FormMgr.init = function() {
  return true;
};
com.inq.flash.client.chatskins.FormMgr.validateData = function(dataElement, regex) {
  var isValid = false;
  if (regex == null) {
    isValid = true;
  } else {
    var testReg = new EReg(regex, "");
    var dataType = "";
    try {
      dataType = StringTools.trim(dataElement.type.toLowerCase());
    } catch (unknown) {
    }
    switch(dataType) {
      case "text":
      ;
      case "hidden":
        try {
          isValid = testReg.match(StringTools.trim(dataElement.value));
        } catch (unknown) {
          isValid = false;
        }
        break;
      case "checkbox":
      ;
      case "radio":
        break;
      case "submit":
      ;
      case "reset":
      ;
      case "button":
      ;
      case "file":
      ;
      case "image":
      ;
      case "password":
        break;
      default:
      ;
    }
  }
  return isValid;
};
com.inq.flash.client.chatskins.FormMgr.enableDisableElements = function(formID, disable) {
  var el = window.document.getElementById(formID).getElementsByTagName("INPUT");
  var _g1 = 0, _g = el.length;
  while (_g1 < _g) {
    var index = _g1++;
    el[index].disabled = disable;
  }
};
com.inq.flash.client.chatskins.FormMgr.getNextFormElement = function(elmnt) {
  var el = com.inq.flash.client.chatskins.FormMgr.getFormFromElement(elmnt).getElementsByTagName("INPUT");
  var indx = 0;
  var strt = el.length;
  var nxtEl;
  var _g1 = 0, _g = el.length;
  while (_g1 < _g) {
    var indx1 = _g1++;
    if (el[indx1] == elmnt) {
      strt = indx1;
      break;
    }
  }
  while (++strt < el.length) {
    nxtEl = el[strt];
    if (nxtEl.type.toLowerCase() != "hidden") {
      return nxtEl;
    }
  }
  return null;
};
com.inq.flash.client.chatskins.FormMgr.getFormFromElement = function(elmnt) {
  var par = elmnt.parentNode;
  while (par != null) {
    if (par["tagName"] != null && par.tagName.toLowerCase() == "form") {
      return par;
    }
    par = par.parentNode;
  }
  return par;
};
com.inq.flash.client.chatskins.FormMgr.listen4ChangeElements = function(formID) {
  var el = com.inq.ui.Container.getElementById(formID).getElementsByTagName("INPUT");
  var index;
  try {
    var _g1 = 0, _g = el.length;
    while (_g1 < _g) {
      var index1 = _g1++;
      var elmt = el[index1];
      if (elmt.type.toLowerCase() == "submit") {
        elmt.onchange = elmt.onkeypress = elmt.onclick = function(e) {
          var el1 = this;
          com.inq.flash.client.chatskins.SkinControl.cw.syncForms();
          com.inq.flash.client.chatskins.FormMgr.submit(com.inq.flash.client.chatskins.FormMgr.getFormFromElement(el1).id);
          return false;
        };
      } else {
        elmt.onkeydown = function(e) {
          var el1 = this;
          var enterKey = false;
          var evnt = e != null ? e : Application.application.getPanelWindow().event;
          if (evnt != null) {
            enterKey = evnt.altKey == false && evnt.shiftKey == false && evnt.ctrlKey == false && evnt.keyCode == 13;
          }
          if (enterKey) {
            var next = com.inq.flash.client.chatskins.FormMgr.getNextFormElement(el1);
            if (next == null || next.type.toLowerCase() == "submit") {
              com.inq.flash.client.chatskins.SkinControl.cw.syncForms();
              com.inq.flash.client.chatskins.FormMgr.submit(com.inq.flash.client.chatskins.FormMgr.getFormFromElement(el1).id);
            } else {
              com.inq.flash.client.chatskins.SkinControl.cw.syncForms();
              if (next.focus != null) {
                next.focus();
              }
            }
            return false;
          }
          return true;
        };
        elmt.onkeypress = elmt.onchange = elmt.onclick = function(e) {
          com.inq.flash.client.chatskins.SkinControl.cw.syncForms();
          return true;
        };
      }
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("Error " + Std.string(e), {fileName:"FormMgr.hx", lineNumber:152, className:"com.inq.flash.client.chatskins.FormMgr", methodName:"listen4ChangeElements"});
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.chatskins.FormMgr.disableAllElements = function(cw) {
  var el = com.inq.ui.Container.getElementById("chatWindow").getElementsByTagName("INPUT");
  var _g1 = 0, _g = el.length;
  while (_g1 < _g) {
    var index = _g1++;
    el[index].disabled = true;
  }
};
com.inq.flash.client.chatskins.FormMgr.submit = function(formID) {
  try {
    com.inq.flash.client.chatskins.BalloonNotifier.Clear();
    com.inq.flash.client.chatskins.FormMgr.enableDisableElements(formID, true);
    var formToSubmit = com.inq.ui.Container.getElementById(formID);
    var formElements = formToSubmit.elements;
    var formData = new StringBuf;
    var submitForm = true;
    var _g1 = 0, _g = formElements.length;
    while (_g1 < _g) {
      var elmIndex = _g1++;
      var isValid = true;
      var elementName = StringTools.trim(formElements[elmIndex].name);
      if (elementName != null && elementName.length > 0 && elementName != "test" && elementName != "pass" && elementName != "fail") {
        if (elmIndex + 1 < formElements.length && formElements[elmIndex + 1].name == "test") {
          isValid = com.inq.flash.client.chatskins.FormMgr.validateData(formElements[elmIndex], formElements[elmIndex + 1].value);
        }
        if (isValid) {
          formData.b += Std.string(formElements[elmIndex].name + "=" + StringTools.trim(formElements[elmIndex].value) + "&");
          if (elmIndex + 2 < formElements.length && formElements[elmIndex + 2].name == "pass") {
            com.inq.flash.client.chatskins.BalloonNotifier.Notify(formElements[elmIndex], formElements[elmIndex + 2].value);
          }
        } else {
          submitForm = false;
          if (elmIndex + 2 < formElements.length && formElements[elmIndex + 2].name == "fail") {
            com.inq.flash.client.chatskins.BalloonNotifier.Warn(formElements[elmIndex], formElements[elmIndex + 2].value);
          } else {
            if (elmIndex + 3 < formElements.length && formElements[elmIndex + 3].name == "fail") {
              com.inq.flash.client.chatskins.BalloonNotifier.Warn(formElements[elmIndex], formElements[elmIndex + 3].value);
            }
          }
        }
      }
    }
    if (submitForm) {
      com.inq.flash.client.chatskins.FormMgr.enableDisableElements(formID, true);
      com.inq.flash.client.chatskins.SkinControl.cw.syncForms();
      var dataString = com.inq.flash.messagingframework.StringUtils.encodeStringForMessage(HxOverrides.substr(formData.b, 0, formData.b.length - 1));
      com.inq.flash.client.chatskins.SkinControl.getApplicationController().submitForm(formToSubmit.name, formToSubmit.id, dataString);
    } else {
      com.inq.flash.client.chatskins.FormMgr.enableDisableElements(formID, false);
    }
  } catch (unknown) {
    haxe.Log.trace("Form submission FAILED" + Std.string(unknown), {fileName:"FormMgr.hx", lineNumber:206, className:"com.inq.flash.client.chatskins.FormMgr", methodName:"submit"});
  }
  return false;
};
com.inq.flash.client.chatskins.FormMgr.updateFormFields = function(formData, formName, formId, cw) {
  var chatWindowDiv = com.inq.ui.Container.getElementById("chatWindow");
  var allForms = chatWindowDiv.getElementsByTagName("FORM");
  var _g1 = 0, _g = allForms.length;
  while (_g1 < _g) {
    var aix = _g1++;
    var form = allForms[aix];
    if (form.id == formId && form.name == formName || form.id == null && form.name == formName) {
      var rawFormValue = com.inq.flash.messagingframework.StringUtils.decodeStringFromMessage(formData);
      var formValues = rawFormValue.split("&");
      var _g3 = 0, _g2 = formValues.length;
      while (_g3 < _g2) {
        var index = _g3++;
        var elementData = formValues[index].split("=");
        var formElements = form.elements;
        var _g5 = 0, _g4 = formElements.length;
        while (_g5 < _g4) {
          var elmIndex = _g5++;
          if (formElements[elmIndex].name == elementData[0]) {
            formElements[elmIndex].setAttribute("value", elementData[1]);
            formElements[elmIndex].value = elementData[1];
            formElements[elmIndex].disabled = true;
          } else {
            if (formElements[elmIndex].type.toLowerCase() == "submit") {
              formElements[elmIndex].disabled = true;
            }
          }
        }
      }
    }
    cw.syncForms();
  }
};
com.inq.flash.client.chatskins.FormMgr.updateFormTimeExecutor = function(cw) {
  var chatWindowDiv = com.inq.ui.Container.getElementById("chatWindow");
  if (chatWindowDiv != null) {
    haxe.Timer.delay(function() {
      com.inq.flash.client.chatskins.FormMgr.updateForm(cw);
    }, com.inq.flash.client.chatskins.ChatTextArea.RENDER_DELAY);
  } else {
    haxe.Timer.delay(function() {
      com.inq.flash.client.chatskins.FormMgr.updateFormTimeExecutor(cw);
    }, com.inq.flash.client.chatskins.ChatTextArea.RENDER_DELAY);
  }
};
com.inq.flash.client.chatskins.FormMgr.updateForm = function(cw) {
  var chatWindowDiv = com.inq.ui.Container.getElementById("chatWindow");
  var allForms = chatWindowDiv.getElementsByTagName("FORM");
  if (allForms.length > 0) {
    var form = allForms[allForms.length - 1];
    if (form.id == null || form.id == "") {
      form.id = "form_" + com.inq.flash.client.chatskins.FormMgr.randomNumber++;
      form.setAttribute("id", form.id);
    }
    if (form.action == null || form.action == "") {
      form.action = "#";
      form.onsubmit = "return com.inq.flash.client.chatskins.FormMgr.submit('" + Std.string(form.id) + "');";
      form.setAttribute("action", form.action);
      form.setAttribute("onsubmit", form.onsubmit);
    }
    com.inq.flash.client.chatskins.FormMgr.listen4ChangeElements(form.id);
  }
  cw.syncForms();
};
com.inq.flash.client.chatskins.FormMgr.prototype.__class__ = com.inq.flash.client.chatskins.FormMgr;
com.inq.flash.client.chatskins.FormMgr.chatCanvas = null;
com.inq.flash.client.chatskins.FormMgr.randomNumber = 0;
com.inq.flash.client.chatskins.OpenerScript = function() {
  this.reset();
};
$hxClasses["com.inq.flash.client.chatskins.OpenerScript"] = com.inq.flash.client.chatskins.OpenerScript;
com.inq.flash.client.chatskins.OpenerScript.__name__ = ["com", "inq", "flash", "client", "chatskins", "OpenerScript"];
com.inq.flash.client.chatskins.OpenerScript.resetOpenersStopped = function() {
  com.inq.flash.client.chatskins.OpenerScript.bOpenersStopped = false;
};
com.inq.flash.client.chatskins.OpenerScript.prototype.openerScriptsLoaded = function(event) {
  if (this.runOnce) {
    return;
  }
  this.runOnce = true;
  var sOpeners = this.scriptLoader.data;
  this.scriptLoader = null;
  if (sOpeners == null || sOpeners == "") {
    this.scripts = new Array;
    this.scripts[this.scriptCnt++] = "Hello";
    this.displayScript();
    return;
  }
  var scriptXML = Xml.parse(sOpeners);
  var it = scriptXML.firstElement().elements();
  var aOpeners = new Array;
  var i = 0;
  var x;
  var adaIntroduction = com.inq.flash.client.chatskins.OpenerScript.getAdaIntroduction();
  while (it.hasNext()) {
    var x1 = it.next();
    var name = x1.getNodeName();
    if ("script" == name) {
      aOpeners[i++] = com.inq.utils.StringUtil.htmlDecode(x1.firstChild().toString());
    }
  }
  var _g1 = 0, _g = aOpeners.length;
  while (_g1 < _g) {
    var ix = _g1++;
    if (null == this.scripts) {
      this.scripts = new Array;
    }
    if (aOpeners[ix] != "") {
      this.scripts[this.scriptCnt++] = aOpeners[ix];
    }
  }
  if (this.scriptCnt > 0) {
    var scriptShown = com.inq.flash.client.control.PersistenceManager.GetValue("cntOS", 0);
    if (scriptShown <= 0 && this.force) {
      this.displayScript();
    } else {
      if (com.inq.flash.client.control.FlashVars.isContinued() && this.scriptCnt > 0) {
        while (scriptShown-- > 0) {
          this.displayScriptLine(true);
        }
        if (this.force || com.inq.flash.client.control.PersistenceManager.GetValue("s", 0) == 0) {
          this.startOpenersTimer();
        }
      } else {
        if (adaIntroduction != null && !Application.IsPersistent()) {
          this.displayadaIntroduction(adaIntroduction);
        }
        this.displayScript();
      }
    }
  }
};
com.inq.flash.client.chatskins.OpenerScript.getAdaIntroduction = function(event) {
  var adaIntroduction = com.inq.utils.Util.getConfig("adaIntroduction", null);
  if (adaIntroduction != null) {
    adaIntroduction = adaIntroduction.replace("{accesskey}", getBrowserAccessKey());
  }
  return adaIntroduction;
  function getBrowserAccessKey() {
    var accessKey = "Alt";
    if (navigator.userAgent.toLowerCase().indexOf("firefox") > -1) {
      accessKey = "Shift Alt";
    } else {
      if (navigator.userAgent.indexOf("Safari") != -1 && navigator.userAgent.indexOf("Chrome") == -1 && navigator.userAgent.indexOf("Android") == -1 && navigator.platform.toUpperCase().indexOf("MAC") >= 0) {
        accessKey = "Control";
      }
    }
    return accessKey;
  }
};
com.inq.flash.client.chatskins.OpenerScript.prototype.openerScriptFailed = function(event) {
  return;
};
com.inq.flash.client.chatskins.OpenerScript.prototype.getOpenerScripts = function() {
  var opID = com.inq.flash.client.control.FlashVars.getValue("openerID");
  var opName = com.inq.flash.client.control.FlashVars.getValue("openerName");
  if (opID <= 0 && !opName) {
    return;
  }
  var sTagServerURL = Std.string(com.inq.flash.client.control.FlashVars.getValue("tagServerBaseURL")) + "tagserver/scripts/getScript?js=yes&siteID=" + com.inq.flash.client.control.FlashVars.getValue("siteID");
  if (opName) {
    sTagServerURL += "&scriptName=" + Std.string(opName);
  } else {
    sTagServerURL += "&scriptID=" + Std.string(opID);
  }
  this.scriptLoader = new com.inq.net.URLLoader;
  var scriptRequest = new com.inq.net.URLRequest(sTagServerURL);
  this.scriptLoader.addEventListener(com.inq.events.IOErrorEvent.IO_ERROR, $bind(this, this.openerScriptFailed));
  this.scriptLoader.addEventListener(com.inq.events.Event.COMPLETE, $bind(this, this.openerScriptsLoaded));
  this.scriptLoader.load(scriptRequest);
};
com.inq.flash.client.chatskins.OpenerScript.prototype.displayScriptLine = function(replay) {
  var agentName = com.inq.flash.client.control.FlashVars.getValue("agentName");
  var useAgentAlias = com.inq.utils.Util.getConfig("useAgentAlias", false);
  if (useAgentAlias == true && com.inq.flash.client.control.FlashVars.getValue("overrideAgentAlias") != "true") {
    var defaultAgentAlias = com.inq.utils.Util.getConfig("defaultAgentAlias", "&nbsp;");
    agentName = defaultAgentAlias;
  }
  var msg = this.scripts[this.scriptCur++];
  msg = com.inq.flash.client.chatskins.SkinControl.checkForGoToPersistentChatMsg(msg);
  com.inq.flash.client.chatskins.SkinControl.AddOpenerToChatWindow(agentName, msg, com.inq.flash.client.chatskins.ChatTextArea.AGENT, -1);
  com.inq.flash.client.control.PersistenceManager.SetValue("cntOS", this.scriptCur);
  var enqOpener = !replay || com.inq.flash.client.control.PersistenceManager.GetValue("msgcnt", 0) < 1;
  if (enqOpener && !com.inq.flash.client.chatskins.SkinControl.getApplicationController().isFirstMessageSent()) {
    com.inq.flash.client.chatskins.SkinControl.getApplicationController().enqueueOpenerText(msg, agentName);
  }
};
com.inq.flash.client.chatskins.OpenerScript.prototype.displayScript = function() {
  this.stopOpenersTimer();
  if (!com.inq.flash.client.chatskins.OpenerScript.bOpenersStopped) {
    this.displayScriptLine(false);
    this.startOpenersTimer();
  }
};
com.inq.flash.client.chatskins.OpenerScript.prototype.displayadaIntroduction = function(adaIntroduction) {
  com.inq.flash.client.chatskins.ChatTextArea.prototype.addBufferedAriaMsg("", adaIntroduction, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM);
};
com.inq.flash.client.chatskins.OpenerScript.prototype.startOpenersTimer = function() {
  if (!com.inq.flash.client.chatskins.OpenerScript.bOpenersStopped && this.scriptCur < this.scriptCnt) {
    this.intervalTimer = new com.inq.utils.Timer(this._delay);
    this.intervalTimer.run = $bind(this, this.displayScript);
  }
};
com.inq.flash.client.chatskins.OpenerScript.prototype.stopOpenersTimer = function() {
  if (this.intervalTimer != null) {
    this.intervalTimer.stop();
    this.intervalTimer = null;
  }
};
com.inq.flash.client.chatskins.OpenerScript.prototype.stop = function(bForce) {
  if (bForce == null) {
    bForce = false;
  }
  if (bForce) {
    com.inq.flash.client.chatskins.OpenerScript.bOpenersStopped = true;
  }
  if (this.intervalTimer == null) {
    return;
  }
  if (this.intervalTimer.stop != null) {
    this.intervalTimer.stop();
  }
  this.intervalTimer = null;
};
com.inq.flash.client.chatskins.OpenerScript.prototype.start = function(bForce) {
  if (bForce == null) {
    bForce = false;
  }
  if (bForce && -1 == com.inq.flash.client.control.PersistenceManager.GetValue("cntOS", -1)) {
    this.reset();
    this.force = bForce;
    this.getOpenerScripts();
    return;
  }
  if (com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry > 0 && -1 == com.inq.flash.client.control.PersistenceManager.GetValue("cntOS", -1)) {
    return;
  }
  this.getOpenerScripts();
};
com.inq.flash.client.chatskins.OpenerScript.prototype.setDelay = function(dly) {
  this._delay = dly;
};
com.inq.flash.client.chatskins.OpenerScript.prototype.reset = function() {
  this.runOnce = false;
  this.force = false;
  this.scriptLoader = null;
  this.scripts = new Array;
  this.scriptCnt = 0;
  this.scriptCur = 0;
  this.intervalTimer = null;
  this._delay = 1E3 * Std.parseInt("" + Std.string(com.inq.flash.client.control.FlashVars.getValue("openerDelay")));
};
com.inq.flash.client.chatskins.OpenerScript.prototype.force = null;
com.inq.flash.client.chatskins.OpenerScript.prototype.runOnce = null;
com.inq.flash.client.chatskins.OpenerScript.prototype.intervalTimer = null;
com.inq.flash.client.chatskins.OpenerScript.prototype._delay = null;
com.inq.flash.client.chatskins.OpenerScript.prototype.scriptCur = null;
com.inq.flash.client.chatskins.OpenerScript.prototype.scriptCnt = null;
com.inq.flash.client.chatskins.OpenerScript.prototype.scripts = null;
com.inq.flash.client.chatskins.OpenerScript.prototype.scriptLoader = null;
com.inq.flash.client.chatskins.OpenerScript.prototype.__class__ = com.inq.flash.client.chatskins.OpenerScript;
com.inq.flash.client.chatskins.OpenerScript.bOpenersStopped = false;
com.inq.flash.client.chatskins.PrintMgr = function() {
};
$hxClasses["com.inq.flash.client.chatskins.PrintMgr"] = com.inq.flash.client.chatskins.PrintMgr;
com.inq.flash.client.chatskins.PrintMgr.__name__ = ["com", "inq", "flash", "client", "chatskins", "PrintMgr"];
com.inq.flash.client.chatskins.PrintMgr.loaderSkin = null;
com.inq.flash.client.chatskins.PrintMgr._init = function() {
  var win = window;
  return true;
};
com.inq.flash.client.chatskins.PrintMgr.init = function() {
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnPrint")) {
    var badChrome = /\bChrome\/(34|35)\b/.test(window.navigator.userAgent);
    var btnPrint = Application.application.getButton("btnPrint");
    if (badChrome) {
      btnPrint.setStyle("useHandCursor", "false");
      btnPrint.setStyle("toolTip", "");
    } else {
      btnPrint.addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.PrintMgr.actionBtnPrintTranscript);
      btnPrint.setVisible(true);
    }
  }
  return true;
};
com.inq.flash.client.chatskins.PrintMgr.actionBtnPrintTranscript = function(me) {
  com.inq.flash.client.chatskins.PrintMgr.printWindow = window.open("", "inqPrint", "left=0,top=0,height=600,width=400,status=0,toolbar=0");
  var transcript = "<table>" + Std.string(com.inq.flash.client.chatskins.SkinControl.cw.getHtmlText()) + "</table>";
  var links = document.body.parentNode.getElementsByTagName("LINK");
  var linkUrl = links[0].href;
  if (null != com.inq.flash.client.chatskins.PrintMgr.printWindow) {
    com.inq.flash.client.chatskins.PrintMgr.printWindow.onload = function() {
      return true;
    };
    com.inq.flash.client.chatskins.PrintMgr.printWindow.document.open();
    com.inq.flash.client.chatskins.PrintMgr.printWindow.document.write("<html><head>" + '<link type="text/css" rel="stylesheet" media="print" href="' + linkUrl + '" />' + '<link type="text/css" rel="stylesheet" media="screen" href="' + linkUrl + '" />' + "</head></html>");
    com.inq.flash.client.chatskins.PrintMgr.printWindow.document.write("<body>" + transcript + '<script>\n setTimeout("window.print();window.close();",1000);\n\x3c/script></body>');
    com.inq.flash.client.chatskins.PrintMgr.printWindow.document.close();
  }
};
com.inq.flash.client.chatskins.PrintMgr.prototype.__class__ = com.inq.flash.client.chatskins.PrintMgr;
com.inq.flash.client.chatskins.PrintMgr._initialized = com.inq.flash.client.chatskins.PrintMgr._init();
com.inq.flash.client.chatskins.PrintMgr.printWindow = null;
com.inq.flash.client.chatskins.ScrollMonitor = function() {
};
$hxClasses.registerClass(com.inq.flash.client.chatskins.ScrollMonitor, "com.inq.flash.client.chatskins.ScrollMonitor");
com.inq.flash.client.chatskins.ScrollMonitor.init = function() {
  com.inq.flash.client.chatskins.ScrollMonitor._initialZoom = com.inq.flash.client.chatskins.ScrollMonitor._zoomPrev = com.inq.utils.Capabilities.isMobile() ? com.inq.utils.Capabilities.getZoom() : 0;
  com.inq.flash.client.chatskins.ScrollMonitor.whenScrollClosure = com.inq.utils.Capabilities.isPhone() ? com.inq.flash.client.chatskins.ScrollMonitor.whenPhoneScroll : com.inq.flash.client.chatskins.ScrollMonitor.whenScroll;
  if (window.parent.name == "_inqPersistentChat") {
    return false;
  }
  com.inq.flash.client.chatskins.ScrollMonitor.bindAll();
  return true;
};
com.inq.flash.client.chatskins.ScrollMonitor.bindAll = function() {
  if (!com.inq.utils.Capabilities.isPhone()) {
    com.inq.utils.Capabilities.BindListener(window.parent, "scroll", com.inq.flash.client.chatskins.ScrollMonitor.whenScrollClosure);
    com.inq.utils.Capabilities.BindListener(window.parent, "resize", com.inq.flash.client.chatskins.ScrollMonitor.whenScrollClosure);
    com.inq.utils.Capabilities.BindListener(window.parent, "orientationchange", com.inq.flash.client.chatskins.ScrollMonitor.whenScrollClosure);
  } else {
    var lastHeight = window.parent.innerHeight;
    if (com.inq.utils.Capabilities.isPhone() && com.inq.flash.client.chatskins.ScrollMonitor.sizeChangeEventTimer == -1) {
      com.inq.flash.client.chatskins.ScrollMonitor.sizeChangeEventTimer = window.setInterval(function() {
        if (com.inq.ui.Stage.getInstance().getVisible() && !com.inq.flash.client.chatskins.ChatTextFocusMonitor.HasFocus() && window.parent.innerHeight != lastHeight) {
          lastHeight = window.parent.innerHeight;
          window.parent.scrollBy(0, 1);
          window.parent.scrollBy(0, -1);
        }
      }, 500);
    }
    com.inq.utils.Capabilities.UnbindListener(window.parent, "scroll", com.inq.flash.client.chatskins.ScrollMonitor.whenScrollClosure);
    com.inq.utils.Capabilities.UnbindListener(window.parent, "orientationchange", com.inq.flash.client.chatskins.ScrollMonitor.whenScrollClosure);
    com.inq.utils.Capabilities.BindListener(window.parent, "scroll", com.inq.flash.client.chatskins.ScrollMonitor.whenScrollClosure);
    com.inq.utils.Capabilities.BindListener(window.parent, "orientationchange", com.inq.flash.client.chatskins.ScrollMonitor.whenScrollClosure);
  }
};
com.inq.flash.client.chatskins.ScrollMonitor.unbindAll = function() {
  if (com.inq.utils.Capabilities.isPhone() && com.inq.flash.client.chatskins.ScrollMonitor.sizeChangeEventTimer != -1) {
    clearInterval(com.inq.flash.client.chatskins.ScrollMonitor.sizeChangeEventTimer);
    com.inq.flash.client.chatskins.ScrollMonitor.sizeChangeEventTimer = -1;
  }
  com.inq.utils.Capabilities.UnbindListener(window.parent, "scroll", com.inq.flash.client.chatskins.ScrollMonitor.whenScrollClosure);
  com.inq.utils.Capabilities.UnbindListener(window.parent, "resize", com.inq.flash.client.chatskins.ScrollMonitor.whenScrollClosure);
  com.inq.utils.Capabilities.UnbindListener(window.parent, "orientationchange", com.inq.flash.client.chatskins.ScrollMonitor.whenScrollClosure);
};
com.inq.flash.client.chatskins.ScrollMonitor.Close = function() {
  com.inq.flash.client.chatskins.ScrollMonitor.unbindAll();
};
com.inq.flash.client.chatskins.ScrollMonitor.suspend = function() {
  com.inq.flash.client.chatskins.ScrollMonitor.suspendedLevel++;
};
com.inq.flash.client.chatskins.ScrollMonitor.resume = function() {
  com.inq.flash.client.chatskins.ScrollMonitor.suspendedLevel--;
};
com.inq.flash.client.chatskins.ScrollMonitor.isSuspended = function() {
  return com.inq.utils.Capabilities.isIpad() ? false : com.inq.flash.client.chatskins.ScrollMonitor.suspendedLevel > 0;
};
com.inq.flash.client.chatskins.ScrollMonitor.ScrollToPoint = function(p) {
  com.inq.flash.client.chatskins.ScrollMonitor.ScrollTo(p.x, p.y);
};
com.inq.flash.client.chatskins.ScrollMonitor.ScrollTo = function(x, y) {
  com.inq.flash.client.chatskins.ScrollMonitor.suspend();
  try {
    window.parent.scrollTo(x, y);
  } catch (err) {
    haxe.Log.trace("Error: " + err);
  }
  window.setTimeout(com.inq.flash.client.chatskins.ScrollMonitor.resume, 100);
};
com.inq.flash.client.chatskins.ScrollMonitor.ScrollBy = function(dx, dy) {
  com.inq.flash.client.chatskins.ScrollMonitor.suspend();
  try {
    window.parent.scrollBy(dx, dy);
  } catch (e) {
    haxe.Log.trace("Error: " + err);
  }
  window.setTimeout(com.inq.flash.client.chatskins.ScrollMonitor.resume, 100);
};
com.inq.flash.client.chatskins.ScrollMonitor.ScrollToTop = function() {
  com.inq.flash.client.chatskins.ScrollMonitor.ScrollTo(0, 0);
};
com.inq.flash.client.chatskins.ScrollMonitor.ScrollToNearTop = function() {
  com.inq.flash.client.chatskins.ScrollMonitor.ScrollTo(0, 1);
};
com.inq.flash.client.chatskins.ScrollMonitor.ScrollToBottom = function() {
  var windowPosition = com.inq.utils.Capabilities.getViewport();
  com.inq.flash.client.chatskins.ScrollMonitor.ScrollTo(windowPosition.x, window.parent.document.documentElement.offsetHeight);
};
com.inq.flash.client.chatskins.ScrollMonitor.notify = function() {
  com.inq.flash.client.chatskins.ScrollMonitor.whenScroll(null);
};
com.inq.flash.client.chatskins.ScrollMonitor.whenScroll = function(e) {
  if (com.inq.flash.client.chatskins.ScrollMonitor.isSuspended()) {
    return true;
  }
  if (!e) {
    e = window.parent.Event;
  }
  var fastMove = false;
  var forceMove = false;
  if (com.inq.flash.client.chatskins.ScrollMonitor._iPadSafariOrChrome && e && e.type && (e.type == "orientationchange" || e.type == "resize")) {
    fastMove = true;
    forceMove = true;
  }
  if (!com.inq.ui.Stage.getInstance().getVisible()) {
    return true;
  } else {
    if (com.inq.flash.client.chatskins.ScrollMonitor._iPadSafariOrChrome) {
      if (fastMove) {
        com.inq.flash.client.chatskins.ScrollMonitor.moveChat(forceMove, e.type);
        return true;
      }
      if (com.inq.flash.client.chatskins.ScrollMonitor._timerIdScroll != -1) {
        window.clearTimeout(com.inq.flash.client.chatskins.ScrollMonitor._timerIdScroll);
        com.inq.flash.client.chatskins.ScrollMonitor._timerIdScroll = -1;
      }
      if (com.inq.flash.client.chatskins.ScrollMonitor._timerIdScroll == -1) {
        com.inq.flash.client.chatskins.ScrollMonitor._timerIdScroll = window.setTimeout(function() {
          com.inq.flash.client.chatskins.ScrollMonitor._timerIdScroll = -1;
          com.inq.flash.client.chatskins.ScrollMonitor.moveChat();
        }, fastMove ? 1 : 500);
      }
    } else {
      com.inq.flash.client.chatskins.ScrollMonitor.numWaiting++;
      var eventType = e.type;
      window.setTimeout(function() {
        com.inq.flash.client.chatskins.ScrollMonitor.handleRapidScroll(eventType);
      }, 500);
      return true;
    }
  }
};
com.inq.flash.client.chatskins.ScrollMonitor.whenPhoneScroll = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.onScrollCallback();
  if (com.inq.flash.client.chatskins.ScrollMonitor.isSuspended()) {
    return true;
  }
  if (!com.inq.ui.Stage.getInstance().getVisible()) {
    com.inq.flash.client.chatskins.ScrollMonitor.Close();
    return true;
  }
  var oldHeight = Application.application.area.h;
  var vpArea = com.inq.utils.Capabilities.getViewport();
  if (!com.inq.flash.client.chatskins.ChatTextFocusMonitor.HasFocus() && vpArea.h != oldHeight) {
    Application.MoveSizeDiv2Stage(vpArea.w, vpArea.h, Application.application.area.x, Application.application.area.y);
    Application.Resize();
  }
  com.inq.utils.Timer.delay(function() {
    com.inq.flash.client.chatskins.ChatTextFocusMonitor.FixIPhoneFocusScroll();
  }, 100);
};
com.inq.flash.client.chatskins.ScrollMonitor.whenPhoneChangedHeight = function() {
  var oldHeight = Application.application.area.h;
  var vpArea = com.inq.utils.Capabilities.getViewport();
  if (!com.inq.flash.client.chatskins.ChatTextFocusMonitor.HasFocus() && vpArea.h != oldHeight) {
    Application.MoveSizeDiv2Stage(vpArea.w, vpArea.h, Application.application.area.x, Application.application.area.y);
    Application.Resize();
  }
};
com.inq.flash.client.chatskins.ScrollMonitor.waitForLull = function() {
  com.inq.flash.client.chatskins.ScrollMonitor.waitingForLull = true;
};
com.inq.flash.client.chatskins.ScrollMonitor.handleRapidScroll = function(type) {
  if (com.inq.flash.client.chatskins.ScrollMonitor.isSuspended()) {
    return;
  } else {
    if (--com.inq.flash.client.chatskins.ScrollMonitor.numWaiting > 0) {
      return;
    }
  }
  if (com.inq.flash.client.chatskins.ScrollMonitor.waitingForLull) {
    com.inq.flash.client.chatskins.ScrollMonitor.waitingForLull = false;
    com.inq.flash.client.chatskins.ScrollMonitor.storeCurrentPosition();
  } else {
    com.inq.flash.client.chatskins.ScrollMonitor.moveChat(false, type);
  }
};
com.inq.flash.client.chatskins.ScrollMonitor.moveChat = function(forceMove, type) {
  if (!forceMove) {
    forceMove = false;
  }
  var relLeft;
  var relTop;
  if (!com.inq.utils.Capabilities.isMobile()) {
    relLeft = com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft() - com.inq.flash.client.chatskins.ScrollMonitor._scrollLeftPrev;
    relTop = com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop() - com.inq.flash.client.chatskins.ScrollMonitor._scrollTopPrev;
    Application.ScrollStage(relLeft, relTop);
    com.inq.flash.client.chatskins.ScrollMonitor.storeCurrentPosition();
  } else {
    if (com.inq.utils.Capabilities.isIphone()) {
      com.inq.flash.client.chatskins.ChatTextFocusMonitor.resizeToViewport("ScrollMonitor.moveChat");
    } else {
      if (com.inq.utils.Capabilities.isTablet()) {
        var vp = com.inq.utils.Capabilities.getViewport();
        var z = com.inq.utils.Capabilities.getZoom();
        relLeft = vp.x - com.inq.flash.client.chatskins.ScrollMonitor._scrollLeftPrev;
        relTop = vp.y - com.inq.flash.client.chatskins.ScrollMonitor._scrollTopPrev;
        var preVW = com.inq.flash.client.chatskins.ScrollMonitor._vieportWidthPrev;
        try {
          var offsetLeft = com.inq.ui.Stage.getStageLeft();
          var offsetTop = com.inq.ui.Stage.getStageTop();
          var width = Application.application.getWidth();
          var height = Application.application.getHeight();
          var right = offsetLeft + width;
          var maxRight = vp.x + vp.w;
          var bottom = offsetTop + relTop + height;
          var maxBottom = vp.y + vp.h;
          var currentFocusEl = com.inq.flash.client.chatskins.ChatTextFocusMonitor.getFocusElement();
          var focElemeentOffTop = 0;
          var clientbodyWidth = window.parent.document.body.clientWidth;
          if (currentFocusEl && currentFocusEl.id.indexOf("email") != -1) {
            focElemeentOffTop = Application.application.getMxmlItem("emailInput").getOffsetTop();
          }
          if (type && (type == "orientationchange" || type == "resize" && com.inq.utils.Capabilities.isAndroid()) && (com.inq.flash.client.chatskins.ScrollMonitor._initialZoom != z || right > clientbodyWidth || preVW != vp.w || offsetTop < vp.y)) {
            com.inq.flash.client.chatskins.ScrollMonitor._initialZoom = z;
            recalculate();
          } else {
            if ((type == "scroll" || type == "resize" || forceMove) && com.inq.utils.Capabilities.isAndroid() && (preVW != vp.w || offsetTop < vp.y)) {
              recalculate();
              vp.x = vp.x != 0 ? clientbodyWidth - window.parent.document.body.scrollWidth : 0;
            } else {
              if (com.inq.utils.Capabilities.isAndroid() && z <= com.inq.flash.client.chatskins.ScrollMonitor._initialZoom && vp.x + Application.initialXPos > maxRight) {
                currentFocusEl && currentFocusEl.blur();
              }
            }
          }
          if (com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.isTouched && com.inq.utils.Capabilities.isSafari()) {
            maxBottom -= (com.inq.utils.Capabilities.getOrientation() ? 35 : 65) / 100 * vp.h;
          }
          if (z <= com.inq.flash.client.chatskins.ScrollMonitor._initialZoom) {
            var maxH = vp.y + Application.initialYPos + height;
            com.inq.flash.client.chatskins.ScrollMonitor.storeCurrentPosition();
            if (maxH <= maxBottom) {
              Application.ScrollStageRelPage(vp.x + Application.initialXPos, vp.y + Application.initialYPos <= 1 ? 0 : vp.y + Application.initialYPos);
            } else {
              var tmpY = vp.y + Application.initialYPos - (maxH - maxBottom);
              if (vp.y <= 1 && tmpY < 0) {
                tmpY = 0;
              } else {
                if (tmpY + focElemeentOffTop < vp.y) {
                  tmpY = tmpY + focElemeentOffTop;
                }
              }
              Application.ScrollStageRelPage(vp.x + Application.initialXPos, tmpY);
            }
            return;
          }
          if (z != com.inq.flash.client.chatskins.ScrollMonitor._zoomPrev) {
            var posX = offsetLeft, posY = offsetTop;
            if (right > maxRight) {
              posX = offsetLeft - (right - maxRight);
            }
            if (offsetTop < vp.y) {
              posY = vp.y;
            }
            if (offsetTop + height > maxBottom) {
              posY = offsetTop - (offsetTop + height - maxBottom);
            }
            if (offsetLeft < vp.x) {
              posX = vp.x;
            }
            if (posX != offsetLeft || posY != offsetTop) {
              Application.ScrollStageRelPage(posX, posY);
            }
            com.inq.flash.client.chatskins.ScrollMonitor.storeCurrentPosition();
            return;
          }
          if (right > maxRight) {
            forceMove = true;
            relLeft += maxRight - right;
          }
          if (bottom > maxBottom) {
            forceMove = true;
            relTop += maxBottom - bottom;
          }
        } catch (er) {
          haxe.Log.trace("Error in ScrollMonitor moveChat: " + er, {fileName:"ScrollMonitor.js", lineNumber:656, className:"com.inq.flash.client.chatskins.ScrollMonitor", methodName:"moveChat"});
        }
        if (forceMove || z == com.inq.flash.client.chatskins.ScrollMonitor._zoomPrev) {
          Application.ScrollStageInPage(relLeft, relTop);
        }
        com.inq.flash.client.chatskins.ScrollMonitor.storeCurrentPosition();
      }
    }
  }
  function recalculate() {
    var position = Application.calcChatLocation(com.inq.flash.client.control.FlashPeer.getSkinWidth(), com.inq.flash.client.control.FlashPeer.getSkinHeight() + com.inq.flash.client.control.FlashPeer.getTitleBarHeight(), com.inq.flash.client.control.FlashPeer.getSkinLeft(), com.inq.flash.client.control.FlashPeer.getSkinTop(), com.inq.flash.client.control.FlashPeer.getSkinLocation());
    Application.initialXPos = position.x - vp.x;
    Application.initialYPos = position.y - vp.y;
    if (Application.initialXPos + width > clientbodyWidth) {
      Application.initialXPos -= Application.initialXPos + width - clientbodyWidth;
    }
    if (Application.initialXPos + width > window.top.innerWidth) {
      Application.initialXPos -= Application.initialXPos + width - window.top.innerWidth;
    }
  }
};
com.inq.flash.client.chatskins.ScrollMonitor.storeCurrentPosition = function() {
  var vp = com.inq.utils.Capabilities.getViewport();
  var z = com.inq.utils.Capabilities.getZoom();
  com.inq.flash.client.chatskins.ScrollMonitor._scrollLeftPrev = vp.x;
  com.inq.flash.client.chatskins.ScrollMonitor._scrollTopPrev = vp.y;
  com.inq.flash.client.chatskins.ScrollMonitor._zoomPrev = z;
  com.inq.flash.client.chatskins.ScrollMonitor._vieportWidthPrev = vp.w;
};
com.inq.flash.client.chatskins.ScrollMonitor.getScrollWidth = function(clientWin) {
  if (!clientWin) {
    clientWin = window.parent;
  }
  var clientDoc = clientWin.document;
  var iScrollWidth = 0;
  if (null == clientWin["innerWidth"]) {
    iScrollWidth = clientDoc["documentElement"] != null ? 0 != clientDoc.documentElement.clientWidth ? clientDoc.documentElement.clientWidth : clientDoc.body.clientWidth : clientDoc.body.clientWidth;
  } else {
    var innerWidth = clientWin.innerWidth;
    innerWidth -= Application.hasRightScrollBar() ? com.inq.flash.client.chatskins.ScrollMonitor.getScrollBarWidth() : 0;
    var clientWidth = clientDoc.body.clientWidth;
    if (com.inq.utils.Capabilities.isTablet()) {
      iScrollWidth = innerWidth;
    } else {
      iScrollWidth = clientWidth == 0 ? innerWidth : Math.min(clientWidth, innerWidth);
    }
    if (0 == iScrollWidth) {
      iScrollWidth = clientDoc.body.clientWidth;
    }
  }
  return iScrollWidth;
};
com.inq.flash.client.chatskins.ScrollMonitor.getScrollHeight = function() {
  var iScrollHeight = 0;
  var clientDoc = window.parent.document;
  if (null == window.parent["innerHeight"]) {
    iScrollHeight = clientDoc["documentElement"] != null ? 0 != clientDoc.documentElement.clientHeight ? clientDoc.documentElement.clientHeight : clientDoc.body.clientHeight : clientDoc.body.clientHeight;
  } else {
    var innerHeight = window.parent.innerHeight;
    innerHeight -= Application.hasBottomScrollBar() ? com.inq.flash.client.chatskins.ScrollMonitor.getScrollBarWidth() : 0;
    var clientHeight = clientDoc.body.clientHeight;
    var scrollHeight = clientDoc.body.scrollHeight;
    iScrollHeight = 0;
    if (clientHeight == 0 || scrollHeight >= clientHeight) {
      iScrollHeight = innerHeight;
    } else {
      iScrollHeight = Math.min(clientHeight, innerHeight);
    }
    if (0 == iScrollHeight) {
      iScrollHeight = clientDoc.body.clientHeight;
    }
  }
  return iScrollHeight;
};
com.inq.flash.client.chatskins.ScrollMonitor.getScrollPoint = function() {
  return new com.inq.utils.Point(com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft(), com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop());
};
com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop = function() {
  var clientWin = window.parent;
  var clientDoc = clientWin.document;
  try {
    if (null != clientWin["pageYOffset"]) {
      return clientWin.pageYOffset;
    }
    if (clientDoc["documentElement"] != null && (clientDoc.documentElement["scrollTop"] != null && clientDoc.documentElement.scrollTop != 0)) {
      return clientDoc.documentElement.scrollTop;
    } else {
      return clientDoc.body.scrollTop;
    }
  } catch (msg) {
    if (js.Boot.__instanceof(msg, String)) {
      haxe.Log.trace("error in ScrollMonitor getScrollTop: " + msg, {className:"com.inq.flash.client.chatskins.ScrollMonitor", methodName:"getScrollTop"});
    } else {
      throw msg;
    }
  }
  return 0;
};
com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft = function() {
  try {
    var clientWin = window.parent;
    var clientDoc = clientWin.document;
    if (null != clientWin["pageXOffset"]) {
      return clientWin.pageXOffset;
    }
    if (clientDoc["documentElement"] != null && (clientDoc.documentElement["scrollLeft"] != null && clientDoc.documentElement.scrollLeft != 0)) {
      return clientDoc.documentElement.scrollLeft;
    } else {
      return clientDoc.body.scrollLeft;
    }
  } catch (msg) {
    if (js.Boot.__instanceof(msg, String)) {
      haxe.Log.trace("error in ScrollMonitor getScrollLeft: " + msg, {fileName:"ScrollMonitor.hx", lineNumber:279, className:"com.inq.flash.client.chatskins.ScrollMonitor", methodName:"getScrollLeft"});
    } else {
      throw msg;
    }
  }
  return 0;
};
com.inq.flash.client.chatskins.ScrollMonitor.getScrollBarWidth = function() {
  var scr;
  var inn;
  var wNoScroll;
  var wScroll;
  scr = window.parent.document.createElement("div");
  scr.style.position = "absolute";
  scr.style.top = "-1000px";
  scr.style.left = "-1000px";
  scr.style.width = "100px";
  scr.style.height = "50px";
  scr.style.overflow = "hidden";
  inn = window.parent.document.createElement("div");
  inn.style.width = "100%";
  inn.style.height = "200px";
  scr.appendChild(inn);
  window.parent.document.body.appendChild(scr);
  wNoScroll = inn.offsetWidth;
  scr.style.overflow = "auto";
  wScroll = inn.offsetWidth;
  window.parent.document.body.removeChild(window.parent.document.body.lastChild);
  return wNoScroll - wScroll;
};
com.inq.flash.client.chatskins.ScrollMonitor.prototype.__class__ = com.inq.flash.client.chatskins.ScrollMonitor;
com.inq.flash.client.chatskins.ScrollMonitor.numWaiting = 0;
com.inq.flash.client.chatskins.ScrollMonitor.sizeChangeEventTimer = -1;
com.inq.flash.client.chatskins.ScrollMonitor.suspendedLevel = 0;
com.inq.flash.client.chatskins.ScrollMonitor._scrollTopPrev = com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop();
com.inq.flash.client.chatskins.ScrollMonitor._scrollLeftPrev = com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft();
com.inq.flash.client.chatskins.ScrollMonitor._vieportWidthPrev = window.top.innerWidth;
com.inq.flash.client.chatskins.ScrollMonitor._zoomPrev = null;
com.inq.flash.client.chatskins.ScrollMonitor._initialZoom = null;
com.inq.flash.client.chatskins.ScrollMonitor._timerIdScroll = -1;
com.inq.flash.client.chatskins.ScrollMonitor.whenScrollClosure = null;
com.inq.flash.client.chatskins.ScrollMonitor.waitingForLull = false;
com.inq.flash.client.chatskins.ScrollMonitor._iPadSafariOrChrome = /(iPad).*AppleWebKit?.*Version\/(6|7|8|9)/i.test(navigator.userAgent) || /(iPad).*AppleWebKit?.*CriOS/i.test(navigator.userAgent);
com.inq.flash.client.control.PersistenceManager = function() {
  this.getCookieInfo();
};
$hxClasses["com.inq.flash.client.control.PersistenceManager"] = com.inq.flash.client.control.PersistenceManager;
com.inq.flash.client.control.PersistenceManager.__name__ = ["com", "inq", "flash", "client", "control", "PersistenceManager"];
com.inq.flash.client.control.PersistenceManager.Close = function() {
  com.inq.flash.client.control.PersistenceManager.__inst = null;
};
com.inq.flash.client.control.PersistenceManager.reopen = function() {
  com.inq.flash.client.control.PersistenceManager.__inst = new com.inq.flash.client.control.PersistenceManager;
};
com.inq.flash.client.control.PersistenceManager.ClearValues = function() {
  if (com.inq.flash.client.control.PersistenceManager.__inst != null) {
    com.inq.flash.client.control.PersistenceManager.__inst.clearValues();
  }
};
com.inq.flash.client.control.PersistenceManager.GetValue = function(label, defaultVal) {
  if (com.inq.flash.client.control.PersistenceManager.__inst != null) {
    return com.inq.flash.client.control.PersistenceManager.__inst.getValue(label, defaultVal);
  }
  return defaultVal;
};
com.inq.flash.client.control.PersistenceManager.SetValue = function(label, val, force, updateCookies) {
  if (updateCookies == null) {
    updateCookies = true;
  }
  if (force == null) {
    force = false;
  }
  if (com.inq.flash.client.control.PersistenceManager.__inst != null) {
    com.inq.flash.client.control.PersistenceManager.__inst.setValue(label, val, force, updateCookies);
  }
};
com.inq.flash.client.control.PersistenceManager.SetValues = function(map) {
  if (com.inq.flash.client.control.PersistenceManager.__inst != null) {
    com.inq.flash.client.control.PersistenceManager.__inst.setValues(map);
  }
};
com.inq.flash.client.control.PersistenceManager.createInstance = function() {
  haxe.Log.trace("create PersistenceManager", {fileName:"PersistenceManager.hx", lineNumber:105, className:"com.inq.flash.client.control.PersistenceManager", methodName:"createInstance"});
  return new com.inq.flash.client.control.PersistenceManager;
};
com.inq.flash.client.control.PersistenceManager.prototype.setCookieInfo = function() {
  com.inq.flash.client.control.FlashPeer.setV3Data(this.dict);
};
com.inq.flash.client.control.PersistenceManager.prototype.getCookieInfo = function() {
  this.dict = com.inq.flash.client.control.FlashPeer.getV3Data();
};
com.inq.flash.client.control.PersistenceManager.prototype.setValue = function(label, val, force, updateCookies) {
  if (updateCookies == null) {
    updateCookies = true;
  }
  if (force == null) {
    force = false;
  }
  if (force || this.dict[label] != val) {
    this.dict[label] = val;
    if (updateCookies) {
      this.setCookieInfo();
    }
  }
};
com.inq.flash.client.control.PersistenceManager.prototype.setValues = function(map) {
  var ix;
  var keyz = Reflect.fields(map);
  var _g1 = 0, _g = keyz.length;
  while (_g1 < _g) {
    var ix1 = _g1++;
    var k = "" + keyz[ix1];
    var v = map[k];
    this.dict[k] = v;
  }
  com.inq.flash.client.control.FlashPeer.setV3Data(this.dict);
};
com.inq.flash.client.control.PersistenceManager.prototype.getValue = function(label, defaultVal) {
  var value = this.dict[label];
  if (null == value) {
    value = defaultVal;
  }
  haxe.Log.trace("value [" + label + "]:" + Std.string(value), {fileName:"PersistenceManager.hx", lineNumber:56, className:"com.inq.flash.client.control.PersistenceManager", methodName:"getValue"});
  return value;
};
com.inq.flash.client.control.PersistenceManager.prototype.clearValues = function() {
  this.dict = {};
  this.setCookieInfo();
};
com.inq.flash.client.control.PersistenceManager.prototype.dict = null;
com.inq.flash.client.control.PersistenceManager.prototype.__class__ = com.inq.flash.client.control.PersistenceManager;
com.inq.flash.client.control.PersistenceManager.CLICK_STREAM_DATA_SENT_KEY = "s";
com.inq.flash.client.control.PersistenceManager.MUTE_SOUND = "m";
com.inq.flash.client.control.PersistenceManager.MINIMIZED_COUNT = "mc";
com.inq.flash.client.control.PersistenceManager.JSESSIONID = "ji";
com.inq.flash.client.control.PersistenceManager.REALLY_MINIMIZED = "rm";
com.inq.flash.client.control.PersistenceManager.HEIGHT = "h";
com.inq.flash.client.control.PersistenceManager.WIDTH = "w";
com.inq.flash.client.control.PersistenceManager.CLIENT_NAME_PERSIST = "cn";
com.inq.flash.client.control.PersistenceManager.__inst = com.inq.flash.client.control.PersistenceManager.createInstance();
com.inq.aria.ModalWindow = {};
com.inq.aria.ModalWindow.isOn = false;
com.inq.aria.ModalWindow.tags = ["img", "a", "li", "input", "div", "select", "button", "textarea"];
com.inq.aria.ModalWindow.buildModal = function(myWin) {
  if (!myWin || !myWin.document) {
    return false;
  }
  var children = myWin.document.body.children;
  var objects = [];
  var i, j, l, x;
  var ua = navigator.userAgent;
  var iFrames;
  var divs;
  if (ua.indexOf("MSIE 8") != -1 || ua.indexOf("MSIE 7") != -1) {
    iFrames = convertToArray(myWin.document.body.getElementsByTagName("iframe"));
    divs = convertToArray(myWin.document.body.getElementsByTagName("div"));
  } else {
    iFrames = Array.prototype.slice.call(myWin.document.body.getElementsByTagName("iframe"));
    divs = Array.prototype.slice.call(myWin.document.body.getElementsByTagName("div"));
  }
  try {
    for (i = 0;i < divs.length;i++) {
      if (divs[i].id === null || divs[i].id === "inqTitleBar" || com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat() || !divs[i].id.startsWith("tc") && !divs[i].id.startsWith("inq")) {
        if (divs[i].hasAttribute("aria-hidden")) {
          continue;
        }
        divs[i].setAttribute("aria-hidden", true);
        com.inq.aria.ModalWindow.ariaDivsHidden.push(divs[i]);
      } else {
        com.inq.aria.ModalWindow.ariaDivsChat.push(divs[i]);
      }
    }
    for (i = 0;i < children.length;i++) {
      if (children[i].nodeName.toLowerCase() !== "iframe" && (!children[i].id.startsWith("tc") && !children[i].id.startsWith("inq"))) {
        for (j = 0;j < com.inq.aria.ModalWindow.tags.length;j++) {
          if (ua.indexOf("MSIE 8") >= 0 || ua.indexOf("MSIE 7") >= 0) {
            objects = convertToArray(children[i].getElementsByTagName(com.inq.aria.ModalWindow.tags[j]));
          } else {
            objects = Array.prototype.slice.call(children[i].getElementsByTagName(com.inq.aria.ModalWindow.tags[j]));
          }
          for (l = 0;l < objects.length;l++) {
            if (objects[l].getAttribute("tabindex") != "-1") {
              objects[l].setAttribute("tabindex", "-1");
              com.inq.aria.ModalWindow.ariaTabObjs.push(objects[l]);
            }
          }
        }
      }
    }
    if (!com.inq.aria.ModalWindow.getIsPersistentChat()) {
      for (x = 0;x < iFrames.length;x++) {
        iFrames[x].setAttribute("aria-hidden", true);
        com.inq.aria.ModalWindow.ariaDivsHidden.push(iFrames[x]);
        iFrames[x].setAttribute("tabindex", "-1");
        com.inq.aria.ModalWindow.ariaTabObjs.push(iFrames[x]);
      }
    }
  } catch (ex) {
  }
  return true;
  function convertToArray(col) {
    var arr = [];
    if (col) {
      for (var idx = 0;idx < col.length;idx++) {
        arr.push(col[idx]);
      }
    }
    return arr;
  }
};
com.inq.aria.ModalWindow.buildModalWindow = function() {
  try {
    if (typeof com.inq.aria.ModalWindow.ariaDivsHidden === "undefined") {
      com.inq.aria.ModalWindow.ariaDivsHidden = [];
      com.inq.aria.ModalWindow.ariaDivsChat = [];
      com.inq.aria.ModalWindow.ariaTabObjs = [];
      com.inq.aria.ModalWindow.isOn = com.inq.aria.ModalWindow.buildModal(top);
    }
  } catch (ex) {
  }
};
com.inq.aria.ModalWindow.hideModalWindowDivs = function(toShow) {
  try {
    var i = 0;
    var aValue = toShow === true ? "true" : "false";
    if (typeof com.inq.aria.ModalWindow.ariaDivsHidden !== "undefined") {
      var divs = com.inq.aria.ModalWindow.ariaDivsHidden;
      for (i = 0;i < divs.length;i++) {
        com.inq.aria.ModalWindow.tempDisableAriaLive(divs[i], toShow);
        divs[i].setAttribute("aria-hidden", aValue);
      }
    }
    if (typeof com.inq.aria.ModalWindow.ariaTabObjs !== "undefined") {
      for (i = 0;i < com.inq.aria.ModalWindow.ariaTabObjs.length;i++) {
        com.inq.aria.ModalWindow.tempDisableAriaLive(com.inq.aria.ModalWindow.ariaTabObjs[i], toShow);
        if (toShow === true) {
          com.inq.aria.ModalWindow.ariaTabObjs[i].setAttribute("tabindex", "-1");
        } else {
          com.inq.aria.ModalWindow.ariaTabObjs[i].removeAttribute("tabindex");
        }
      }
    }
  } catch (ex) {
  }
};
com.inq.aria.ModalWindow.tempDisableAriaLive = function(obj, flag) {
  var ariaTemp;
  if (!flag) {
    if (obj.hasAttribute("aria-live")) {
      ariaTemp = obj.getAttribute("aria-live");
      obj.removeAttribute("aria-live");
      obj.setAttribute("data-live", ariaTemp);
    }
  } else {
    if (obj.hasAttribute("data-live")) {
      ariaTemp = obj.getAttribute("data-live");
      obj.removeAttribute("data-live");
      obj.setAttribute("aria-live", ariaTemp);
    }
  }
};
com.inq.aria.ModalWindow.removeModalWindow = function() {
  if (typeof com.inq.aria.ModalWindow.ariaTabObjs !== "undefined") {
    for (i = 0;i < com.inq.aria.ModalWindow.ariaTabObjs.length;i++) {
      com.inq.aria.ModalWindow.ariaTabObjs[i].removeAttribute("tabindex");
    }
  }
  if (typeof com.inq.aria.ModalWindow.ariaDivsHidden !== "undefined") {
    var divs = com.inq.aria.ModalWindow.ariaDivsHidden;
    for (var i = 0;i < divs.length;i++) {
      divs[i].removeAttribute("aria-hidden");
    }
  }
  com.inq.aria.ModalWindow.isOn = false;
};
com.inq.aria.ModalWindow.firstEl = null;
com.inq.aria.ModalWindow.lastEl = null;
com.inq.aria.ModalWindow.frontBlock = null;
com.inq.aria.ModalWindow.backBlock = null;
com.inq.aria.ModalWindow.setCircularModalWindow = function(div, firstEl, lastEl) {
  try {
    if (com.inq.utils.Capabilities.isMobile()) {
      return false;
    }
    com.inq.aria.ModalWindow.removeCircularModalWindow();
    com.inq.aria.ModalWindow.firstEl = firstEl;
    com.inq.aria.ModalWindow.lastEl = lastEl;
    if (!div || !com.inq.aria.ModalWindow.firstEl || !com.inq.aria.ModalWindow.lastEl) {
      return false;
    }
    com.inq.aria.ModalWindow.frontBlock = document.createElement("div");
    com.inq.aria.ModalWindow.backBlock = document.createElement("div");
    com.inq.aria.ModalWindow.frontBlock.setAttribute("tabIndex", "0");
    com.inq.aria.ModalWindow.backBlock.setAttribute("tabIndex", "0");
    com.inq.aria.ModalWindow.frontBlock.onfocus = firstListener;
    com.inq.aria.ModalWindow.backBlock.onfocus = lastListener;
    div.insertBefore(com.inq.aria.ModalWindow.frontBlock, div.firstChild);
    div.appendChild(com.inq.aria.ModalWindow.backBlock);
  } catch (err) {
    return false;
  }
  return true;
  function lastListener(evt) {
    if (com.inq.aria.ModalWindow.firstEl && com.inq.aria.ModalWindow.firstEl.focus) {
      com.inq.aria.ModalWindow.firstEl.focus();
    }
  }
  function firstListener(evt) {
    if (com.inq.aria.ModalWindow.lastEl && com.inq.aria.ModalWindow.lastEl.focus) {
      com.inq.aria.ModalWindow.lastEl.focus();
    }
  }
};
com.inq.aria.ModalWindow.removeCircularModalWindow = function() {
  com.inq.aria.ModalWindow.firstEl = null;
  com.inq.aria.ModalWindow.lastEl = null;
  if (com.inq.aria.ModalWindow.frontBlock !== null) {
    com.inq.aria.ModalWindow.frontBlock.parentElement.removeChild(com.inq.aria.ModalWindow.frontBlock);
    com.inq.aria.ModalWindow.frontBlock = null;
  }
  if (com.inq.aria.ModalWindow.backBlock !== null) {
    com.inq.aria.ModalWindow.backBlock.parentElement.removeChild(com.inq.aria.ModalWindow.backBlock);
    com.inq.aria.ModalWindow.backBlock = null;
  }
};
com.inq.aria.ModalWindow.modalEmailCanvas = function() {
  var divs, inputs, textareas, i, j, k;
  if (com.inq.aria.ModalWindow.isOn === false) {
    return false;
  }
  try {
    if (com.inq.aria.ModalWindow.ariaDivsChat && com.inq.flash.client.chatskins.EmailMgr.ariaDivsHidden == null) {
      divs = com.inq.aria.ModalWindow.ariaDivsChat;
      com.inq.flash.client.chatskins.EmailMgr.ariaDivsHidden = [];
      for (i = 0;i < divs.length;i++) {
        if (typeof divs[i] !== "undefined" && !(divs[i].id === "tcChat_emailInput" || divs[i].id === "tcChat_btnSendEmail" || divs[i].id === "tcChat_btnCancelEmail" || divs[i].id === "tcChat_btnCloseEmail" || divs[i].id === "tcChat_emailFormInput" || divs[i].id === "tcChat_email" || divs[i].id === "tcChat_Skin" || divs[i].id === "tcChat_tc-aria-readme") && divs[i].getAttribute("aria-hidden") != "true") {
          divs[i].setAttribute("aria-hidden", true);
          com.inq.flash.client.chatskins.EmailMgr.ariaDivsHidden.push(divs[i]);
        } else {
          if (typeof divs[i] !== "undefined" && divs[i].id === "tcChat_Skin") {
            com.inq.flash.client.chatskins.EmailMgr.ariaInputsHidden = [];
            inputs = divs[i].getElementsByTagName("input");
            for (j = 0;j < inputs.length;j++) {
              if (typeof inputs[j] !== "undefined" && inputs[j].id != "tcChat_btnSendEmail_img" && inputs[j].id != "tcChat_btnCancelEmail_img" && inputs[j].id != "tcChat_btnCloseEmail_img" && inputs[j].getAttribute("tabindex") != "-1") {
                inputs[j].setAttribute("tabindex", "-1");
                com.inq.flash.client.chatskins.EmailMgr.ariaInputsHidden.push(inputs[j]);
              }
            }
            com.inq.flash.client.chatskins.EmailMgr.ariaTextAreasHidden = [];
            textareas = divs[i].getElementsByTagName("textarea");
            for (k = 0;k < textareas.length;k++) {
              if (typeof textareas[k] !== "undefined" && textareas[k].id != "tcChat_emailInput_input" && textareas[k].getAttribute("tabindex") != "-1") {
                textareas[k].setAttribute("tabindex", "-1");
                com.inq.flash.client.chatskins.EmailMgr.ariaTextAreasHidden.push(textareas[k]);
              }
            }
          }
        }
      }
    }
    if (!com.inq.utils.Capabilities.isMobile()) {
      try {
        com.inq.aria.ModalWindow.setCircularModalWindow(com.inq.flash.client.chatskins.EmailMgr.emailCanvas._div, Application.application.getTextInput("emailInput")._input, Application.application.getButton("btnCloseEmail")._img);
      } catch (errCircular) {
      }
    }
  } catch (errEmlModal) {
    return false;
  }
  return true;
};
com.inq.aria.ModalWindow.unModalEmailCanvas = function() {
  if (com.inq.flash.client.chatskins.EmailMgr.ariaDivsHidden !== null) {
    var divs = com.inq.flash.client.chatskins.EmailMgr.ariaDivsHidden;
    for (var i = 0;i < divs.length;i++) {
      try {
        divs[i].setAttribute("aria-hidden", "");
      } catch (e1) {
      }
    }
    com.inq.flash.client.chatskins.EmailMgr.ariaDivsHidden = null;
    if (typeof com.inq.flash.client.chatskins.EmailMgr.ariaInputsHidden !== "undefined") {
      var inputs = com.inq.flash.client.chatskins.EmailMgr.ariaInputsHidden;
      for (var j = 0;j < inputs.length;j++) {
        try {
          inputs[j].removeAttribute("tabindex");
        } catch (e2) {
        }
      }
    }
    com.inq.flash.client.chatskins.EmailMgr.ariaInputsHidden = null;
    if (typeof com.inq.flash.client.chatskins.EmailMgr.ariaTextAreasHidden !== "undefined") {
      var textareas = com.inq.flash.client.chatskins.EmailMgr.ariaTextAreasHidden;
      for (var k = 0;k < textareas.length;k++) {
        try {
          textareas[k].removeAttribute("tabindex");
        } catch (e3) {
        }
      }
    }
    com.inq.flash.client.chatskins.EmailMgr.ariaTextAreasHidden = null;
    if (!com.inq.utils.Capabilities.isMobile()) {
      com.inq.aria.ModalWindow.removeCircularModalWindow();
    }
  }
};
com.inq.aria.ModalWindow.setCircularApplication = function() {
  var container = Application.application.getPrimaryObject();
  var tabbingElements = com.inq.aria.ModalWindow.getTabbingElementsList(container);
  var firstEl = tabbingElements[0];
  var lastEl = tabbingElements[tabbingElements.length - 1];
  return com.inq.aria.ModalWindow.setCircularModalWindow(container, firstEl, lastEl);
};
com.inq.aria.ModalWindow.getTabbingElementsList = function(parent) {
  var list = [];
  var tabbingElements;
  var selectors = "input, textarea, select, button, a, [tabindex]";
  if (parent.querySelectorAll) {
    for (var i = 0, l = parent.children.length;i < l;i++) {
      tabbingElements = parent.children[i].querySelectorAll(selectors);
      for (var j = 0;j < tabbingElements.length;j++) {
        if (tabbingElements[j].offsetHeight != 0 && (!tabbingElements[j].hasAttribute("tabindex") || tabbingElements[j].getAttribute("tabindex") != "-1")) {
          list.push(tabbingElements[j]);
        }
      }
    }
  }
  return list;
};
com.inq.flash.client.chatskins.SkinControl = function() {
};
$hxClasses["com.inq.flash.client.chatskins.SkinControl"] = com.inq.flash.client.chatskins.SkinControl;
com.inq.flash.client.chatskins.SkinControl.__name__ = ["com", "inq", "flash", "client", "chatskins", "SkinControl"];
com.inq.flash.client.chatskins.SkinControl.inqPersistentUrl = null;
com.inq.flash.client.chatskins.SkinControl.sPopCID = null;
com.inq.flash.client.chatskins.SkinControl.sPerCID = null;
com.inq.flash.client.chatskins.SkinControl.applicationController = null;
com.inq.flash.client.chatskins.SkinControl.connectionType = null;
com.inq.flash.client.chatskins.SkinControl.transcriptAgentColor = null;
com.inq.flash.client.chatskins.SkinControl.transcriptCustomerColor = null;
com.inq.flash.client.chatskins.SkinControl.transcriptFontSize = null;
com.inq.flash.client.chatskins.SkinControl.transcriptIndent = null;
com.inq.flash.client.chatskins.SkinControl.transcriptTabStops = null;
com.inq.flash.client.chatskins.SkinControl.transcriptFont = null;
com.inq.flash.client.chatskins.SkinControl.transcriptAgentSample = null;
com.inq.flash.client.chatskins.SkinControl.warningEvery2minId = null;
com.inq.flash.client.chatskins.SkinControl.warninglast30secId = null;
com.inq.flash.client.chatskins.SkinControl.timeoutTime = null;
com.inq.flash.client.chatskins.SkinControl.timeoutAction = null;
com.inq.flash.client.chatskins.SkinControl.getOpener = function() {
  var opener = null;
  try {
    opener = window.parent.opener["inqFrame"];
  } catch (e) {
    haxe.Log.trace("SkinControl.getOpener Error " + Std.string(e), {fileName:"SkinControl.hx", lineNumber:124, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"getOpener", customParams:["error"]});
  }
  return opener;
};
com.inq.flash.client.chatskins.SkinControl.StopTimer = function() {
  if (com.inq.flash.client.chatskins.SkinControl.timerTimeout != null) {
    com.inq.flash.client.chatskins.SkinControl.timerTimeout.stop();
    com.inq.flash.client.chatskins.SkinControl.timerTimeout = null;
  }
  com.inq.flash.client.chatskins.SkinControl.stopWarning();
};
com.inq.flash.client.chatskins.SkinControl.stopOpenerScript = function(bForce) {
  if (bForce == null) {
    bForce = false;
  }
  if (com.inq.flash.client.chatskins.SkinControl.openerScript != null) {
    haxe.Log.trace("stop OpenerScript", {fileName:"SkinControl.hx", lineNumber:141, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"stopOpenerScript"});
    com.inq.flash.client.chatskins.SkinControl.openerScript.stop(bForce);
  }
};
com.inq.flash.client.chatskins.SkinControl.extractBrowserNameAndVersion = function(userAgent) {
  var replaceWith = null;
  var pattern = null;
  var patternTable = [{browser:"IOS WebView", pattern:"(.*)(iPhone|iPod|iPad)(.*)AppleWebKit(?!.*Safari)(.*)", replaceWith:"IOS WebView"}, {browser:"Android WebView", pattern:"(.*?)Android(.*?)(wv|Version\\/[.0-9]+)(.*?)Chrome\\/([0-9]{2})(.*?)Mobile(.*)", replaceWith:"Android WebView/Stock Browser - Chrome $5"}, {browser:"Edge", pattern:"(.*)(Edge)(/)([0-9.]*)", replaceWith:"Edge $4"}, {browser:"Android Browser", pattern:".*Android(?!.*Chrome)(?=.*Mobile Safari).*Version/([0-9.]+).*", replaceWith:"Android Browser $1"}, 
  {browser:"Chrome", pattern:"(.*)(Chrome)([/| ])([0-9a-zA-Z.]*)( .*)", replaceWith:"Chrome $4"}, {browser:"Chrome", pattern:"(.*?)(AppleWebKit)(.*?) CriOS/([0-9]{2,})(.*?)Safari(.*)", replaceWith:"Chrome $4"}, {browser:"IE", pattern:"(.*)(Trident)(/)([0-9.]*)(.*)", replaceWith:"$4", ieVersionCorrection:4}, {browser:"IE", pattern:"(.*)(MSIE)( )([0-9.]*)(;.*)", replaceWith:"IE $4"}, {browser:"IE", pattern:"(.*)(MSIE)(.*)", replaceWith:"IE"}, {browser:"Firefox", pattern:"(.*)(Gecko)([/ ])([0-9]*)(.*)(Firefox)([/ ])([0-9a-zA-Z.]*)(.*)", 
  replaceWith:"$6 $8 $4"}, {browser:"Firefox", pattern:"(.*)(Firefox)([/| ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Firefox", pattern:"(.*)(Firefox)(.*)", replaceWith:"$2"}, {browser:"Safari", pattern:"(.*)(AppleWebKit)(.*)(Version)([/| ])([0-9a-zA-Z.]*)( .*)", replaceWith:"Safari $6"}, {browser:"Safari", pattern:"(.*)(AppleWebKit)(.*)", replaceWith:"Safari"}, {browser:"Opera", pattern:"(.*)(Opera)([/| ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Opera", pattern:"(.*)(Opera)(.*)", 
  replaceWith:"$2"}, {browser:"Lobo", pattern:"(.*)(Lobo)([/| ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Beonex", pattern:"(.*)(Beonex)([/| ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"BonEcho", pattern:"(.*)(BonEcho)([/| ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Camino", pattern:"(.*)(Camino)([/| ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Chimera", pattern:"(.*)(Chimera)([/| ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Dillo", pattern:"(.*)(Dillo)([/ ])([0-9a-zA-Z.]*)(.*)", 
  replaceWith:"$2 $4"}, {browser:"Elinks", pattern:"(.*)(Elinks)([/ (])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Epiphany", pattern:"(.*)(Epiphany)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Firebird", pattern:"(.*)(Firebird)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Flock", pattern:"(.*)(Flock)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Galeon", pattern:"(.*)(Galeon)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"GranParadiso", 
  pattern:"(.*)(GranParadiso)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"IBrowse", pattern:"(.*)(IBrowse)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"iCab", pattern:"(.*)(iCab)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Iceape", pattern:"(.*)(Iceape)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Iceweasel", pattern:"(.*)(Iceweasel)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"K-Meleon", pattern:"(.*)(K-Meleon)([/ ])([0-9a-zA-Z.]*)(.*)", 
  replaceWith:"$2 $4"}, {browser:"K-Ninja", pattern:"(.*)(K-Ninja)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Kazehakase", pattern:"(.*)(Kazehakase)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Links", pattern:"(.*)(Links)([/( ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Lynx", pattern:"(.*)(Lynx)([y/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Minefield", pattern:"(.*)(Minefield)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"MultiZilla", 
  pattern:"(.*)(MultiZilla)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Mosaic", pattern:"(.*)(Mosaic)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"NetNewsWire", pattern:"(.*)(NetNewsWire)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Netscape", pattern:"(.*)(Netscape)([6]*)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $5"}, {browser:"OmniWeb", pattern:"(.*)(OmniWeb)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Oregano", pattern:"(.*)(Oregano)([/ ])([0-9a-zA-Z.]*)(.*)", 
  replaceWith:"$2 $4"}, {browser:"Phoenix", pattern:"(.*)(Phoenix)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"SeaMonkey", pattern:"(.*)(SeaMonkey)([/ ]*)([0-9a-zA-Z.]*)(.*)", replaceWith:"$2 $4"}, {browser:"Shiira", pattern:"(.*)(Shiira)([/ ]*)(([0-9][0-9a-zA-Z.]*)|([ ]))(.*)", replaceWith:"$2 $4"}, {browser:"Sunrise", pattern:"(.*)(Sunrise)([/ ]*)(([0-9][0-9a-zA-Z.]*)|([ ]))(.*)", replaceWith:"$2 $4"}, {browser:"Netscape", pattern:"(.*)(Mozilla)([/ ])([0-9a-zA-Z.]*)(.*)", replaceWith:"Netscape $4"}];
  var _g1 = 0, _g = patternTable.length;
  while (_g1 < _g) {
    var i = _g1++;
    pattern = new EReg(patternTable[i].pattern, "i");
    replaceWith = patternTable[i].replaceWith;
    var b = pattern.match(userAgent);
    if (b) {
      var version = pattern.replace(userAgent, replaceWith);
      var versionCorrection = patternTable[i].ieVersionCorrection;
      if (versionCorrection) {
        return "IE " + new String(new Number(version) + versionCorrection) + ".0";
      }
      return version;
    }
  }
  return "Unknown";
};
com.inq.flash.client.chatskins.SkinControl.getApplicationController = function() {
  return com.inq.flash.client.chatskins.SkinControl.applicationController;
};
com.inq.flash.client.chatskins.SkinControl.SkinResize = function(data) {
  try {
    Application.application.setWidth(Application.application.screen.getWidth());
    Application.application.setHeight(Application.application.screen.getHeight());
  } catch (err) {
    if (js.Boot.__instanceof(err, Error)) {
    } else {
      throw err;
    }
  }
  return true;
};
com.inq.flash.client.chatskins.SkinControl.applyTranscriptToPersistent = function(sHtml) {
  com.inq.flash.client.chatskins.SkinControl.cw.setHtmlText(sHtml);
};
com.inq.flash.client.chatskins.SkinControl.setSocketIP = function(crAddress) {
  com.inq.flash.client.chatskins.SkinControl.sSocketIP = crAddress;
};
com.inq.flash.client.chatskins.SkinControl.IdentifyPlatform = function() {
  var sep;
  var sPlatformInfo;
  sep = "^^";
  sPlatformInfo = "";
  sPlatformInfo += com.inq.flash.client.chatskins.SkinControl.CSDL_OS + com.inq.utils.Capabilities._getOS() + sep + com.inq.flash.client.chatskins.SkinControl.CSDL_PLAYER + com.inq.utils.Capabilities.playerType + sep + com.inq.flash.client.chatskins.SkinControl.CSDL_MANUFACTURER + com.inq.utils.Capabilities.manufacturer + sep;
  try {
    if (com.inq.flash.client.control.FlashVars.getValue("userAgent") != "") {
      com.inq.flash.client.control.FlashVars.setValue("userAgent", js.Lib.window.navigator.userAgent);
      sPlatformInfo += com.inq.flash.client.chatskins.SkinControl.CSDL_USERAGENT + StringTools.htmlEscape(com.inq.flash.client.control.FlashVars.getValue("userAgent")) + sep + com.inq.flash.client.chatskins.SkinControl.CSDL_BROWSER + com.inq.flash.client.chatskins.SkinControl.extractBrowserNameAndVersion(com.inq.flash.client.control.FlashVars.getValue("userAgent")) + sep;
      if (!com.inq.flash.client.chatskins.SkinControl.isContinued() && com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
        sPlatformInfo += com.inq.flash.client.chatskins.SkinControl.CSDL_CLICK2PER + "YES" + sep;
      }
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  haxe.Log.trace("IdentifyPlatform(): exit", {fileName:"SkinControl.hx", lineNumber:289, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"IdentifyPlatform"});
  return sPlatformInfo;
};
com.inq.flash.client.chatskins.SkinControl.setApplicationController = function(controller) {
  haxe.Log.trace("setApplicationController: entered", {fileName:"SkinControl.hx", lineNumber:295, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"setApplicationController"});
  com.inq.flash.client.chatskins.SkinControl.applicationController = controller;
};
com.inq.flash.client.chatskins.SkinControl.ChatWindowInitialized = function() {
  haxe.Log.trace("chat window initialized", {fileName:"SkinControl.hx", lineNumber:301, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"ChatWindowInitialized"});
  com.inq.flash.client.chatskins.SkinControl.Test();
};
com.inq.flash.client.chatskins.SkinControl.setTranscriptWindowSettings = function() {
  com.inq.flash.client.chatskins.SkinControl.transcriptAgentColor = "#0000CB";
  com.inq.flash.client.chatskins.SkinControl.transcriptCustomerColor = "#000000";
  com.inq.flash.client.chatskins.SkinControl.transcriptFontSize = "11pt";
  com.inq.flash.client.chatskins.SkinControl.transcriptIndent = "" + 80;
  com.inq.flash.client.chatskins.SkinControl.transcriptTabStops = "[" + com.inq.flash.client.chatskins.SkinControl.transcriptIndent + "]";
  com.inq.flash.client.chatskins.SkinControl.transcriptFont = "Veranda";
  com.inq.flash.client.chatskins.SkinControl.transcriptAgentSample = "Jessica:  ";
  try {
    com.inq.flash.client.chatskins.SkinControl.transcriptAgentColor = "#" + HxOverrides.substr("000000" + Std.string(com.inq.utils.Util.getConfig("lAgentColor", 203).toString(16)), -6, null);
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  try {
    com.inq.flash.client.chatskins.SkinControl.transcriptCustomerColor = "#" + HxOverrides.substr("000000" + Std.string(com.inq.utils.Util.getConfig("lCustomerColor", 0).toString(16)), -6, null);
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  try {
    com.inq.flash.client.chatskins.SkinControl.transcriptFontSize = "000000" + Std.string(com.inq.utils.Util.getConfig("pointSize", "11")) + "pt";
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  try {
    com.inq.flash.client.chatskins.SkinControl.transcriptFont = com.inq.utils.Util.getConfig("sFont", "Veranda");
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  try {
    com.inq.flash.client.chatskins.SkinControl.transcriptAgentSample = com.inq.utils.Util.getConfig("sSampleAgentText", "Jessica:  ");
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.AddCustomerTextToChatWindow = function(Msg, position) {
  return com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow(com.inq.flash.client.control.FlashVars.getCustomerName(), com.inq.flash.messagingframework.StringUtils.htmlEncode(Msg), com.inq.flash.client.chatskins.ChatTextArea.CUSTOMER, position);
};
com.inq.flash.client.chatskins.SkinControl.ReAddCustomerTextToChatWindow = function(Msg, position) {
  if (com.inq.flash.client.chatskins.SkinControl.hostIndx < com.inq.flash.client.chatskins.SkinControl.customerIndx) {
    return -1;
  }
  com.inq.flash.client.chatskins.SkinControl.hostIndx++;
  return com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow(com.inq.flash.client.control.FlashVars.getCustomerName(), Msg, com.inq.flash.client.chatskins.ChatTextArea.CUSTOMER, position);
};
com.inq.flash.client.chatskins.SkinControl.isContinued = function() {
  var bContinued = com.inq.flash.client.control.FlashVars.isContinued();
  return bContinued ? true : false;
};
com.inq.flash.client.chatskins.SkinControl.ClearTranscript = function() {
  haxe.Log.trace("SkinControl.ClearTranscript: entered", {fileName:"SkinControl.hx", lineNumber:347, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"ClearTranscript"});
  try {
    if (null != com.inq.flash.client.chatskins.SkinControl.cw) {
      com.inq.flash.client.chatskins.SkinControl.cw.clearTranscript();
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("ClearTranscript error: " + Std.string(e), {fileName:"SkinControl.hx", lineNumber:353, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"ClearTranscript", customParams:["error"]});
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow = function(Id, Msg, ChatType, position) {
  var val = -1;
  haxe.Log.trace("SkinControl.AddTranscriptItemToChatWindow: entered", {fileName:"SkinControl.hx", lineNumber:360, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"AddTranscriptItemToChatWindow"});
  try {
    val = com.inq.flash.client.chatskins.SkinControl.cw.addTranscript(Id, Msg, ChatType, position);
    com.inq.flash.client.chatskins.FormMgr.updateFormTimeExecutor(com.inq.flash.client.chatskins.SkinControl.cw);
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("SkinControl.AddTranscriptItemToChatWindow: ERROR:" + Std.string(e), {fileName:"SkinControl.hx", lineNumber:365, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"AddTranscriptItemToChatWindow", customParams:["error"]});
    } else {
      throw e;
    }
  }
  return val;
};
com.inq.flash.client.chatskins.SkinControl.modifyDTFields = function(dtId, selectedLinkName) {
  var div = window.document.getElementById(dtId);
  var elements = div.getElementsByTagName("INPUT");
  if (elements.length > 0) {
    var _g1 = 0, _g = elements.length;
    while (_g1 < _g) {
      var indx = _g1++;
      var el = elements[indx];
      com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendInputState(el.name, "disabled", "true", true);
      elements = div.getElementsByTagName("INPUT");
    }
  }
  var elements1 = div.getElementsByTagName("A");
  if (elements1.length > 0) {
    var _g1 = 0, _g = elements1.length;
    while (_g1 < _g) {
      var indx = _g1++;
      var el = elements1[indx];
      com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendInputState(el.name, "disabled", selectedLinkName != el.name ? "true" : "bold", true);
      elements1 = div.getElementsByTagName("A");
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.modifyDTString = function(msg, selectedLinkName, selectedCheckboxNames) {
  if (msg == null) {
    return null;
  }
  msg = (new EReg("<input", "ig")).split(msg).join("<input disabled ");
  msg = (new EReg("(<a[^>]*)(href[\\s]*=[\\s]*['\"][^'\"]*['\"])([^>]*>)", "ig")).replace(msg, "$1 $3");
  msg = (new EReg("(<[^>]*)(onclick[\\s]*=[\\s]*['\"][^'\"]*return)([^>]*>)", "ig")).replace(msg, "$1 $2 false; $3");
  msg = (new EReg("<a", "ig")).replace(msg, "<a style='color:gray;' ");
  if (selectedLinkName != null && selectedLinkName.length > 0) {
    var rg = new EReg("name[\\s]*=[\\s]*['\\\"]" + selectedLinkName + "['\\\"]", "ig");
    var out = "name ='" + selectedLinkName + "' style='font-weight: bold; color:#323232;' ";
    msg = rg.split(msg).join(out);
    var rgLink = new EReg("<a([^>]*)(name[\\s]*=[\\s]*['\\\"]" + selectedLinkName + "['\\\"])([^>]*)>", "ig");
    var outLink = "<a style= 'font-weight: bold; color:#323232;' onclick = 'return false;' $1>";
    msg = rgLink.replace(msg, outLink);
  }
  if (selectedCheckboxNames != null) {
    var _g1 = 0, _g = selectedCheckboxNames.length;
    while (_g1 < _g) {
      var i = _g1++;
      var name = selectedCheckboxNames[i];
      var rg = new EReg("name[\\s]*=[\\s]*['\"]" + name + "['\"]", "ig");
      var out = "name ='" + name + "' checked ";
      msg = rg.split(msg).join(out);
    }
  }
  return msg;
};
com.inq.flash.client.chatskins.SkinControl.AddOpenerToChatWindow = function(Id, Msg, ChatType, position) {
  haxe.Log.trace("SkinControl.AddOpenerToChatWindow: entered", {fileName:"SkinControl.hx", lineNumber:472, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"AddOpenerToChatWindow"});
  try {
    com.inq.flash.client.chatskins.SkinControl.cw.addOpenerScript(Id, Msg, ChatType, position);
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.MoveChatHistory = function(chatWindow) {
  return;
};
com.inq.flash.client.chatskins.SkinControl.isInApplication = function(name) {
  var bExists = false;
  try {
    var obj = Application.application.getMxmlItem(name);
    if (null != obj) {
      bExists = true;
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      bExists = false;
    } else {
      throw e;
    }
  }
  return bExists;
};
com.inq.flash.client.chatskins.SkinControl.Test = function() {
  if (com.inq.flash.client.control.FlashVars.getPersistentFrame()) {
    return;
  }
  if (null != com.inq.flash.client.control.FlashVars.getValue("chatID")) {
    return;
  }
};
com.inq.flash.client.chatskins.SkinControl.doChatExit = function() {
  com.inq.flash.client.chatskins.SkinControl.stopOpenerScript();
  com.inq.flash.client.chatskins.SkinControl.StopTimer();
  com.inq.flash.client.chatskins.SkinControl.applicationController.shutdownQuietly();
  var tY = com.inq.flash.client.control.FlashPeer.isThankYouEnabled();
  if (tY) {
    com.inq.flash.client.chatskins.SkinControl.doThankYou();
    if (com.inq.flash.client.chatskins.SkinControl.isClick2call() && !com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
      var thankyouNoSubmit = com.inq.utils.Util.getConfig("thankyouNoSubmit", null);
      if (null != thankyouNoSubmit) {
        var btnThankYou = Application.application.getButton("btnThankYou");
        btnThankYou.setLabel(thankyouNoSubmit);
      }
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.sendCloseEventToAutomations = function(event) {
  var sendingEventFlag = false;
  var xframes = Application.application.getXFrameItems();
  for (var i = 0;i < xframes.length;i++) {
    if (xframes[i].getVisible() && xframes[i].sendCustomEventToXForms(event, params)) {
      sendingEventFlag = true;
    }
  }
  return sendingEventFlag;
};
com.inq.flash.client.chatskins.SkinControl.sendEventToAllAutomatons = function(event, params) {
  var sendingEventFlag = false;
  var xframes = Application.application.getXFrameItems();
  for (var i = 0;i < xframes.length;i++) {
    if (xframes[i].sendCustomEventToXForms(event, params)) {
      sendingEventFlag = true;
    }
  }
  return sendingEventFlag;
};
com.inq.flash.client.chatskins.SkinControl.doThankYou = function() {
  var btn = Application.application.getButton("btnCloseChat");
  btn.addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SkinControl.actionCloseThankYouNotice);
  com.inq.flash.client.chatskins.SkinControl.gotoThankyouScene();
};
com.inq.flash.client.chatskins.SkinControl.agentClosesChat = function() {
  var tY = com.inq.flash.client.control.FlashPeer.isThankYouEnabled();
  var closeChatOnAgentClose = com.inq.utils.Util.getConfig("closeChatOnAgentClose", false);
  com.inq.flash.client.chatskins.SkinControl.applicationController.disable();
  com.inq.flash.client.control.PersistenceManager.ClearValues();
  com.inq.flash.client.control.PersistenceManager.Close();
  if (tY) {
    com.inq.flash.client.chatskins.ChatTextFocusMonitor.clearWindowPosition();
  }
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.Close();
  com.inq.flash.client.chatskins.CoBrowseMgr.agentEndsCob();
  com.inq.flash.client.control.MinimizeManager.Close();
  if (closeChatOnAgentClose) {
    com.inq.flash.client.chatskins.SkinControl.closeChat();
    com.inq.flash.client.chatskins.SkinControl.HideClientDecorations();
  } else {
    if (tY) {
      com.inq.flash.client.chatskins.SkinControl.doThankYou();
    } else {
      var agentExitLine = com.inq.flash.client.control.FlashVars.getValue("agentExitLine");
      if (agentExitLine.length > 0) {
        com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow("", com.inq.flash.client.control.FlashVars.getValue("agentExitLine"), com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, -1);
      }
      var fadeInputsEls = Application.application.getMxmlItem("fadeUserInput");
      if (fadeInputsEls) {
        fadeInputsEls.setVisible(true);
      }
      var sendButton = com.inq.flash.client.chatskins.SkinControl.getSendButton();
      if (sendButton && sendButton._img) {
        sendButton._img.setAttribute("aria-hidden", true);
        sendButton._img.setAttribute("tabIndex", "-1");
      }
      var chatWindow = Application.application.getMxmlItem("chatWindow");
      if (chatWindow && chatWindow._div) {
        chatWindow._div.setAttribute("tabIndex", "-1");
        chatWindow._div.setAttribute("aria-hidden", "true");
        chatWindow._div.setAttribute("aria-label", "");
        chatWindow._div.removeAttribute("role");
      }
      com.inq.aria.ModalWindow.removeCircularModalWindow();
      com.inq.flash.client.chatskins.SkinControl.disableInput();
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.preparingClosingChat = function() {
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().disable();
  com.inq.flash.client.chatskins.SkinControl.StopTimer();
  com.inq.flash.client.chatskins.SkinControl.endCobrowse();
  com.inq.flash.client.chatskins.ScrollMonitor.Close();
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.Close();
  com.inq.flash.client.control.PersistenceManager.ClearValues();
  com.inq.flash.client.control.PersistenceManager.Close();
  com.inq.flash.client.control.MinimizeManager.Close();
  com.inq.flash.client.control.UploadHandler.close();
};
com.inq.flash.client.chatskins.SkinControl.connectionLostClosingChat = function() {
  if (Application.application.getVisible()) {
    var tY = com.inq.flash.client.control.FlashPeer.isThankYouEnabled();
    var closeChatOnAgentClose = com.inq.utils.Util.getConfig("closeChatOnAgentClose", false);
    var connectionLostLine = com.inq.flash.client.control.FlashVars.getValue("connectionLostLine");
    com.inq.flash.client.chatskins.SkinControl.preparingClosingChat();
    com.inq.flash.client.control.FlashPeer.setDisconnectFlag();
    if (tY && !closeChatOnAgentClose) {
      com.inq.flash.client.chatskins.ChatTextFocusMonitor.clearWindowPosition();
      com.inq.flash.client.chatskins.SkinControl.doThankYou();
    } else {
      if (closeChatOnAgentClose || connectionLostLine == null || connectionLostLine.length == 0) {
        com.inq.stage.ViewportMgr.close();
        com.inq.flash.client.chatskins.SkinControl.HideClientDecorations();
        com.inq.flash.client.control.FlashPeer.closeChat();
        com.inq.flash.client.chatskins.SkinControl.restoreFocusToMainWindow();
        if (com.inq.flash.client.control.FlashVars.getPersistentFrame()) {
          window.parent.close();
        }
      } else {
        com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow("", connectionLostLine, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, -1);
        var fadeInputsEls = Application.application.getMxmlItem("fadeUserInput");
        if (fadeInputsEls) {
          fadeInputsEls.setVisible(true);
        }
        var sendButton = com.inq.flash.client.chatskins.SkinControl.getSendButton();
        if (sendButton && sendButton._img) {
          sendButton._img.setAttribute("aria-hidden", true);
          sendButton._img.setAttribute("tabIndex", "-1");
        }
        com.inq.flash.client.chatskins.SkinControl.disableInput();
        com.inq.aria.ModalWindow.removeCircularModalWindow();
      }
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.cleanUpChatAndThankyou = function() {
  com.inq.flash.client.chatskins.SkinControl.applicationController.customerClosesPopup();
  com.inq.flash.client.control.PersistenceManager.ClearValues();
  com.inq.flash.client.control.PersistenceManager.Close();
  com.inq.flash.client.chatskins.SkinControl.StopTimer();
  var btn = Application.application.getButton("btnCloseChat");
  btn.addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChat);
  com.inq.flash.client.chatskins.SkinControl.ClearTranscript();
  com.inq.flash.client.chatskins.SkinControl.doThankYou();
};
com.inq.flash.client.chatskins.SkinControl.timeoutClosesChat = function() {
  var tY = com.inq.flash.client.control.FlashPeer.isThankYouEnabled();
  if (tY) {
    com.inq.flash.client.chatskins.SkinControl.cleanUpChatAndThankyou();
  } else {
    com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChat(null);
  }
};
com.inq.flash.client.chatskins.SkinControl.getThankYou = function() {
  var cTY = null;
  if (com.inq.flash.client.chatskins.SkinControl.wasSaleAction()) {
    cTY = Application.application.getCanvas("thankYouSale");
  }
  if (cTY == null) {
    cTY = Application.application.getCanvas("thankYou");
  }
  return cTY;
};
com.inq.flash.client.chatskins.SkinControl.getThankYouButton = function() {
  var out = null;
  if (com.inq.flash.client.chatskins.SkinControl.wasSaleAction()) {
    out = Application.application.getButton("btnThankYouSale");
  }
  if (out == null) {
    out = Application.application.getButton("btnThankYou");
  }
  return out;
};
com.inq.flash.client.chatskins.SkinControl.fireMxmlHandler = function(HandlerName) {
  try {
    var func = com.inq.utils.Util.getConfig(HandlerName, null);
    if (func != null) {
      func();
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.gotoThankyouScene = function() {
  var cTY = com.inq.flash.client.chatskins.SkinControl.getThankYou();
  var tyLabel = Application.application.getButton("btnThankYou").label;
  var tkyMsg = tyLabel !== null ? tyLabel : "Thank you. Close this window.";
  if (cTY != null) {
    cTY.removeAttribute("aria-hidden");
    if (!com.inq.flash.client.control.FlashPeer.getIsBuilder()) {
      com.inq.flash.client.chatskins.SkinControl.ClearTranscript();
    }
    cTY.setVisible(true);
    com.inq.flash.client.chatskins.SkinControl.isThankYouShown = true;
    com.inq.flash.client.chatskins.SkinControl.fireMxmlHandler("onThankYouVisible");
    var btnThankYou = com.inq.flash.client.chatskins.SkinControl.getThankYouButton();
    if (com.inq.flash.client.chatskins.SkinControl.tYImageLabel != "") {
      com.inq.flash.client.chatskins.SkinControl.defaultTYImageLabel = Application.application.getButton("btnThankYou").label;
      btnThankYou.setLabel(com.inq.flash.client.chatskins.SkinControl.tYImageLabel);
      tkyMsg = com.inq.flash.client.chatskins.SkinControl.tYImageLabel;
    } else {
      if (com.inq.flash.client.chatskins.SkinControl.defaultTYImageLabel != "") {
        btnThankYou.setLabel(com.inq.flash.client.chatskins.SkinControl.defaultTYImageLabel);
        tkyMsg = com.inq.flash.client.chatskins.SkinControl.defaultTYImageLabel;
      }
    }
    if (com.inq.flash.client.chatskins.SkinControl.wasSaleAction()) {
      var thankYouSaleText = com.inq.utils.Util.getConfig("thankYouSaleText", null);
      tkyMsg = thankYouSaleText;
      if (thankYouSaleText != null) {
        if (btnThankYou != null) {
          btnThankYou.setLabel(thankYouSaleText);
        }
      }
    }
    com.inq.utils.Timer.delay(function() {
      com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", tkyMsg, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM);
    }, 500);
    try {
      if (com.inq.flash.client.chatskins.SkinControl.isClick2call()) {
        var chatCanvas = Application.application.getCanvas("callForm");
        chatCanvas.setVisible(false);
        chatCanvas = Application.application.getCanvas("callFormPersistent");
        chatCanvas.setVisible(false);
      }
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
        haxe.Log.trace("error" + Std.string(e), {fileName:"SkinControl.hx", lineNumber:662, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"gotoThankyouScene"});
      } else {
        throw e;
      }
    }
    if (com.inq.utils.Capabilities.isSafari() || com.inq.utils.Capabilities.isAndroid() || com.inq.utils.Capabilities.isChromeiOS8()) {
      com.inq.flash.client.control.FlashPeer.closeChatMonitor();
    }
  }
  if (!com.inq.flash.client.control.FlashPeer.getIsBuilder()) {
    com.inq.flash.client.chatskins.SkinControl.disableInput();
  }
  var sendButton = com.inq.flash.client.chatskins.SkinControl.getSendButton();
  if (sendButton) {
    sendButton.setVisible(false);
  }
};
com.inq.flash.client.chatskins.SkinControl.HideClientDecorations = function() {
  com.inq.ui.ClientBody.closeAll();
};
com.inq.flash.client.chatskins.SkinControl.closeChat = function() {
  try {
    com.inq.flash.client.chatskins.SkinControl.removeModalWindow();
    if (com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtnAdded == true) {
      com.inq.flash.client.control.MinimizeManager.dummyRestoreBtn.remove();
    }
    com.inq.stage.ViewportMgr.close();
    com.inq.flash.client.chatskins.SkinControl.HideClientDecorations();
    com.inq.flash.client.chatskins.SkinControl.stopOpenerScript();
    com.inq.flash.client.chatskins.SkinControl.StopTimer();
    com.inq.flash.client.control.FlashPeer.closeChat();
    com.inq.flash.client.chatskins.SkinControl.restoreFocusToMainWindow();
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("ERROR " + Std.string(e), {fileName:"SkinControl.hx", lineNumber:687, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"closeChat"});
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.closeThroughThankYouScene = function() {
  var btn = Application.application.getButton("btnCloseChatx") || Application.application.getButton("btnCloseChat");
  if (btn != null) {
    if (btn.styles["onClick"]) {
      btn._div.onclick = null;
      btn._img.onclick = $bind(btn, com.inq.ui.Button.prototype.doClick);
    }
    btn.addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SkinControl.actionCloseThankYouNotice);
  }
  com.inq.flash.client.chatskins.SkinControl.doThankYou();
  if (com.inq.flash.client.chatskins.SkinControl.isClick2call() && !com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
    var thankyouNoSubmit = com.inq.utils.Util.getConfig("thankyouNoSubmit", null);
    if (null != thankyouNoSubmit) {
      var btnThankYou = Application.application.getButton("btnThankYou ");
      btnThankYou.setLabel(thankyouNoSubmit);
    }
  }
  com.inq.flash.client.control.FlashPeer.closePersistentWindowIfOpen();
};
com.inq.flash.client.chatskins.SkinControl.restoreFocusToMainWindow = function() {
  if (!com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
    window.top.focus();
  } else {
    com.inq.flash.client.chatskins.SkinControl.getOpener().focus();
  }
};
com.inq.flash.client.chatskins.SkinControl.HideChat = com.inq.flash.client.chatskins.SkinControl.closeChat;
com.inq.flash.client.chatskins.SkinControl.ShowChat = function() {
};
com.inq.flash.client.chatskins.SkinControl.scrollTranscriptToEnd = function() {
  if (com.inq.flash.client.chatskins.SkinControl.cw != null) {
    com.inq.flash.client.chatskins.SkinControl.cw.scrollToEnd();
  }
};
com.inq.flash.client.chatskins.SkinControl.requestLcKillPopup = function() {
};
com.inq.flash.client.chatskins.SkinControl.ask4Transcript = function() {
};
com.inq.flash.client.chatskins.SkinControl.showPersistentChatButtons = function(bShow) {
  haxe.Log.trace("SkinControl:showPersistentChatButtons(" + Std.string(bShow) + ");", {fileName:"SkinControl.hx", lineNumber:723, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"showPersistentChatButtons"});
  if (!com.inq.flash.client.control.FlashVars.getPersistentFrame()) {
    var clickPersistent = Application.application.getButton("ClickPersistent");
    if (null != clickPersistent) {
      clickPersistent.setVisible(bShow);
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.showChatIDText = function(bShow) {
  haxe.Log.trace("SkinControl:showChatIDText(" + Std.string(bShow) + ");", {fileName:"SkinControl.hx", lineNumber:736, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"showChatIDText"});
  var chatIDText = Application.application.getMxmlItem("ChatIDText");
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("ChatIDText")) {
    chatIDText.setVisible(bShow);
  }
};
com.inq.flash.client.chatskins.SkinControl.killPopup = function() {
  haxe.Log.trace("SkinControl.killPopup: Entered", {fileName:"SkinControl.hx", lineNumber:746, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"killPopup"});
  if (com.inq.flash.client.chatskins.SkinControl.applicationController.isConnected()) {
    com.inq.flash.client.chatskins.SkinControl.applicationController.shutdownQuietly();
  }
  com.inq.flash.client.chatskins.SkinControl.showPersistentChatButtons(false);
  try {
    com.inq.flash.client.control.FlashPeer.closeChat();
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      com.inq.flash.client.chatskins.XTrace.StackTrace(e);
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.endChatQuietPopup = function() {
  haxe.Log.trace("SkinControl.endChatQuietPopup: Entered", {fileName:"SkinControl.hx", lineNumber:757, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"endChatQuietPopup"});
  com.inq.flash.client.chatskins.SkinControl.applicationController.customerClosesPopup();
  com.inq.flash.client.chatskins.SkinControl.quietPopup();
};
com.inq.flash.client.chatskins.SkinControl.quietPopup = function() {
  haxe.Log.trace("SkinControl.killPopup: Entered", {fileName:"SkinControl.hx", lineNumber:767, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"quietPopup"});
  try {
    com.inq.flash.client.control.FlashPeer.closeChat();
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      com.inq.flash.client.chatskins.XTrace.StackTrace(e);
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.goToPersistentChat = function(obj) {
  var success;
  var clickPersistent = null;
  if (com.inq.flash.client.chatskins.SkinControl.bPersistBtnPressed == false) {
    com.inq.flash.client.chatskins.SkinControl.bPersistBtnPressed = true;
    clickPersistent = Application.application.getButton("ClickPersistent");
    if (null != clickPersistent) {
      clickPersistent._img.blur();
    }
    success = com.inq.flash.client.control.FlashPeer.popOutChat(true, com.inq.flash.client.chatskins.SkinControl.resizable);
    com.inq.flash.client.chatskins.SkinControl.removeModalWindow();
    com.inq.flash.client.chatskins.SkinControl.stopOpenerScript(true);
    com.inq.flash.client.chatskins.SkinControl.StopTimer();
    com.inq.flash.client.chatskins.SkinControl.bPersistBtnPressed = false;
  }
};
com.inq.flash.client.chatskins.SkinControl.PushToFrameset = function(_sUrl, _sTarget) {
  try {
    var myURL = window.parent.document.URL;
    var destURL = HxOverrides.substr(_sUrl, _sUrl.length - 1, null) != "/" ? _sUrl : HxOverrides.substr(_sUrl, 0, _sUrl.length - 1);
    myURL = HxOverrides.substr(myURL, myURL.length - 1, null) != "/" ? myURL : HxOverrides.substr(myURL, 0, myURL.length - 1);
    if (_sTarget.toLowerCase() == "_self" && myURL.toLowerCase() == destURL.toLowerCase()) {
      haxe.Log.trace("SkinControl.PushToFrameset: already at target URL", {fileName:"SkinControl.hx", lineNumber:801, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"PushToFrameset"});
      return;
    }
    com.inq.flash.client.chatskins.SkinControl.executeAfter(function() {
      return com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.hasNoOutstandingMessages();
    }, function() {
      com.inq.flash.client.control.FlashPeer.PushToFrameset(destURL, _sTarget);
    }, "SkinControl.PushToFrameset", null, null);
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      com.inq.flash.client.chatskins.XTrace.StackTrace("SkinControl.PushToFrameset:" + Std.string(e), "error");
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.enablePersistentChatButtonAndEstablishUrl = function(_sUrl) {
  haxe.Log.trace("SkinControl.enablePersistentChatButtonAndEstablishUrl entered", {fileName:"SkinControl.hx", lineNumber:833, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"enablePersistentChatButtonAndEstablishUrl"});
  if (com.inq.flash.client.control.FlashVars.getPersistentFrame()) {
    return;
  }
  var ClickPersistent = Application.application.getButton("ClickPersistent");
  if (ClickPersistent.getVisible()) {
    return;
  }
  com.inq.flash.client.chatskins.SkinControl.showPersistentChatButtons(true);
  var chatWindow = Application.application.getMxmlItem("chatWindow");
  var chatBottom = Std.parseInt(chatWindow.getStyle("bottom"));
  var persHeight = Std.parseInt(ClickPersistent.getStyle("height"));
  var newChatBtm = chatBottom + persHeight;
  var newPersBtm = chatBottom;
  chatWindow.setStyle("bottom", "" + newChatBtm);
  ClickPersistent.setStyle("bottom", "" + newPersBtm);
  ClickPersistent.setStyle("left", chatWindow.getStyle("left"));
  ClickPersistent.setStyle("right", chatWindow.getStyle("right"));
  com.inq.flash.client.chatskins.SkinControl.cw.scrollToBottom();
  com.inq.flash.client.chatskins.SkinControl.inqPersistentUrl = _sUrl;
  try {
    var ti = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
    var txt = ti._getInput();
    if (txt.trim().length == 0 || txt == com.inq.flash.client.chatskins.SkinControl.getIntroduction()) {
      ClickPersistent.setImageFocus();
    }
  } catch (err) {
  }
};
com.inq.flash.client.chatskins.SkinControl.isClick2call = function() {
  if (!com.inq.flash.client.chatskins.SkinControl.click2call) {
    com.inq.flash.client.chatskins.SkinControl.click2call = com.inq.flash.client.chatskins.SkinControl.isInApplication("btnCall");
  }
  return com.inq.flash.client.chatskins.SkinControl.click2call;
};
com.inq.flash.client.chatskins.SkinControl.getCallerNameString = function() {
  return com.inq.flash.client.chatskins.SkinControl.callerNameString.length == 0 ? com.inq.flash.client.control.FlashVars.getCustomerName() : com.inq.flash.client.chatskins.SkinControl.callerNameString;
};
com.inq.flash.client.chatskins.SkinControl.actionBtnCall = function(me) {
  try {
    com.inq.flash.client.chatskins.SkinControl.click2call = true;
    com.inq.flash.client.chatskins.SkinControl.callStreamData = com.inq.flash.client.chatskins.SkinControl.getCallStreamData() + com.inq.flash.client.chatskins.SkinControl.getCallFormData();
    var txtInput = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
    var text = txtInput._getInput();
    if (text != "") {
      com.inq.flash.client.chatskins.SkinControl.stopOpenerScript();
      com.inq.flash.client.chatskins.SkinControl.StopTimer();
    }
    var thankyouNoAgentOnSubmit = com.inq.utils.Util.getConfig("thankyouNoAgentOnSubmit", null);
    var thankyouAfterHoursOnSubmit = com.inq.utils.Util.getConfig("thankyouAfterHoursOnSubmit", null);
    if (thankyouNoAgentOnSubmit == null && thankyouAfterHoursOnSubmit != null) {
      thankyouNoAgentOnSubmit = thankyouAfterHoursOnSubmit;
    }
    if (thankyouAfterHoursOnSubmit == null && thankyouNoAgentOnSubmit != null) {
      thankyouAfterHoursOnSubmit = thankyouNoAgentOnSubmit;
    }
    com.inq.flash.client.chatskins.SkinControl.applicationController.callButtonClicked();
  } catch (unknown) {
    haxe.Log.trace("Unknown exception : " + Std.string(unknown), {fileName:"SkinControl.hx", lineNumber:883, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"actionBtnCall"});
    return;
  }
};
com.inq.flash.client.chatskins.SkinControl.actionBtnSend = function(me) {
  var ti = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
  if (com.inq.flash.client.chatskins.SkinControl.accessibilityHelp.isAccessibilityHelpOnBtnSend) {
    com.inq.flash.client.chatskins.SkinControl.accessibilityHelp.removeHelpOnBtnSend();
    ti.setFocus(true);
    return;
  }
  if (com.inq.flash.client.chatskins.ChatTextFocusMonitor.isBlurHandlerPending()) {
    com.inq.flash.client.chatskins.ChatTextFocusMonitor.cancelBlurHandler();
    ti.setFocus(true);
  }
  try {
    var txt = ti._getInput();
    if (txt.trim().length > 0 && txt != com.inq.flash.client.chatskins.SkinControl.getIntroduction() && com.inq.flash.client.chatskins.SkinControl.keyCount > 0) {
      com.inq.flash.client.chatskins.SkinControl.stopOpenerScript();
      com.inq.flash.client.chatskins.SkinControl.StopTimer();
    } else {
      ti._setInput("");
    }
    var msgcnt = com.inq.flash.client.control.PersistenceManager.GetValue("msgcnt", 0);
    com.inq.flash.client.chatskins.SkinControl.applicationController.sendButtonClicked();
    ti.setFocus(true);
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.accessibilityHelp = {addHelpOnBtnSend:function() {
  var btnSendP = com.inq.flash.client.chatskins.SkinControl.getSendButton();
  var that = com.inq.flash.client.chatskins.SkinControl.accessibilityHelp;
  if (this.isAddHelpOnBtnSendCalled) {
    return;
  } else {
    this.isAddHelpOnBtnSendCalled = true;
  }
  if (btnSendP && btnSendP._img) {
    that.isAccessibilityHelpOnBtnSendinBuild = true;
    that.btnSendOriginalTitle = btnSendP._img.getAttribute("title");
    that.btnSendOriginalAlt = btnSendP._img.getAttribute("alt");
    btnSendP._img.setAttribute("title", "Double tap to start editing mode");
    btnSendP._img.setAttribute("alt", "Start Chat");
    btnSendP._img.addEventListener("blur", that.removeHelpOnBtnSend, false);
    btnSendP._img.focus();
    that.isAccessibilityHelpOnBtnSendinBuild = false;
    that.isAccessibilityHelpOnBtnSend = true;
  }
}, removeHelpOnBtnSend:function() {
  var that = com.inq.flash.client.chatskins.SkinControl.accessibilityHelp;
  var btnSendP = com.inq.flash.client.chatskins.SkinControl.getSendButton();
  btnSendP._img.setAttribute("title", that.btnSendOriginalTitle);
  btnSendP._img.setAttribute("alt", that.btnSendOriginalAlt);
  btnSendP._img.removeEventListener("blur", that.removeHelpOnBtnSend, false);
  that.isAccessibilityHelpOnBtnSend = false;
  that.isAccessibilityHelpUsed = true;
}, btnSendOriginalTitle:"", btnSendOriginalAlt:"", isAccessibilityHelpOnBtnSendinBuild:false, isAccessibilityHelpOnBtnSend:false, isButtonHasFirstFocus:false, isAddHelpOnBtnSendCalled:false, isAccessibilityHelpUsed:false};
com.inq.flash.client.chatskins.SkinControl.actionBtnPopOut = function(me) {
  com.inq.flash.client.chatskins.SkinControl.removeModalWindow();
  return com.inq.flash.client.control.FlashPeer.popOutChat(true, com.inq.flash.client.chatskins.SkinControl.resizable);
};
com.inq.flash.client.chatskins.SkinControl.customerClosingChat = function() {
  com.inq.flash.client.chatskins.SkinControl.stopOpenerScript();
  com.inq.flash.client.chatskins.SkinControl.ClearTranscript();
  com.inq.flash.client.chatskins.SkinControl.endCobrowse();
  com.inq.flash.client.chatskins.SkinControl.StopTimer();
  com.inq.flash.client.control.PersistenceManager.ClearValues();
  com.inq.flash.client.control.PersistenceManager.Close();
  com.inq.flash.client.control.MinimizeManager.Close();
  com.inq.flash.client.chatskins.ScrollMonitor.Close();
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.Close();
  com.inq.flash.client.control.FlashPeer.onBeforeChatClosed();
  com.inq.flash.client.chatskins.SkinControl.applicationController.customerClosesPopup();
  com.inq.flash.client.chatskins.SkinControl.customerClosedChat();
};
com.inq.flash.client.chatskins.SkinControl.customerClosedChat = function() {
  com.inq.flash.client.chatskins.SkinControl.applicationController.disable();
  com.inq.flash.client.chatskins.SkinControl.bInitialized = false;
  com.inq.flash.client.chatskins.OpenerScript.resetOpenersStopped();
  com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry = 0;
  var isPersistentFrame = com.inq.flash.client.control.FlashVars.getPersistentFrame();
  var thankYou = com.inq.flash.client.chatskins.SkinControl.isThankYou;
  var thankYouShown = com.inq.flash.client.chatskins.SkinControl.isThankYouShown;
  var thankYouCanvas = Application.application.getCanvas("thankYou");
  var interacted = com.inq.flash.client.control.Incrementality.interacted;
  if (!thankYou || !thankYouCanvas || !interacted || isPersistentFrame || thankYouShown) {
    com.inq.flash.client.chatskins.SkinControl.closeChat();
    if (Application.application.close != null) {
      Application.application.close();
    }
    if (isPersistentFrame) {
      window.parent.close();
    }
  } else {
    com.inq.flash.client.chatskins.SkinControl.closeThroughThankYouScene();
  }
  if (typeof surveyWindow != "undefined") {
    setTimeout(function() {
      try {
        surveyWindow.focus();
      } catch (er) {
      }
    }, 1E3);
  }
};
com.inq.flash.client.chatskins.SkinControl.actionCloseChat = function(tY) {
  com.inq.flash.client.chatskins.SkinControl.actionCloseChatFun(tY);
};
com.inq.flash.client.chatskins.SkinControl.actionCloseChatFun = function(tY) {
  if (tY === undefined) {
    tY = com.inq.flash.client.control.FlashPeer.isThankYouEnabled();
  }
  com.inq.flash.client.chatskins.SkinControl.isThankYou = !!tY;
  com.inq.flash.client.chatskins.SkinControl.customerClosingChat();
};
com.inq.flash.client.chatskins.SkinControl.endCobrowse = function() {
  com.inq.flash.client.chatskins.CoBrowseMgr.endCob();
};
com.inq.flash.client.chatskins.SkinControl.actionCloseThankYouNotice = function(me) {
  if (com.inq.flash.client.control.FlashVars.getPersistentFrame()) {
    window.parent.close();
  } else {
    com.inq.flash.client.chatskins.SkinControl.closeChat();
  }
  return false;
};
com.inq.flash.client.chatskins.SkinControl.actionFocusVideo = function(me) {
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("video")) {
    top.window.document.getElementById("tcChat_video").focus();
  } else {
  }
  return false;
};
com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChat = function(me) {
  if (Application.application[com.inq.utils.Util.configArea][com.inq.utils.Util.xformsCloseEventFlag]) {
    var sendingEventFlag = com.inq.flash.client.chatskins.SkinControl.sendCloseEventToAutomations("onChatClose");
    if (!sendingEventFlag) {
      com.inq.flash.client.chatskins.SkinControl.actionCloseChat();
    }
  } else {
    com.inq.flash.client.chatskins.SkinControl.actionCloseChat();
  }
  return true;
};
com.inq.flash.client.chatskins.SkinControl.actionBtnClickToChat = function(me) {
};
com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChatWindow = function(me) {
  com.inq.flash.client.chatskins.SkinControl.showPersistentChatButtons(false);
  com.inq.flash.client.chatskins.SkinControl.applicationController.shutdown();
  com.inq.flash.client.control.FlashPeer.closeChat();
};
com.inq.flash.client.chatskins.SkinControl.actionClickOnTxtInput = function(me) {
  if (com.inq.flash.client.chatskins.SkinControl.bHaveFocus == false) {
    com.inq.flash.client.chatskins.SkinControl.bHaveFocus = true;
    haxe.Log.trace("Flash gained focus", {fileName:"SkinControl.hx", lineNumber:1067, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"actionClickOnTxtInput"});
  }
};
com.inq.flash.client.chatskins.SkinControl.actionAutoTabToPhoneField2 = function(ke) {
  var callerPhoneField1 = Application.application.getTextInput(com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE + "phoneField1"), callerPhoneField2 = Application.application.getTextInput(com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE + "phoneField2");
  if (callerPhoneField1 != null && StringTools.trim(callerPhoneField1._getInput()).length == 3 && (ke.keyCode >= 48 && ke.keyCode <= 57 || ke.keyCode >= 96 && ke.keyCode <= 105 || ke.keyCode == 39) && callerPhoneField1.getCursorPosition() == 3) {
    callerPhoneField2.setFocus();
  }
  return true;
};
com.inq.flash.client.chatskins.SkinControl.actionAutoTabToPhoneField3 = function(ke) {
  var callerPhoneField2 = Application.application.getTextInput(com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE + "phoneField2"), callerPhoneField3 = Application.application.getTextInput(com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE + "phoneField3");
  if (callerPhoneField2 != null && StringTools.trim(callerPhoneField2._getInput()).length == 3 && (ke.keyCode >= 48 && ke.keyCode <= 57 || ke.keyCode >= 96 && ke.keyCode <= 105 || ke.keyCode == 39) && callerPhoneField2.getCursorPosition() == 3) {
    callerPhoneField3.setFocus();
  }
  return true;
};
com.inq.flash.client.chatskins.SkinControl.setupButtons = function() {
  try {
    var stg = Application.application.stage;
    if (stg != null) {
      stg.addEventListener(com.inq.events.Event.RESIZE, com.inq.flash.client.chatskins.SkinControl.SkinResize);
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnPopOut")) {
    Application.application.getButton("btnPopOut").addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SkinControl.goToPersistentChat);
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("ClickPersistent")) {
    Application.application.getButton("ClickPersistent").addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SkinControl.goToPersistentChat);
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("ChatIDText")) {
    Application.application.getTextInput("ChatIDText").setHtmlText("ID: <" + (Std.string(com.inq.flash.client.control.FlashVars.getValue("chatID")) + ">"));
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnSend")) {
    Application.application.getButton("btnSend").addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SkinControl.actionBtnSend);
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnCall")) {
    Application.application.getButton("btnCall").addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SkinControl.actionBtnCall);
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("chat_submit_phoneField1")) {
    Application.application.chat_submit_phoneField1.addEventListener(com.inq.events.KeyboardEvent.KEY_UP, com.inq.flash.client.chatskins.SkinControl.actionAutoTabToPhoneField2);
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("chat_submit_phoneField2")) {
    Application.application.chat_submit_phoneField2.addEventListener(com.inq.events.KeyboardEvent.KEY_UP, com.inq.flash.client.chatskins.SkinControl.actionAutoTabToPhoneField3);
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnCloseChat")) {
    Application.application.getButton("btnCloseChat").addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChat);
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("txtInput")) {
    com.inq.flash.client.chatskins.SkinControl.getTextInputField().addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SkinControl.actionClickOnTxtInput);
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnThankYou")) {
    Application.application.getButton("btnThankYou").addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SkinControl.actionCloseThankYouNotice);
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnFocusVideo")) {
    Application.application.getButton("btnFocusVideo").addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SkinControl.actionFocusVideo);
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnThankYouSale")) {
    Application.application.getButton("btnThankYouSale").addEventListener(com.inq.events.MouseEvent.CLICK, actionCloseThankyouNotice);
  }
};
com.inq.flash.client.chatskins.SkinControl.InitThankYouGraphic = function() {
  haxe.Log.trace("InitThankYouGraphic()", {fileName:"SkinControl.hx", lineNumber:1150, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"InitThankYouGraphic"});
  var thankYou = com.inq.flash.client.chatskins.SkinControl.getThankYou();
  thankYou.setVisible(false);
  haxe.Log.trace("InitThankYouGraphic(): btnThankYou.visible = " + (thankYou.getVisible() ? "true" : "false"), {fileName:"SkinControl.hx", lineNumber:1153, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"InitThankYouGraphic"});
  thankYou.onRelease = function(evt) {
    com.inq.flash.client.chatskins.SkinControl.showPersistentChatButtons(false);
    com.inq.flash.client.chatskins.SkinControl.applicationController.shutdown();
    com.inq.flash.client.control.FlashPeer.closeChat();
  };
};
com.inq.flash.client.chatskins.SkinControl.checkForGoToPersistentChatMsg = function(msg) {
  haxe.Log.trace("SkinControl.as: checkForGoToPersistentChatMsg: entered", {fileName:"SkinControl.hx", lineNumber:1164, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"checkForGoToPersistentChatMsg"});
  if (null == msg) {
    haxe.Log.trace("msg is null", {fileName:"SkinControl.hx", lineNumber:1168, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"checkForGoToPersistentChatMsg"});
    return "";
  }
  var sMsgRevised = msg;
  haxe.Log.trace("SkinControl.as: checkForGoToPersistentChatMsg: msg = " + sMsgRevised.split("<").join("[").split(">").join("]"), {fileName:"SkinControl.hx", lineNumber:1179, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"checkForGoToPersistentChatMsg"});
  var indx = msg.indexOf("asfunction:goToPersistentChat,");
  var sUrl = null;
  if (indx >= 0) {
    haxe.Log.trace("SkinControl.as: checkForGoToPersistentChatMsg: embeded anchor for asfunction:goToPersistentChat ", {fileName:"SkinControl.hx", lineNumber:1184, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"checkForGoToPersistentChatMsg"});
    var ixAnchorEnd = -1;
    var ixAnchorStart = -1;
    indx = msg.indexOf(",", indx) + 1;
    while (" " == HxOverrides.substr(msg, indx, 1)) {
      indx++;
    }
    var indxEnd = msg.indexOf('"', indx);
    sUrl = HxOverrides.substr(msg, indx, indxEnd - indx);
    sUrl = sUrl.split("&amp;").join("&");
    haxe.Log.trace("SkinControl.as: checkForGoToPersistentChatMsg: URL is '" + sUrl + "'", {fileName:"SkinControl.hx", lineNumber:1194, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"checkForGoToPersistentChatMsg"});
    ixAnchorEnd = msg.indexOf("</", indx);
    ixAnchorEnd = msg.indexOf(">", ixAnchorEnd);
    ixAnchorStart = msg.lastIndexOf("<", indx);
    haxe.Log.trace("ixAnchorStart=" + ixAnchorStart, {fileName:"SkinControl.hx", lineNumber:1204, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"checkForGoToPersistentChatMsg"});
    haxe.Log.trace("ixAnchorEnd=" + ixAnchorEnd, {fileName:"SkinControl.hx", lineNumber:1205, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"checkForGoToPersistentChatMsg"});
    if (ixAnchorStart < ixAnchorEnd) {
      sMsgRevised = HxOverrides.substr(msg, 0, ixAnchorStart) + HxOverrides.substr(msg, ixAnchorEnd + 1, null);
      haxe.Log.trace("OLD MESSAGE: " + msg.split("<").join("&lt;").split(">").join("&gt;"), {fileName:"SkinControl.hx", lineNumber:1209, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"checkForGoToPersistentChatMsg"});
      haxe.Log.trace("NEW MESSAGE: " + sMsgRevised.split("<").join("&lt;").split(">").join("&gt;"), {fileName:"SkinControl.hx", lineNumber:1210, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"checkForGoToPersistentChatMsg"});
    }
  }
  if (com.inq.flash.client.control.FlashVars.getPersistentFrame()) {
    return sMsgRevised;
  }
  if (null != sUrl) {
    com.inq.flash.client.control.FlashPeer.setSessionParam("persistentChat", "true");
    com.inq.flash.client.chatskins.SkinControl.enablePersistentChatButtonAndEstablishUrl(sUrl);
  }
  return sMsgRevised;
};
com.inq.flash.client.chatskins.SkinControl.reFormatMessage = function(msg) {
  var sMsg = msg.toString();
  sMsg = sMsg.split("<br/></font><br/>").join("</font><br/>");
  sMsg = sMsg.split("<br /></font><br />").join("</font><br/>");
  sMsg = sMsg.split("</font><br/><br/>").join("</font><br/>");
  sMsg = sMsg.split('<font face="Verdana" size="10" color="#000000">').join("<font face='Verdana' size='10' color='#000000'>");
  sMsg = sMsg.split('<font face="Verdana" size="10" color="#0000cd">').join("<font face='Verdana' size='10' color='#0000cd'>");
  sMsg = sMsg.split("<chatBox>").join("");
  sMsg = sMsg.split("</chatBox>").join("");
  sMsg = sMsg.split("<chatBox />").join("");
  sMsg = com.inq.flash.client.chatskins.SkinControl.checkForGoToPersistentChatMsg(msg);
  return sMsg;
};
com.inq.flash.client.chatskins.SkinControl.setFocusOnInputField = function(forceButton) {
  if (com.inq.flash.client.chatskins.SkinControl.isClick2call()) {
    if (!com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
      var elementArray = window.document.getElementsByTagName("textarea");
      if (elementArray.length > 0) {
        var ti = com.inq.ui.TextInput.getContainer(elementArray[0]);
        ti.setFocus();
      }
    }
  } else {
    if (forceButton && (com.inq.utils.Capabilities.isSafari() || com.inq.utils.Capabilities.isIOSWebView()) && com.inq.utils.Capabilities.isMobile()) {
      com.inq.flash.client.chatskins.SkinControl.accessibilityHelp.isAddHelpOnBtnSendCalled = false;
      com.inq.flash.client.chatskins.SkinControl.accessibilityHelp.addHelpOnBtnSend();
      com.inq.flash.client.chatskins.SkinControl.accessibilityHelp.isButtonHasFirstFocus = true;
    } else {
      var ti = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
      if (ti != null) {
        ti.setFocus();
      }
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.getTextInputField = function() {
  return Application.application.getTextInput("txtInput");
};
com.inq.flash.client.chatskins.SkinControl.startFocusListener = function() {
  var someListener = new com.inq.utils.Dictionary;
  someListener.onSetFocus = function(oldfocus, newfocus) {
    var sFrom, sTo;
    sFrom = oldfocus.toString();
    sTo = newfocus.toString();
    haxe.Log.trace("Flash changed focus: From " + sFrom + " To " + sTo, {fileName:"SkinControl.hx", lineNumber:1276, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"startFocusListener"});
    if (newfocus == null) {
      com.inq.flash.client.chatskins.SkinControl.objHasFocus = null;
      com.inq.flash.client.chatskins.SkinControl.bHaveFocus = false;
      haxe.Log.trace("Flash lost focus", {fileName:"SkinControl.hx", lineNumber:1282, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"startFocusListener"});
    } else {
      if (oldfocus == null) {
        com.inq.flash.client.chatskins.SkinControl.objHasFocus = newfocus;
      } else {
        com.inq.flash.client.chatskins.SkinControl.objHasFocus = newfocus;
      }
    }
    if (com.inq.flash.client.chatskins.SkinControl.objHasFocus == com.inq.flash.client.chatskins.SkinControl.getTextInputField()) {
      var stg = Application.application.stage;
      var ti = Application.application.getTextInput("txtInput");
      stg.setObjectFocus(ti);
      ti.caretIndex = ti.indexCaret;
      ti.selectionBeginIndex = ti.indexBegin;
      ti.selectionEndIndex = ti.indexEnd;
      haxe.Log.trace("Flash: Set Begin index = " + ti.indexBegin + " End Index = " + ti.indexEnd, {fileName:"SkinControl.hx", lineNumber:1301, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"startFocusListener"});
    }
  };
};
com.inq.flash.client.chatskins.SkinControl.startMouseListener = function() {
  var someListenerSocket;
  someListenerSocket = new EventDispatcher;
  someListenerSocket.onMouseDown = function(ev) {
    if (com.inq.flash.client.chatskins.SkinControl.bHaveFocus == false) {
      com.inq.flash.client.chatskins.SkinControl.bHaveFocus = true;
      haxe.Log.trace("Flash gained focus", {fileName:"SkinControl.hx", lineNumber:1316, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"startMouseListener"});
    }
  };
  someListenerSocket.onMouseUp = function(ev) {
    var txtInput = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
    if (com.inq.flash.client.chatskins.SkinControl.objHasFocus == txtInput) {
      txtInput.indexCaret = txtInput.caretIndex;
      txtInput.indexBegin = txtInput.selectionBeginIndex;
      txtInput.indexEnd = txtInput.selectionEndIndex;
      haxe.Log.trace("Flash: Begin index = " + txtInput.indexBegin + " End Index = " + txtInput.indexEnd, {fileName:"SkinControl.hx", lineNumber:1326, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"startMouseListener"});
    }
  };
};
com.inq.flash.client.chatskins.SkinControl.uponEnterKey = function() {
  com.inq.flash.client.chatskins.SkinControl.actionBtnSend(null);
};
com.inq.flash.client.chatskins.SkinControl.monitorCustomerTyping = function() {
  if (com.inq.flash.client.chatskins.SkinControl.keyCount == 0 && com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry < 1) {
    window.setTimeout(com.inq.flash.client.control.Incrementality.onEngaged, 0);
  }
  com.inq.flash.client.chatskins.SkinControl.keyCount++;
  com.inq.flash.client.chatskins.SkinControl.bHaveFocus = true;
  if (com.inq.flash.client.chatskins.SkinControl.timerForTyping == -1) {
    window.setTimeout(com.inq.flash.client.chatskins.SkinControl.whenStartTyping, 0);
  } else {
    window.clearTimeout(com.inq.flash.client.chatskins.SkinControl.timerForTyping);
  }
  com.inq.flash.client.chatskins.SkinControl.timerForTyping = window.setTimeout(com.inq.flash.client.chatskins.SkinControl.whenStoppedTyping, com.inq.flash.client.chatskins.SkinControl.typingTimeout);
};
com.inq.flash.client.chatskins.SkinControl.onInput = function(e) {
  if (/\n/.test(e.target.value)) {
    e.target.value.replace(/\n/, "");
    com.inq.flash.client.chatskins.SkinControl.uponEnterKey();
    return false;
  }
  window.setTimeout(com.inq.flash.client.chatskins.SkinControl.monitorCustomerTyping, 0);
  return true;
};
com.inq.flash.client.chatskins.SkinControl.onPaste = function(e) {
  window.setTimeout(com.inq.flash.client.chatskins.SkinControl.monitorCustomerTyping, 0);
  return true;
};
com.inq.flash.client.chatskins.SkinControl.onKeyDown = function(ke) {
  if (com.inq.flash.client.chatskins.SkinControl.isSkinActive()) {
    if (ke.keyCode == com.inq.ui.Keyboard.ENTER) {
      return false;
    }
    return true;
  } else {
    return true;
  }
};
com.inq.flash.client.chatskins.SkinControl.onKeyPress = function(ke) {
  try {
    var keyCode = !ke.charCode ? ke.keyCode : ke.charCode;
    if (keyCode === com.inq.ui.Keyboard.ENTER && !ke.altKey && !ke.ctrlKey && !ke.shiftKey) {
      com.inq.flash.client.chatskins.SkinControl.uponEnterKey();
      return false;
    }
    window.setTimeout(com.inq.flash.client.chatskins.SkinControl.monitorCustomerTyping, 0);
    return true;
  } catch (err) {
    haxe.Log.trace("ERROR: " + err, {fileName:"SkinControl.js", lineNumber:2010, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"onKeyPress"});
  }
};
com.inq.flash.client.chatskins.SkinControl.onKeyPressEmailInput = function(ke) {
  if (ke.charCode == com.inq.ui.Keyboard.ENTER && !ke.altKey && !ke.ctrlKey && !ke.shiftKey) {
    com.inq.flash.client.chatskins.EmailMgr.actionBtnSendEmail();
    return false;
  }
  if (ke.keyCode == com.inq.ui.Keyboard.ESCAPE) {
    com.inq.flash.client.chatskins.EmailMgr.unModalEmailCanvas();
    com.inq.flash.client.chatskins.EmailMgr.setState(com.inq.flash.client.chatskins.EmailMgr.SHOW_NONE_STATE);
    com.inq.flash.client.chatskins.EmailMgr.setState(com.inq.flash.client.chatskins.EmailMgr.SHOW_BUTTON_STATE);
    var txtInput = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
    txtInput.setFocus(false);
  }
  return true;
};
com.inq.flash.client.chatskins.SkinControl.onKeyUp = function(ke) {
  if (com.inq.flash.client.chatskins.SkinControl.isSkinActive()) {
    if (ke.keyCode == com.inq.ui.Keyboard.ENTER) {
      window.setTimeout(com.inq.flash.client.chatskins.SkinControl.uponEnterKey, 0);
      return false;
    }
    window.setTimeout(com.inq.flash.client.chatskins.SkinControl.monitorCustomerTyping, 0);
    return true;
  } else {
    return true;
  }
};
com.inq.flash.client.chatskins.SkinControl.isSkinActive = function() {
  var inqFrameElement = window.frameElement;
  if (inqFrameElement != null) {
    return inqFrameElement.style.display == "none" ? false : true;
  }
  return false;
};
com.inq.flash.client.chatskins.SkinControl.onKeyDownCall = function(ke) {
  return true;
};
com.inq.flash.client.chatskins.SkinControl.onKeyUpCall = function(ke) {
  if (com.inq.flash.client.chatskins.SkinControl.keyCount == 0 && com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry < 1) {
    window.setTimeout(function() {
      com.inq.flash.client.control.Incrementality.onEngaged();
    }, 50);
  }
  com.inq.flash.client.chatskins.SkinControl.keyCount++;
  return true;
};
com.inq.flash.client.chatskins.SkinControl.onTextInputFocus = function(ke) {
  if (com.inq.flash.client.chatskins.SkinControl.keyCount == 0 && com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry < 1) {
    try {
      var ti = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
      if (null != $bind(ti, ti.select)) {
        ti.select();
      }
    } catch (e) {
    }
  }
  return true;
};
com.inq.flash.client.chatskins.SkinControl.whenStoppedTyping = function() {
  if (com.inq.flash.client.chatskins.SkinControl.timerForTyping != -1) {
    window.clearTimeout(com.inq.flash.client.chatskins.SkinControl.timerForTyping);
    com.inq.flash.client.chatskins.SkinControl.timerForTyping = -1;
    com.inq.flash.client.chatskins.SkinControl.applicationController.TypingActivity(false);
  }
};
com.inq.flash.client.chatskins.SkinControl.whenStartTyping = function() {
  com.inq.flash.client.chatskins.SkinControl.applicationController.TypingActivity(true);
};
com.inq.flash.client.chatskins.SkinControl.onTextInputFocusLoss = function(ke) {
  com.inq.flash.client.chatskins.SkinControl.whenStoppedTyping();
  return true;
};
com.inq.flash.client.chatskins.SkinControl.setUpFocusAndSelection = function() {
  var txtInput = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
  if (!com.inq.utils.Capabilities.isMobile()) {
    txtInput.setFocus();
  }
  if (!com.inq.flash.client.chatskins.SkinControl.isContinued() && com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry == 0) {
    txtInput.select();
  }
  Application.application.setVisible(true);
  if (com.inq.utils.Util.getConfig("enableModal", false) == true && !com.inq.flash.client.control.FlashPeer.getIsBuilder()) {
    com.inq.flash.client.chatskins.SkinControl.buildModalWindow();
  }
};
com.inq.flash.client.chatskins.SkinControl.buildModalWindow = function() {
  com.inq.aria.ModalWindow.buildModalWindow();
};
com.inq.flash.client.chatskins.SkinControl.hideModalWindowDivs = function(toShow) {
  com.inq.aria.ModalWindow.hideModalWindowDivs(toShow);
};
com.inq.flash.client.chatskins.SkinControl.removeModalWindow = function() {
  com.inq.aria.ModalWindow.removeModalWindow();
};
com.inq.flash.client.chatskins.SkinControl.startKeyListener = function() {
  var txtInput = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
  if (txtInput == null) {
    return;
  }
  try {
    com.inq.flash.client.chatskins.SkinControl.typingTimeout = com.inq.utils.Util.getConfig("clientTypingTimout", null);
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  if (com.inq.flash.client.chatskins.SkinControl.typingTimeout == null) {
    com.inq.flash.client.chatskins.SkinControl.typingTimeout = 4E3;
  }
  if (com.inq.flash.client.chatskins.SkinControl.typingTimeout == null) {
    com.inq.flash.client.chatskins.SkinControl.typingTimeout = 4E3;
  }
  if (com.inq.flash.client.chatskins.SkinControl.isClick2call()) {
    txtInput.addEventListener(com.inq.events.KeyboardEvent.KEY_UP, com.inq.flash.client.chatskins.SkinControl.onKeyUpCall);
    txtInput.addEventListener(com.inq.events.KeyboardEvent.KEY_DOWN, com.inq.flash.client.chatskins.SkinControl.onKeyDeownCall);
  } else {
    txtInput.addEventListener("input", com.inq.flash.client.chatskins.SkinControl.onInput);
    if (com.inq.utils.Util.isIE && com.inq.utils.Util.getIEMajorVer(true) < 9) {
      txtInput.getInput().attachEvent("onpaste", com.inq.flash.client.chatskins.SkinControl.onPaste);
    }
    txtInput.addEventListener(com.inq.events.KeyboardEvent.KEY_PRESS, com.inq.flash.client.chatskins.SkinControl.onKeyPress);
    txtInput.addEventListener(com.inq.events.FocusEvent.FOCUS_OUT, com.inq.flash.client.chatskins.SkinControl.onTextInputFocusLoss);
    txtInput.addEventListener(com.inq.events.FocusEvent.FOCUS_IN, com.inq.flash.client.chatskins.SkinControl.onTextInputFocus);
    txtInput.addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SkinControl.onTextInputFocus);
  }
};
com.inq.flash.client.chatskins.SkinControl.startEmailKeyListener = function() {
  var ti = Application.application.getTextInput("emailInput");
  if (ti && !com.inq.flash.client.chatskins.SkinControl.isClick2call()) {
    ti.addEventListener(com.inq.events.KeyboardEvent.KEY_PRESS, com.inq.flash.client.chatskins.SkinControl.onKeyPressEmailInput);
  }
};
com.inq.flash.client.chatskins.SkinControl.setupLocalCommunications = function() {
};
com.inq.flash.client.chatskins.SkinControl.PushEmbeddedForm = function() {
};
com.inq.flash.client.chatskins.SkinControl.thankYou = function() {
};
com.inq.flash.client.chatskins.SkinControl.setAgentConfig = function(agentID, eventData, coBrowseEnabled, buID, agentGroupID) {
  if (coBrowseEnabled == null) {
    coBrowseEnabled = false;
  }
  com.inq.flash.client.control.FlashPeer.setAgentConfig(agentID, coBrowseEnabled, eventData, buID, agentGroupID);
  com.inq.flash.client.chatskins.SkinControl.sendEventToAllAutomatons("onAgentAssigned");
};
com.inq.flash.client.chatskins.SkinControl.onTimeout = function() {
  com.inq.flash.client.chatskins.SkinControl.StopTimer();
  com.inq.stage.DragResize.WhenDone();
  if (com.inq.flash.client.chatskins.SkinControl.applicationController == null) {
    return;
  }
  try {
    com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChat(null);
  } catch (e) {
  }
};
com.inq.flash.client.chatskins.SkinControl.shutdownPopup = function() {
};
com.inq.flash.client.chatskins.SkinControl.ClassInits = function() {
  com.inq.flash.client.control.Incrementality.init();
  com.inq.flash.client.control.XFrameWorker.init();
  com.inq.flash.client.chatskins.FontMgr.init();
  com.inq.flash.client.chatskins.EmailMgr.init();
  com.inq.flash.client.chatskins.SndMgr.init();
  com.inq.flash.client.chatskins.PrintMgr.init();
  com.inq.flash.client.chatskins.FocusMonitor.init();
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.init();
  com.inq.flash.client.chatskins.FormMgr.init();
  com.inq.flash.client.chatskins.CoBrowseMgr.init();
  com.inq.flash.client.chatskins.VideoMgr.init();
  com.inq.flash.client.control.MinimizeManager.init();
  com.inq.flash.client.control.XFrameWorker.ariaHelpOnLoadingButton();
  com.inq.flash.client.chatskins.ScrollMonitor.init();
  com.inq.flash.client.control.UploadHandler.init();
  com.inq.ui.CommandParser.addListeners();
  com.inq.flash.client.control.FlashPeer.setCiFunction("ciActionBtnCloseChat", com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChat);
  com.inq.flash.client.control.FlashPeer.setCiFunction("ciActionBtnCloseThankyou", com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChat);
  com.inq.flash.client.control.FlashPeer.setCiFunction("ciSendText", com.inq.flash.client.chatskins.SkinControl.actionBtnSend);
};
com.inq.flash.client.chatskins.SkinControl.InitializeAutomoton = function() {
  com.inq.flash.client.chatskins.SkinControl.startTimer(com.inq.flash.client.chatskins.SkinControl.TIMEOUT_AVOIDANCE, function() {
    com.inq.flash.client.control.PersistenceManager.SetValue("lt", (new Date).getTime(), false);
  });
  var iframeURL = com.inq.flash.client.control.PersistenceManager.GetValue("ifrmurl", null);
  if (iframeURL == null) {
    iframeURL = StringTools.urlDecode(com.inq.flash.client.control.FlashVars.getValue("iframeURL"));
    haxe.Log.trace("Flashvar iframeURL:" + iframeURL, {fileName:"SkinControl.hx", lineNumber:1576, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"InitializeAutomoton"});
  } else {
    iframeURL = StringTools.urlDecode(iframeURL);
    haxe.Log.trace("Persisted iframeURL:" + iframeURL, {fileName:"SkinControl.hx", lineNumber:1580, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"InitializeAutomoton"});
  }
  var iframe = null;
  try {
    iframe = Application.application.getMxmlItem("autoAgentFrame");
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  if (iframe != null) {
    iframe.setSrc(iframeURL);
    com.inq.flash.client.control.PersistenceManager.SetValue("ifrmurl", StringTools.urlEncode(iframeURL));
  } else {
    haxe.Log.trace("uriFrame is null. Did you proerly ID the iframe component in the mxml?", {fileName:"SkinControl.hx", lineNumber:1590, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"InitializeAutomoton"});
  }
};
com.inq.flash.client.chatskins.SkinControl.getIntroduction = function() {
  return com.inq.utils.Util.getConfig("sIntroduction", null);
};
com.inq.flash.client.chatskins.SkinControl.startTimer = function(timeout, timeoutAction) {
  timeout = com.inq.flash.client.chatskins.SkinControl.initializeTimerTimeout(timeout);
  if (com.inq.flash.client.chatskins.SkinControl.timerTimeout != null) {
    if (!timeoutAction) {
      timeoutAction = function() {
        com.inq.flash.client.chatskins.SkinControl.timerTimeout.stop();
        com.inq.flash.client.chatskins.SkinControl.onTimeout();
        com.inq.flash.client.chatskins.SkinControl.timerTimeout = null;
      };
    }
    com.inq.flash.client.chatskins.SkinControl.timerTimeout.run = timeoutAction;
    com.inq.flash.client.chatskins.SkinControl.timeoutTime = timeout;
    com.inq.flash.client.chatskins.SkinControl.timeoutAction = timeoutAction;
  } else {
    haxe.Log.trace("Couldn't start timer to close not started chat, because instance of `timerTimeout` has not been initialized");
  }
};
com.inq.flash.client.chatskins.SkinControl.restartTimer = function(timeout, actionOnTimeout) {
  try {
    if (!timeout) {
      if (!com.inq.flash.client.chatskins.SkinControl.timeoutTime) {
        throw "timeout doesn't set and doesn't saved after 'startTimer'";
      }
      timeout = com.inq.flash.client.chatskins.SkinControl.timeoutTime;
    }
    if (!actionOnTimeout) {
      if (!com.inq.flash.client.chatskins.SkinControl.timeoutAction) {
        throw "actionOnTimeout doesn't set and doesn't saved after 'startTimer'";
      }
      actionOnTimeout = com.inq.flash.client.chatskins.SkinControl.timeoutAction;
    }
    if (com.inq.flash.client.chatskins.SkinControl.timerTimeout != null) {
      com.inq.flash.client.chatskins.SkinControl.StopTimer();
      com.inq.flash.client.chatskins.SkinControl.startTimer(timeout, actionOnTimeout);
    }
  } catch (err) {
    haxe.Log.trace("Couldn't restart timer to close not started chat", {timeout:timeout, actionOnTimeout:actionOnTimeout, error:err});
  }
};
com.inq.flash.client.chatskins.SkinControl.InitializeGlue = function() {
  com.inq.flash.client.control.FlashPeer.setCiFunction("ciActionBtnCloseChat", com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChat);
  if (com.inq.flash.client.chatskins.SkinControl.bInitialized) {
    return;
  }
  com.inq.flash.client.chatskins.SkinControl.bInitialized = true;
  com.inq.flash.client.chatskins.SkinControl.click2call = false;
  com.inq.flash.client.chatskins.SkinControl.callStreamData = "";
  com.inq.flash.client.chatskins.SkinControl.callerNameString = "";
  com.inq.flash.client.chatskins.SkinControl.chatContainer = Application.application.getCanvas("Chat");
  if (com.inq.flash.client.chatskins.SkinControl.chatContainer == null) {
    com.inq.flash.client.chatskins.SkinControl.bChatIsVisible = true;
  } else {
    com.inq.flash.client.chatskins.SkinControl.bChatIsVisible = com.inq.flash.client.chatskins.SkinControl.chatContainer.getVisible() && com.inq.flash.client.chatskins.SkinControl.chatContainer.getEnabled();
  }
  com.inq.flash.client.control.FlashVars._init();
  com.inq.flash.client.chatskins.SkinControl.resizable = com.inq.utils.Util.getConfig("resizable", true);
  com.inq.flash.client.chatskins.SkinControl.autoAgent = com.inq.flash.client.chatskins.SkinControl.isInApplication("autoAgent") ? Application.application.getCanvas("autoAgent") : null;
  com.inq.flash.client.chatskins.SkinControl.ClassInits();
  com.inq.flash.client.chatskins.SkinControl.textInput = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
  try {
    com.inq.flash.client.control.FlashVars.getFlashVars();
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("SkinControl.InitializeGlue: FlashVars threw: " + Std.string(e), {fileName:"SkinControl.hx", lineNumber:1629, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"InitializeGlue", customParams:["error"]});
    } else {
      throw e;
    }
  }
  haxe.Log.trace("SkinControl.InitializeGlue: FlashVars.flashVars.clickStream=" + com.inq.flash.client.control.FlashVars.get("clickStream"), {fileName:"SkinControl.hx", lineNumber:1631, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"InitializeGlue"});
  var ti = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
  com.inq.flash.client.chatskins.SkinControl.cw = new com.inq.flash.client.chatskins.ChatTextArea(Application.application.getMxmlItem("chatWindow"));
  if (com.inq.flash.client.control.FlashVars.getShutdownPopup()) {
    com.inq.flash.client.chatskins.SkinControl.shutdownPopup();
    return;
  }
  if (!com.inq.flash.client.control.FlashVars.getPersistentFrame()) {
    com.inq.flash.client.chatskins.SkinControl.popupChatInitialize();
    com.inq.flash.client.chatskins.SkinControl.showPersistentChatButtons(false);
    com.inq.flash.client.chatskins.SkinControl.openerScript = new com.inq.flash.client.chatskins.OpenerScript;
    if (com.inq.flash.client.chatskins.SkinControl.bChatIsVisible) {
      com.inq.flash.client.chatskins.SkinControl.openerScript.start();
    }
    var msgcnt = com.inq.flash.client.control.PersistenceManager.GetValue("msgcnt", 0);
    if (com.inq.flash.client.chatskins.SkinControl.isContinued() && msgcnt > 0) {
      com.inq.flash.client.chatskins.SkinControl.applicationController.persistentFrameReconnect();
    } else {
      if (com.inq.flash.client.chatskins.SkinControl.autoAgent == null || com.inq.flash.client.chatskins.SkinControl.autoAgent.getVisible() == false) {
        if (com.inq.flash.client.chatskins.SkinControl.bChatIsVisible && !com.inq.flash.client.control.FlashPeer.getIsBuilder()) {
          var now = (new Date).getTime();
          var chatWindowAppeared = com.inq.flash.client.control.PersistenceManager.GetValue("cwa", 0);
          var initialTimeOut = com.inq.flash.client.chatskins.SkinControl.getInitialTimeout(com.inq.flash.client.chatskins.SkinControl.DEFAULT_INITIAL_TIMEOUT);
          com.inq.flash.client.control.PersistenceManager.SetValue("it", initialTimeOut, false);
          var duration = now - chatWindowAppeared;
          var timeout = null;
          if (chatWindowAppeared == 0) {
            com.inq.flash.client.control.PersistenceManager.SetValue("cwa", now, false);
          } else {
            timeout = initialTimeOut - duration / com.inq.flash.client.chatskins.SkinControl.SEC;
          }
          com.inq.flash.client.chatskins.SkinControl.startTimer(timeout);
        }
        ti.clear();
        ti.select();
      } else {
        com.inq.flash.client.chatskins.SkinControl.InitializeAutomoton();
      }
    }
  } else {
    com.inq.flash.client.chatskins.SkinControl.persistentChatInitialize();
    com.inq.flash.client.chatskins.SkinControl.openerScript = new com.inq.flash.client.chatskins.OpenerScript;
    if (com.inq.flash.client.chatskins.SkinControl.bChatIsVisible) {
      com.inq.flash.client.chatskins.SkinControl.openerScript.start();
    }
    var msgcnt = -1;
    msgcnt = com.inq.flash.client.control.FlashVars.getMsgCnt();
    if (msgcnt == -1) {
      msgcnt = com.inq.flash.client.control.PersistenceManager.GetValue("msgcnt", 0);
    }
    com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry = msgcnt;
    if (com.inq.flash.client.chatskins.SkinControl.isContinued() && msgcnt > 0) {
      com.inq.flash.client.chatskins.SkinControl.applicationController.persistentFrameReconnect();
    } else {
      ti.clear();
      ti.select();
    }
    if (com.inq.flash.client.chatskins.SkinControl.isClick2call()) {
      com.inq.flash.client.chatskins.SkinControl.applicationController.processClickToCallQueueMessages();
    }
    var bPopupNotified = false;
    com.inq.flash.client.chatskins.SkinControl.ShowChat();
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("emailLayer")) {
    Application.application.getCanvas("emailLayer").setVisible(false);
  }
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication("thankYou")) {
    Application.application.getCanvas("thankYou").setVisible(false);
  }
  haxe.Log.trace("setup the buttons", {fileName:"SkinControl.hx", lineNumber:1701, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"InitializeGlue"});
  if (!(com.inq.utils.Capabilities.isPhone() || com.inq.utils.Capabilities.isSafari() && com.inq.utils.Capabilities.isMobile())) {
    com.inq.flash.client.chatskins.SkinControl.setFocusOnInputField();
  }
  com.inq.flash.client.chatskins.SkinControl.startMouseListener();
  com.inq.flash.client.chatskins.SkinControl.startFocusListener();
  com.inq.flash.client.chatskins.SkinControl.setupButtons();
  if (com.inq.flash.client.chatskins.SkinControl.autoAgent == null || com.inq.flash.client.chatskins.SkinControl.autoAgent.getVisible() == false) {
    com.inq.flash.client.chatskins.SkinControl.startKeyListener();
    com.inq.flash.client.chatskins.SkinControl.startEmailKeyListener();
    if (!com.inq.flash.client.control.MinimizeManager.minimized) {
      com.inq.flash.client.chatskins.SkinControl.setUpFocusAndSelection();
    }
  }
  if (com.inq.utils.Util.getConfig("bHideInput", false) && !com.inq.flash.client.chatskins.SkinControl.isContinued()) {
    com.inq.flash.client.chatskins.SkinControl.hideInput();
  } else {
    com.inq.flash.client.chatskins.SkinControl.showInput(true);
  }
  com.inq.flash.client.chatskins.SkinControl.fireMxmlHandler("onInitializationComplete");
};
com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat = function() {
  return com.inq.flash.client.control.FlashVars.getPersistentFrame();
};
com.inq.flash.client.chatskins.SkinControl.getInitialTimeout = function(timeout) {
  var defaultTimeout = timeout ? timeout : com.inq.flash.client.chatskins.SkinControl.DEFAULT_INITIAL_TIMEOUT;
  return parseInt("" + com.inq.utils.Util.getConfig("initialTimeOut", defaultTimeout));
};
com.inq.flash.client.chatskins.SkinControl.startWarning = function(initialTimeOut) {
  var initialTimeOutInt = parseInt(initialTimeOut);
  var timeInMs = (new Date).getTime();
  var timeToClose = timeInMs + initialTimeOutInt * 1E3;
  if (initialTimeOutInt > 30) {
    com.inq.flash.client.chatskins.SkinControl.warninglast30secId = setTimeout(function() {
      var now = (new Date).getTime();
      if (now < timeToClose) {
        com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", "The chat window is closing in 30 seconds.", com.inq.flash.client.chatskins.ChatTextArea.SYSTEM);
      }
    }, (parseInt(initialTimeOutInt) - 30) * 1E3);
  }
  if (initialTimeOutInt > 120) {
    com.inq.flash.client.chatskins.SkinControl.warningEvery2minId = setInterval(function() {
      var now = (new Date).getTime();
      var timeLeftSec = parseInt((timeToClose - now) / 1E3);
      if (now < timeToClose) {
        var minMsg = " " + (parseInt(timeLeftSec / 60) > 0 ? parseInt(timeLeftSec / 60) + " minutes" : "");
        var secMsg = " " + (timeLeftSec % 60 > 0 ? timeLeftSec % 60 + " seconds" : "");
        com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", "The chat window is closing in" + minMsg + secMsg, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM);
      } else {
        clearInterval(com.inq.flash.client.chatskins.SkinControl.warningEvery2minId);
      }
    }, 120 * 1E3);
  }
};
com.inq.flash.client.chatskins.SkinControl.stopWarning = function() {
  if (com.inq.flash.client.chatskins.SkinControl.warningEvery2minId > 0) {
    clearTimeout(com.inq.flash.client.chatskins.SkinControl.warningEvery2minId);
  }
  if (com.inq.flash.client.chatskins.SkinControl.warninglast30secId > 0) {
    clearInterval(com.inq.flash.client.chatskins.SkinControl.warninglast30secId);
  }
};
com.inq.flash.client.chatskins.SkinControl.initializeTimerTimeout = function(timeout) {
  try {
    var initialTimeOut = timeout ? com.inq.flash.client.chatskins.SkinControl.getInitialTimeout(timeout) : com.inq.flash.client.chatskins.SkinControl.getInitialTimeout(com.inq.flash.client.chatskins.SkinControl.DEFAULT_INITIAL_TIMEOUT);
    var maxTimeOut = Math.pow(2, 32) - 1;
    if (initialTimeOut == 0) {
      haxe.Log.trace("Timeout value was specified as 0. Timeout will not occur.");
    } else {
      if (isNaN(initialTimeOut) || initialTimeOut < 0 || initialTimeOut > maxTimeOut) {
        initialTimeOut = com.inq.flash.client.chatskins.SkinControl.DEFAULT_INITIAL_TIMEOUT;
      }
      com.inq.flash.client.chatskins.SkinControl.timerTimeout = new com.inq.utils.Timer(initialTimeOut * com.inq.flash.client.chatskins.SkinControl.SEC);
      com.inq.flash.client.chatskins.SkinControl.startWarning(initialTimeOut);
    }
    return initialTimeOut;
  } catch (msg) {
    if (js.Boot.__instanceof(msg, String)) {
      haxe.Log.trace("An error occured with initialTimeOut. Setting to default of two minutes");
      var defaultInitialTimeOut = com.inq.flash.client.chatskins.SkinControl.DEFAULT_INITIAL_TIMEOUT;
      com.inq.flash.client.chatskins.SkinControl.timerTimeout = new com.inq.utils.Timer(defaultInitialTimeOut * com.inq.flash.client.chatskins.SkinControl.SEC);
      return defaultInitialTimeOut;
    } else {
      throw msg;
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.testAgentAvailability = function(hop, noagent, func) {
  var inHOP = com.inq.flash.client.control.FlashVars.getInHOP();
  var agentsAvailable = com.inq.flash.client.control.FlashVars.getAgentsAvailable();
  if (inHOP && agentsAvailable) {
    if (func != null) {
      func();
    }
    return;
  }
  com.inq.flash.client.chatskins.SkinControl.doThankYou();
  var btnThankYou = Application.application.getButton("btnThankYou");
  btnThankYou.setLabel(!inHOP ? hop : noagent);
};
com.inq.flash.client.chatskins.SkinControl.parseInitialClickstreamData = function() {
  haxe.Log.trace("SkinControl.parseInitialClickstreamData: entered", {fileName:"SkinControl.hx", lineNumber:1765, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseInitialClickstreamData"});
  var sep = "&";
  var sepAttributes = "^^";
  var csd = "";
  haxe.Log.trace("SkinControl.parseInitialClickstreamData: " + Std.string(com.inq.flash.client.control.FlashVars.getFlashVars().clickStream), {fileName:"SkinControl.hx", lineNumber:1769, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseInitialClickstreamData"});
  var clickStream = StringTools.urlDecode(com.inq.flash.client.control.FlashVars.getValue("clickStream"));
  var csdArray = clickStream.split(sep);
  var ix;
  var _g1 = 0, _g = csdArray.length;
  while (_g1 < _g) {
    var ix1 = _g1++;
    haxe.Log.trace("SkinControl.parseInitialClickstreamData: " + csdArray[ix1], {fileName:"SkinControl.hx", lineNumber:1777, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseInitialClickstreamData"});
    var nVP = csdArray[ix1].split("=");
    var name = nVP.shift();
    var data = nVP.join("=");
    haxe.Log.trace("SkinControl.parseInitialClickstreamData: " + name + " = " + data, {fileName:"SkinControl.hx", lineNumber:1781, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseInitialClickstreamData"});
    if (data == "") {
      continue;
    }
    if (HxOverrides.substr(name, 0, 4) == "data") {
      var indx = HxOverrides.substr(name, 4, null);
      csd = (csd != "" ? csd + sepAttributes : "") + "_" + name + "=" + "Data[" + indx + "]" + sep + name + "=" + data;
    } else {
      if (name == "markerHistory") {
        csd = (csd != "" ? csd + sepAttributes : "") + com.inq.flash.client.chatskins.SkinControl.CSDL_VISITED + data;
      } else {
        if (name == "launchPageMarker") {
          csd = (csd != "" ? csd + sepAttributes : "") + com.inq.flash.client.chatskins.SkinControl.CSDL_LAUNCH_PAGE_MARKER + data;
        }
      }
    }
  }
  haxe.Log.trace("SkinControl.parseInitialClickstreamData: " + csd, {fileName:"SkinControl.hx", lineNumber:1794, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseInitialClickstreamData"});
  return csd;
};
com.inq.flash.client.chatskins.SkinControl.parseURLfromClickStreamData = function() {
  haxe.Log.trace("SkinControl.parseURLfromClickStreamData: entered", {fileName:"SkinControl.hx", lineNumber:1800, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseURLfromClickStreamData"});
  var sep = "&";
  var csdURL = "";
  haxe.Log.trace("SkinControl.parseURLfromClickStreamData: " + Std.string(com.inq.flash.client.control.FlashVars.getValue("clickStream")), {fileName:"SkinControl.hx", lineNumber:1804, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseURLfromClickStreamData"});
  var clickStream = StringTools.urlDecode(com.inq.flash.client.control.FlashVars.getValue("clickStream"));
  var csdURLArray = clickStream.split(sep);
  var ix;
  var _g1 = 0, _g = csdURLArray.length;
  while (_g1 < _g) {
    var ix1 = _g1++;
    haxe.Log.trace("SkinControl.parseURLfromClickStreamData: " + csdURLArray[ix1], {fileName:"SkinControl.hx", lineNumber:1812, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseURLfromClickStreamData"});
    var nVP = csdURLArray[ix1].split("=");
    var name = nVP.shift();
    var data = nVP.join("=");
    haxe.Log.trace("SkinControl.parseURLfromClickStreamData: " + name + " = " + data, {fileName:"SkinControl.hx", lineNumber:1816, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseURLfromClickStreamData"});
    if (data == "") {
      continue;
    }
    if (name == "pageURL") {
      csdURL = (csdURL != "" ? csdURL + sep : "") + com.inq.flash.client.chatskins.SkinControl.CSDL_URL + data;
    }
  }
  haxe.Log.trace("SkinControl.parseURLfromClickStreamData: " + csdURL, {fileName:"SkinControl.hx", lineNumber:1824, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseURLfromClickStreamData"});
  return "^^" + csdURL;
};
com.inq.flash.client.chatskins.SkinControl.parseDFVfromClickStreamData = function() {
  haxe.Log.trace("SkinControl.parseDFVfromClickStreamData: entered", {fileName:"SkinControl.hx", lineNumber:1831, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseDFVfromClickStreamData"});
  var sep = "&";
  var csdDFV = "";
  haxe.Log.trace("SkinControl.parseDFVfromClickStreamData: " + Std.string(com.inq.flash.client.control.FlashVars.getValue("clickStream")), {fileName:"SkinControl.hx", lineNumber:1835, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseDFVfromClickStreamData"});
  var clickStream = StringTools.urlDecode(com.inq.flash.client.control.FlashVars.getValue("clickStream"));
  var csdDFVArray = clickStream.split(sep);
  var ix;
  var _g1 = 0, _g = csdDFVArray.length;
  while (_g1 < _g) {
    var ix1 = _g1++;
    haxe.Log.trace("SkinControl.parseDFVfromClickStreamData: " + csdDFVArray[ix1], {fileName:"SkinControl.hx", lineNumber:1843, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseDFVfromClickStreamData"});
    var nVP = csdDFVArray[ix1].split("=");
    var name = nVP.shift();
    var data = nVP.join("=");
    haxe.Log.trace("SkinControl.parseDFVfromClickStreamData: " + name + " = " + data, {fileName:"SkinControl.hx", lineNumber:1847, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseDFVfromClickStreamData"});
    if (data == "") {
      continue;
    }
    if (name == "dfv") {
      csdDFV = (csdDFV != "" ? csdDFV + sep : "") + com.inq.flash.client.chatskins.SkinControl.CSDL_DFV + data;
    }
  }
  haxe.Log.trace("SkinControl.parseDFVfromClickStreamData: " + csdDFV, {fileName:"SkinControl.hx", lineNumber:1855, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"parseDFVfromClickStreamData"});
  return "^^" + csdDFV;
};
com.inq.flash.client.chatskins.SkinControl.getCallStreamData = function() {
  var skinVersion = com.inq.utils.Util.getConfig("skinVersion", "0");
  var utfenable = com.inq.utils.Util.getConfig("utfenable", false);
  if (skinVersion == "0") {
    var phoneSeparator = com.inq.utils.Util.getConfig("phoneSeparator", "-");
    var numberLength = com.inq.utils.Util.getConfig("numberLength", "10");
    var callStreamDataLocal = "^^", callerPhoneString = "", callErrorMessage = com.inq.utils.Util.getConfig("phoneErrorMessage", "Please enter a valid phone number consisting of " + numberLength + " digits (or more for numbers with extension)");
    try {
      var callerPhone = Application.application.getMxmlItem(com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE + "callerPhone");
      if (callerPhone == null || StringTools.trim(callerPhone._getInput()) == "") {
        throw callErrorMessage;
      }
      callerPhoneString = StringTools.trim(callerPhone._getInput());
    } catch (msg) {
      try {
        var callerPhoneField1 = Application.application.getMxmlItem(com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE + "phoneField1"), callerPhoneField2 = Application.application.getMxmlItem(com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE + "phoneField2"), callerPhoneField3 = Application.application.getMxmlItem(com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE + "phoneField3");
        if (callerPhoneField1 != null && callerPhoneField2 != null && callerPhoneField3 != null) {
          callerPhoneString = StringTools.trim(callerPhoneField1._getInput() + callerPhoneField2._getInput() + callerPhoneField3._getInput());
        }
        if (callerPhoneString == "") {
          throw msg;
        }
      } catch (msg1) {
        throw msg1;
      }
    }
    var myReg = new EReg("[^\\d]", "g");
    if (utfenable == false) {
      callerPhoneString = myReg.replace(callerPhoneString, "");
      myReg = new EReg("^\\d{10,}$", "");
      if (!myReg.match(callerPhoneString)) {
        throw callErrorMessage;
      }
    }
    if (callerPhoneString.length > 10) {
      callerPhoneString = HxOverrides.substr(callerPhoneString, 0, 10) + "x" + HxOverrides.substr(callerPhoneString, 10, null);
    }
    var countryCode = Std.string(com.inq.utils.Util.getConfig("countryISDCode", "1")) + "-";
    if (countryCode == "0-") {
      countryCode = "";
    }
    if (countryCode != "1-") {
      callerPhoneString = countryCode + callerPhoneString;
    } else {
      callerPhoneString = countryCode + HxOverrides.substr(callerPhoneString, 0, 3) + Std.string(phoneSeparator) + HxOverrides.substr(callerPhoneString, 3, 3) + Std.string(phoneSeparator) + HxOverrides.substr(callerPhoneString, 6, null);
    }
    callStreamDataLocal += com.inq.flash.client.chatskins.SkinControl.CSDL_CALLERPHONE + callerPhoneString;
    com.inq.flash.client.chatskins.SkinControl.callerNameString = readCallerName();
    return callStreamDataLocal;
  } else {
    var callStreamDataLocal = "^^", callerPhoneExt = "", numberLength = com.inq.utils.Util.getConfig("numberLength", "10"), callerPhoneString = "", callErrorMessage = com.inq.utils.Util.getConfig("phoneErrorMessage", "Please enter a valid phone number consisting of " + numberLength + " digits (or more for numbers with extension)");
    var callerPhone = new Array;
    var callerPhoneStrings = new Array;
    try {
      var i = 1;
      if (Application.application.getMxmlItem(com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE + "callerPhoneExt") != null) {
        callerPhoneExt = StringTools.trim(Application.application.getTextInput(com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE + "callerPhoneExt").getInput());
      } else {
        callerPhoneExt = "";
      }
      while (true) {
        if (!Application.application.getTextInput(com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE + "callerPhone" + i)) {
          break;
        } else {
          callerPhone[i - 1] = Application.application.getTextInput(com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE + "callerPhone" + i);
        }
        i++;
      }
      if (callerPhone.length == 0) {
        throw callErrorMessage;
      }
      i = 0;
      var checkValidInput = false;
      while (i < callerPhone.length) {
        if (StringTools.trim(callerPhone[i]._getInput()) == "") {
          checkValidInput = true;
        }
        i++;
      }
      if (checkValidInput == true) {
        throw callErrorMessage;
      }
      i = 0;
      while (i < callerPhone.length) {
        callerPhoneStrings[i] = callerPhone[i]._getInput();
        if (utfenable == false) {
          var myReg = new EReg("[^\\d]", "g");
          callerPhoneStrings[i] = myReg.replace(callerPhoneStrings[i], "");
          myReg = new EReg("^\\d{" + callerPhoneStrings[i].length + ",}$", "");
          if (!myReg.match(callerPhoneStrings[i])) {
            throw callErrorMessage;
          }
        }
        i++;
      }
      i = 0;
      while (i < callerPhoneStrings.length) {
        callerPhoneString += StringTools.trim(callerPhoneStrings[i++]);
      }
      if (callerPhoneString.length < Std.parseInt(numberLength)) {
        throw callErrorMessage;
      }
    } catch (msg) {
      throw msg;
    }
    var checkforhyphen = com.inq.utils.Util.getConfig("phoneSeparator", false);
    if (checkforhyphen != false) {
      var tempStr = callerPhoneString;
      var i = 0;
      var val1, val2 = 0;
      while (i < callerPhoneStrings.length - 1) {
        val1 = 0;
        val2 += callerPhoneStrings[i].length + i;
        tempStr = HxOverrides.substr(tempStr, val1, val2) + Std.string(checkforhyphen) + HxOverrides.substr(tempStr, val2, null);
        i++;
      }
      callerPhoneString = tempStr;
    }
    var countryCode = com.inq.utils.Util.getConfig("countryISDCode", "1");
    countryCode = countryCode == "0" ? "" : countryCode + "-";
    callerPhoneString = countryCode + callerPhoneString;
    if (callerPhoneExt != "") {
      callerPhoneString += "x" + callerPhoneExt;
    }
    callStreamDataLocal += com.inq.flash.client.chatskins.SkinControl.CSDL_CALLERPHONE + callerPhoneString;
    com.inq.flash.client.chatskins.SkinControl.callerNameString = readCallerName();
    return callStreamDataLocal;
  }
};
function readCallerName() {
  var callerName = Application.application.getTextInput(com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE + "callerName");
  var callerNameString = StringTools.trim(callerName._getInput());
  var myReg = new EReg("(?=[\\d\\0\\n\\f\\r\\t\\v])(?=[^-])", "g");
  callerNameString = myReg.replace(callerNameString, " ");
  myReg = new EReg("\\s+", "g");
  callerNameString = myReg.replace(callerNameString, " ");
  myReg = new EReg("\\s+-|-\\s+", "g");
  return myReg.replace(callerNameString, "-");
}
com.inq.flash.client.chatskins.SkinControl.getCallFormData = function() {
  var skinVersion = com.inq.utils.Util.getConfig("skinVersion", "0");
  if (skinVersion == "0") {
    var formString = "";
    try {
      var divElements = document.getElementById("btnCall").parentNode.getElementsByTagName("DIV");
      var _g1 = 0, _g = divElements.length;
      while (_g1 < _g) {
        var divIndex = _g1++;
        try {
          var myReg = new EReg("^" + com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE, "");
          if (!myReg.match(divElements[divIndex].id) || StringTools.endsWith(divElements[divIndex].id, "callerPhone") || StringTools.endsWith(divElements[divIndex].id, "phoneField1") || StringTools.endsWith(divElements[divIndex].id, "phoneField2") || StringTools.endsWith(divElements[divIndex].id, "phoneField3") || StringTools.endsWith(divElements[divIndex].id, "callerName")) {
            continue;
          }
          var fieldToGet = Application.application.getTextInput(divElements[divIndex].id);
          formString += "^^_" + myReg.matchedRight() + "=" + myReg.matchedRight() + "^^" + myReg.matchedRight() + "=" + StringTools.trim(fieldToGet._getInput());
        } catch (e) {
          if (js.Boot.__instanceof(e, Error)) {
            haxe.Log.trace("Error type for ," + Std.string(e), {fileName:"SkinControl.hx", lineNumber:2087, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"getCallFormData"});
          } else {
            throw e;
          }
        }
      }
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
        haxe.Log.trace("HtmlPersistentButton: show button failed," + Std.string(e), {fileName:"SkinControl.hx", lineNumber:2091, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"getCallFormData"});
      } else {
        throw e;
      }
    }
    return formString;
  } else {
    var formString = "";
    try {
      var i = 1;
      var divElements = document.getElementById("btnCall").parentNode.getElementsByTagName("DIV");
      var _g1 = 0, _g = divElements.length;
      while (_g1 < _g) {
        var divIndex = _g1++;
        try {
          var myReg = new EReg("^" + com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE, "");
          if (!myReg.match(divElements[divIndex].id) || StringTools.endsWith(divElements[divIndex].id, "callerPhoneExt") || StringTools.endsWith(divElements[divIndex].id, "callerName")) {
            continue;
          }
          if (StringTools.endsWith(divElements[divIndex].id, "callerPhone" + i)) {
            i++;
            continue;
          }
          var fieldToGet = Application.application.getTextInput(divElements[divIndex].id);
          formString += "^^_" + myReg.matchedRight() + "=" + myReg.matchedRight() + "^^" + myReg.matchedRight() + "=" + StringTools.trim(fieldToGet._getInput());
        } catch (e) {
          if (js.Boot.__instanceof(e, Error)) {
            haxe.Log.trace("Error type for ," + Std.string(e), {fileName:"SkinControl.hx", lineNumber:2123, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"getCallFormData"});
          } else {
            throw e;
          }
        }
      }
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
        haxe.Log.trace("HtmlPersistentButton: show button failed," + Std.string(e), {fileName:"SkinControl.hx", lineNumber:2127, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"getCallFormData"});
      } else {
        throw e;
      }
    }
    return formString;
  }
};
com.inq.flash.client.chatskins.SkinControl.getInitialClickstreamData = function() {
  var sInitialClickstreamData = com.inq.flash.client.chatskins.SkinControl.IdentifyPlatform() + com.inq.flash.client.chatskins.SkinControl.parseInitialClickstreamData() + com.inq.flash.client.chatskins.SkinControl.parseURLfromClickStreamData() + com.inq.flash.client.chatskins.SkinControl.parseDFVfromClickStreamData() + com.inq.flash.client.chatskins.SkinControl.callStreamData;
  return sInitialClickstreamData;
};
com.inq.flash.client.chatskins.SkinControl.getChatWindow = function() {
  return com.inq.flash.client.chatskins.SkinControl.cw;
};
com.inq.flash.client.chatskins.SkinControl.updateFormFields = function(formData, formName, formId) {
  com.inq.flash.client.chatskins.FormMgr.updateFormFields(formData, formName, formId, com.inq.flash.client.chatskins.SkinControl.cw);
};
com.inq.flash.client.chatskins.SkinControl.getInputArea = function() {
  return Application.application.getMxmlItem("txtInput");
};
com.inq.flash.client.chatskins.SkinControl.disableInput = function() {
  var ti = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
  if (com.inq.utils.Capabilities.isPhone()) {
    ti.blur();
    com.inq.flash.client.chatskins.ChatTextFocusMonitor.onBlur(null);
  }
  ti.clear();
  ti.clearPlaceholder();
  ti._enable(true);
  ti.setVisible(false);
};
com.inq.flash.client.chatskins.SkinControl.sendDisableInput = function() {
  com.inq.flash.client.chatskins.SkinControl.disableInput();
};
com.inq.flash.client.chatskins.SkinControl.popupChatInitialize = function() {
  var xdMode = Inq.xdMode || Inq.xd;
  if (!xdMode) {
    try {
      var bChrome = js.Lib.window.navigator.userAgent.toLowerCase().indexOf("chrome") >= 0;
      var unloadHandler = function(ev) {
        var map = {};
        map["a"] = false;
        map["lt"] = (new Date).getTime();
        com.inq.flash.client.control.PersistenceManager.SetValues(map);
      };
      if (bChrome) {
        js.Lib.window.addEventListener("beforeunload", unloadHandler, false);
      } else {
        js.Lib.window.onunload = unloadHandler;
      }
      com.inq.flash.client.control.PersistenceManager.SetValue("a", true);
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
        haxe.Log.trace("" + Std.string(e), {fileName:"SkinControl.hx", lineNumber:2196, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"popupChatInitialize", customParams:["error"]});
      } else {
        throw e;
      }
    }
  }
  if (com.inq.flash.client.chatskins.SkinControl.isClick2call()) {
    var thankyouNoAgentOnEntry = com.inq.utils.Util.getConfig("thankyouNoAgentOnEntry", null);
    var thankyouAfterHoursOnEntry = com.inq.utils.Util.getConfig("thankyouAfterHoursOnEntry", null);
    if (thankyouNoAgentOnEntry == null && thankyouAfterHoursOnEntry != null) {
      thankyouNoAgentOnEntry = thankyouAfterHoursOnEntry;
    }
    if (thankyouAfterHoursOnEntry == null && thankyouNoAgentOnEntry != null) {
      thankyouAfterHoursOnEntry = thankyouNoAgentOnEntry;
    }
    if (null != thankyouAfterHoursOnEntry) {
      com.inq.flash.client.chatskins.SkinControl.testAgentAvailability(thankyouAfterHoursOnEntry, thankyouNoAgentOnEntry);
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.noUnload = function() {
  window.onunload = function(ev) {
    return true;
  };
};
com.inq.flash.client.chatskins.SkinControl.kickOffChat = function(noOpeners) {
  if (noOpeners == null) {
    noOpeners = false;
  }
  if (com.inq.flash.client.chatskins.SkinControl.bChatIsVisible) {
    return;
  }
  com.inq.flash.client.chatskins.SkinControl.bChatIsVisible = true;
  if (com.inq.flash.client.chatskins.SkinControl.chatContainer != null) {
    com.inq.flash.client.chatskins.SkinControl.chatContainer.setEnabled(true);
  }
  if (com.inq.flash.client.chatskins.SkinControl.autoAgent == null || com.inq.flash.client.chatskins.SkinControl.autoAgent.getVisible() == false) {
    try {
      if (!noOpeners) {
        com.inq.flash.client.chatskins.SkinControl.openerScript.start();
      }
      var txtInput = Application.application.getTextInput("txtInput");
      if (txtInput != null) {
        txtInput.setFocus();
      }
    } catch (e) {
    }
  } else {
    try {
      com.inq.flash.client.chatskins.SkinControl.InitializeAutomoton();
    } catch (e) {
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.onChatEngaged = function() {
  com.inq.flash.client.chatskins.SkinControl.stopOpenerScript(true);
  com.inq.flash.client.chatskins.SkinControl.StopTimer();
  com.inq.flash.client.chatskins.SkinControl.setFocusOnInputField(true);
};
com.inq.flash.client.chatskins.SkinControl.persistentChatInitialize = function() {
  try {
    var opener = null;
    try {
      opener = window.parent.opener["inqFrame"];
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
      } else {
        throw e;
      }
    }
    try {
      com.inq.flash.client.control.FlashPeer.setSessionParam("persistentChat", "true");
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
      } else {
        throw e;
      }
    }
    if (opener == null) {
      haxe.Log.trace("Oh no! no opener", {fileName:"SkinControl.hx", lineNumber:2262, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"persistentChatInitialize"});
    }
    window.onload = function(ev) {
      return true;
    };
    window.onunload = function(ev) {
      com.inq.flash.client.control.FlashPeer.closePersistent();
      Application.application.close();
      return true;
    };
    try {
      com.inq.flash.client.control.FlashPeer.closePopupChatFromPersistent();
      com.inq.flash.client.control.FlashPeer.setPersistentWindowActive(true);
    } catch (e) {
    }
    var btnCloseChat = com.inq.flash.client.chatskins.SkinControl.isInApplication("btnCloseChat") ? Application.application.getButton("btnCloseChat") : null;
    var btnPopOut = com.inq.flash.client.chatskins.SkinControl.isInApplication("btnPopOut") ? Application.application.getButton("btnPopOut") : null;
    var btnPopIn = com.inq.flash.client.chatskins.SkinControl.isInApplication("btnPopIn") ? Application.application.getButton("btnPopIn") : null;
    if (com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry == 0 && !com.inq.flash.client.chatskins.SkinControl.isClick2call()) {
      com.inq.flash.client.chatskins.SkinControl.startTimer();
    }
    if (btnCloseChat != null && btnPopIn == null) {
      btnCloseChat.setVisible(true);
    }
    if (btnPopOut != null) {
      btnPopOut.setVisible(false);
    }
    if (btnPopIn != null) {
      btnPopIn.setVisible(true);
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("error" + Std.string(e), {fileName:"SkinControl.hx", lineNumber:2295, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"persistentChatInitialize"});
    } else {
      throw e;
    }
  }
  try {
    if (com.inq.flash.client.chatskins.SkinControl.isClick2call()) {
      var chatCanvas = Application.application.getCanvas("callForm");
      chatCanvas.setVisible(false);
      chatCanvas = Application.application.getCanvas("callFormPersistent");
      chatCanvas.setVisible(true);
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("error" + Std.string(e), {fileName:"SkinControl.hx", lineNumber:2306, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"persistentChatInitialize"});
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.blockService = function(blockDetails) {
  com.inq.flash.client.control.FlashPeer.blockService(blockDetails);
};
com.inq.flash.client.chatskins.SkinControl.wasSaleAction = function() {
  return com.inq.flash.client.control.FlashPeer.wasSaleAction();
};
com.inq.flash.client.chatskins.SkinControl.executeCustomCommand = function(commandParam) {
  return com.inq.flash.client.control.FlashPeer.executeCustomCommand(commandParam);
};
com.inq.flash.client.chatskins.SkinControl.getScriptLine = function(index) {
  return com.inq.flash.client.chatskins.SkinControl.cw.getTranscriptMessage(index);
};
com.inq.flash.client.chatskins.SkinControl.getSendButton = function() {
  return Application.application.getButton("btnSend");
};
com.inq.flash.client.chatskins.SkinControl.hideInput = function() {
  com.inq.flash.client.chatskins.SkinControl.disableInput();
  var button = com.inq.flash.client.chatskins.SkinControl.getSendButton();
  if (button != null) {
    button.setVisible(false);
  }
  com.inq.flash.client.chatskins.SkinControl.showBottomImgWithoutInput(true);
};
com.inq.flash.client.chatskins.SkinControl.showInput = function(showIntroduction) {
  var button = com.inq.flash.client.chatskins.SkinControl.getSendButton();
  if (button != null) {
    button.setVisible(true);
  }
  var ti = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
  if (ti != null) {
    ti._enable(false);
    var intro = com.inq.flash.client.chatskins.SkinControl.getIntroduction();
    if (showIntroduction && intro != null) {
      ti.setIntroduction(intro);
    }
    ti.setVisible(true);
  }
  com.inq.flash.client.chatskins.SkinControl.showBottomImgWithoutInput(false);
};
com.inq.flash.client.chatskins.SkinControl.showBottomImgWithoutInput = function(isShow) {
  var chatWin = Application.application.getCanvas("chat");
  if (chatWin == null) {
    return;
  }
  var middleHidden = chatWin.findChild("bottomMiddleHiddenInput");
  if (middleHidden) {
    middleHidden.setVisible(isShow);
    var middle = chatWin.findChild("bottomMiddle");
    if (middle) {
      middle.setVisible(!isShow);
    }
  }
  var leftHidden = chatWin.findChild("bottomLeftHiddenInput");
  if (leftHidden) {
    leftHidden.setVisible(isShow);
    var left = chatWin.findChild("bottomLeft");
    if (left) {
      left.setVisible(!isShow);
    }
  }
  var rightHidden = chatWin.findChild("bottomRightHiddenInput");
  if (rightHidden) {
    rightHidden.setVisible(isShow);
    var right = chatWin.findChild("bottomRight");
    if (right) {
      right.setVisible(!isShow);
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.executeAfter = function(condition, handler, contextLocation, timeout, cleanupHandler) {
  if (timeout == null) {
    timeout = 2E3;
  }
  if (contextLocation == null) {
    contextLocation = "executeAfter";
  }
  if (condition()) {
    haxe.Log.trace(contextLocation + ": executing since condition is satisfied", {fileName:"SkinControl.hx", lineNumber:2418, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"executeAfter"});
    handler();
    if (cleanupHandler != null) {
      cleanupHandler();
    }
  } else {
    if (timeout <= 0) {
      haxe.Log.trace(contextLocation + ": executing by timeout", {fileName:"SkinControl.hx", lineNumber:2422, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"executeAfter", customParams:["error"]});
      handler();
      if (cleanupHandler != null) {
        cleanupHandler();
      }
    } else {
      haxe.Log.trace(contextLocation + ": waiting " + timeout + "ms for condition to be satisfied", {fileName:"SkinControl.hx", lineNumber:2426, className:"com.inq.flash.client.chatskins.SkinControl", methodName:"executeAfter"});
      com.inq.utils.Timer.delay(function() {
        com.inq.flash.client.chatskins.SkinControl.executeAfter(condition, handler, contextLocation, timeout - 100, cleanupHandler);
      }, 100);
    }
  }
};
com.inq.flash.client.chatskins.SkinControl.hideObscuredChatDiv = function() {
  var application = Application.application;
  var chat = application.getCanvas("Chat") || application.getCanvas("chat");
  if (com.inq.flash.client.control.FlashPeer.isAutoFixPrechatSurvey() && chat && chat.getVisible()) {
    var chatDiv = chat._div;
    var cRect = chatDiv.getBoundingClientRect();
    var el = chatDiv.nextSibling;
    if (!el || !window.getComputedStyle) {
      return false;
    }
    do {
      var id = el.id.substr("tcChat_".length);
      if (el.nodeType == 1 && application.getMxmlItem(id) && js.Boot.isClass(application.getMxmlItem(id).constructor).indexOf("XFrame") != -1) {
        var sibRect = el.getBoundingClientRect();
        if (el.style["position"] == "absolute" && el.style["z-index"] == chatDiv.style["z-index"] && window.getComputedStyle(el).visibility !== "none" && sibRect.right > cRect.left && sibRect.bottom > cRect.top && sibRect.left < cRect.right && sibRect.top < cRect.bottom) {
          com.inq.flash.client.chatskins.SkinControl.getInputArea().setVisible(false);
          com.inq.flash.client.chatskins.SkinControl.getSendButton().setVisible(false);
          var cWindow = window.parent.document.getElementById("tcChat_chatWindow");
          cWindow.setAttribute("aria-hidden", true);
          cWindow.setAttribute("data-disabled", true);
          return true;
        }
      }
    } while ((el = el.nextSibling) != null);
  }
  return false;
};
com.inq.flash.client.chatskins.SkinControl.prototype.__class__ = com.inq.flash.client.chatskins.SkinControl;
com.inq.flash.client.chatskins.SkinControl.CSDL_CLICK2PER = "_ClickToPersistent=ClickToPersistent^^ClickToPersistent=";
com.inq.flash.client.chatskins.SkinControl.CSDL_BROWSER = "_Browser=Browser^^Browser=";
com.inq.flash.client.chatskins.SkinControl.CSDL_CONNECTION = "_ConnectionType=Connection Type^^ConnectionType=";
com.inq.flash.client.chatskins.SkinControl.CSDL_VISITED = "_visited=Page Markers^^visited=";
com.inq.flash.client.chatskins.SkinControl.CSDL_LAUNCH_PAGE_MARKER = "_launchPageMarker=Page Marker^^launchPageMarker=";
com.inq.flash.client.chatskins.SkinControl.CSDL_DFV = "_dfv=Data^^dfv=";
com.inq.flash.client.chatskins.SkinControl.CSDL_URL = "_URL=Page URL^^URL=";
com.inq.flash.client.chatskins.SkinControl.CSDL_OS = "_OperatingSystem=OS^^OperatingSystem=";
com.inq.flash.client.chatskins.SkinControl.CSDL_USERAGENT = "UserAgent=";
com.inq.flash.client.chatskins.SkinControl.CSDL_PLAYER = "PlayerType=";
com.inq.flash.client.chatskins.SkinControl.CSDL_MANUFACTURER = "Manufacturer=";
com.inq.flash.client.chatskins.SkinControl.CSDL_CALLERPHONE = "_CallerPhone=CallerPhone^^CallerPhone=";
com.inq.flash.client.chatskins.SkinControl.CALL_SUBMIT_PRE = "chat_submit_";
com.inq.flash.client.chatskins.SkinControl.callStreamData = "";
com.inq.flash.client.chatskins.SkinControl.callerNameString = "";
com.inq.flash.client.chatskins.SkinControl.customerIndx = 0;
com.inq.flash.client.chatskins.SkinControl.hostIndx = 0;
com.inq.flash.client.chatskins.SkinControl.click2call = false;
com.inq.flash.client.chatskins.SkinControl.SEC = 1E3;
com.inq.flash.client.chatskins.SkinControl.MIN = 60 * com.inq.flash.client.chatskins.SkinControl.SEC;
com.inq.flash.client.chatskins.SkinControl.HOUR = 60 * com.inq.flash.client.chatskins.SkinControl.MIN;
com.inq.flash.client.chatskins.SkinControl.DAY = 24 * com.inq.flash.client.chatskins.SkinControl.HOUR;
com.inq.flash.client.chatskins.SkinControl.DEFAULT_INITIAL_TIMEOUT = 120;
com.inq.flash.client.chatskins.SkinControl.TIMEOUT_AVOIDANCE = 30 * com.inq.flash.client.chatskins.SkinControl.SEC;
com.inq.flash.client.chatskins.SkinControl.timerTimeout = null;
com.inq.flash.client.chatskins.SkinControl.keyCount = 0;
com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry = com.inq.flash.client.control.PersistenceManager.GetValue("msgcnt", 0);
com.inq.flash.client.chatskins.SkinControl.resizable = true;
com.inq.flash.client.chatskins.SkinControl.autoAgent = null;
com.inq.flash.client.chatskins.SkinControl.bInternationalization = true;
com.inq.flash.client.chatskins.SkinControl._htmlText = "";
com.inq.flash.client.chatskins.SkinControl.bHaveFocus = false;
com.inq.flash.client.chatskins.SkinControl.objHasFocus = null;
com.inq.flash.client.chatskins.SkinControl.openerScript = null;
com.inq.flash.client.chatskins.SkinControl.bInitialized = false;
com.inq.flash.client.chatskins.SkinControl.bChatIsVisible = false;
com.inq.flash.client.chatskins.SkinControl.sSocketIP = null;
com.inq.flash.client.chatskins.SkinControl.cw = null;
com.inq.flash.client.chatskins.SkinControl.textInput = null;
com.inq.flash.client.chatskins.SkinControl.timerForTyping = -1;
com.inq.flash.client.chatskins.SkinControl.typingTimeout = 4E3;
com.inq.flash.client.chatskins.SkinControl.userWasTyping = false;
com.inq.flash.client.chatskins.SkinControl.tYImageLabel = "";
com.inq.flash.client.chatskins.SkinControl.defaultTYImageLabel = "";
com.inq.flash.client.chatskins.SkinControl.bPersistBtnPressed = false;
com.inq.flash.client.chatskins.SkinControl.chatContainer = null;
com.inq.flash.client.chatskins.SkinControl.isThankYou = false;
com.inq.flash.client.chatskins.SkinControl.isThankYouShown = false;
com.inq.flash.client.chatskins.SndMgr = function() {
};
$hxClasses["com.inq.flash.client.chatskins.SndMgr"] = com.inq.flash.client.chatskins.SndMgr;
com.inq.flash.client.chatskins.SndMgr.__name__ = ["com", "inq", "flash", "client", "chatskins", "SndMgr"];
com.inq.flash.client.chatskins.SndMgr.btnMuteOn = null;
com.inq.flash.client.chatskins.SndMgr.btnMuteOff = null;
com.inq.flash.client.chatskins.SndMgr.soundURL = null;
com.inq.flash.client.chatskins.SndMgr._init = function() {
  var win = window;
  var div = document.getElementById("divSound");
  if (div != null) {
    div.innerHTML = "";
    div.parentNode.removeChild(div);
  }
  return true;
};
com.inq.flash.client.chatskins.SndMgr.buildSoundDiv = function() {
  var div = null;
  if (null == (div = document.getElementById("divSound"))) {
    var bodys = document.getElementsByTagName("BODY");
    div = document.createElement("DIV");
    div.id = "divSound";
    div.style.cssText = "position:absolute;top:0px;left:0px;display:block;width:1px;height:1px;overflow:hidden;opacity:0.01;filter:alpha(opacity=1)";
    document.body.appendChild(div);
  }
  com.inq.flash.client.chatskins.SndMgr.divSound = div;
  var html5AudioSrc = com.inq.utils.Util.getConfig("html5AudioSrc", null);
  if (html5AudioSrc != null) {
    if (html5AudioSrc.indexOf(":/") < 0 && !html5AudioSrc.match(/^\/\//)) {
      html5AudioSrc = com.inq.ui.SkinLoader.GetSkinPath() + (com.inq.ui.SkinLoader.GetSkinPath().charAt(com.inq.ui.SkinLoader.GetSkinPath().length - 1) === "/" ? "" : "/") + html5AudioSrc;
    }
    if (com.inq.utils.Capabilities.isMobile()) {
      try {
        com.inq.flash.client.chatskins.SndMgr.audio = top.document.createElement("audio");
        initIosAudio(html5AudioSrc);
      } catch (err) {
      }
    } else {
      if (!com.inq.utils.Util.isIE || com.inq.utils.Util.getIEMajorVer(true) >= 9) {
        initHTMLAudio(html5AudioSrc);
      }
    }
  }
  function initIosAudio(html5AudioSrc) {
    var audio = new Audio(html5AudioSrc);
    com.inq.flash.client.chatskins.SndMgr.ios = {};
    com.inq.flash.client.chatskins.SndMgr.ios.audio = audio;
    var userAction = false;
    com.inq.flash.client.chatskins.SndMgr.ios.startAudio = function(e) {
      if (e && e.type == "touchstart") {
        userAction = true;
        top.document.removeEventListener("touchstart", com.inq.flash.client.chatskins.SndMgr.ios.startAudio, false);
        top.document.removeEventListener("keydown", com.inq.flash.client.chatskins.SndMgr.ios.startAudio, false);
      } else {
        if (e && e.type == "keydown") {
          userAction = true;
          top.document.removeEventListener("keydown", com.inq.flash.client.chatskins.SndMgr.ios.startAudio, false);
          if (com.inq.utils.Capabilities.isSafariVersion9()) {
            top.document.removeEventListener("touchend", com.inq.flash.client.chatskins.SndMgr.ios.startAudio, false);
          } else {
            top.document.removeEventListener("touchstart", com.inq.flash.client.chatskins.SndMgr.ios.startAudio, false);
          }
        } else {
          if (e && e.type == "touchend") {
            userAction = true;
            top.document.removeEventListener("touchend", com.inq.flash.client.chatskins.SndMgr.ios.startAudio, false);
            top.document.removeEventListener("keydown", com.inq.flash.client.chatskins.SndMgr.ios.startAudio, false);
          }
        }
      }
      com.inq.flash.client.chatskins.SndMgr.ios.audio.play();
    };
    com.inq.flash.client.chatskins.SndMgr.ios.pauseAudio = function() {
      if (userAction) {
        com.inq.flash.client.chatskins.SndMgr.ios.audio.pause();
        com.inq.flash.client.chatskins.SndMgr.ios.audio.removeEventListener("play", com.inq.flash.client.chatskins.SndMgr.ios.pauseAudio, false);
      }
    };
    if (com.inq.utils.Capabilities.isSafariVersion9()) {
      top.document.addEventListener("touchend", com.inq.flash.client.chatskins.SndMgr.ios.startAudio, false);
    } else {
      top.document.addEventListener("touchstart", com.inq.flash.client.chatskins.SndMgr.ios.startAudio, false);
    }
    top.document.addEventListener("keydown", com.inq.flash.client.chatskins.SndMgr.ios.startAudio, false);
    com.inq.flash.client.chatskins.SndMgr.ios.audio.addEventListener("play", com.inq.flash.client.chatskins.SndMgr.ios.pauseAudio, false);
  }
  function initHTMLAudio(src) {
    var audiodatauri = com.inq.utils.Util.getConfig("audiodatauri", null);
    if (audiodatauri) {
      src = audiodatauri;
    }
    com.inq.flash.client.chatskins.SndMgr.audio = new Audio(src);
    com.inq.flash.client.chatskins.SndMgr.audioSupport = com.inq.flash.client.chatskins.SndMgr.audio.play ? true : false;
  }
};
com.inq.flash.client.chatskins.SndMgr.getMute = function() {
  return com.inq.flash.client.chatskins.SndMgr._mute;
};
com.inq.flash.client.chatskins.SndMgr.setMute = function(mute) {
  com.inq.flash.client.chatskins.SndMgr._mute = mute;
};
com.inq.flash.client.chatskins.SndMgr.init = function() {
  try {
    com.inq.flash.client.chatskins.SndMgr._mute = com.inq.utils.Util.getConfig("mute", com.inq.flash.client.chatskins.SndMgr._mute);
    com.inq.flash.client.chatskins.SndMgr.soundURL = com.inq.utils.Util.getConfig("soundURL", null);
    if (com.inq.flash.client.chatskins.SndMgr.soundURL != null && com.inq.flash.client.chatskins.SndMgr.soundURL.indexOf(":/") < 0) {
      com.inq.flash.client.chatskins.SndMgr.soundURL = com.inq.ui.SkinLoader.GetSkinPath() + (com.inq.ui.SkinLoader.GetSkinPath().charAt(com.inq.ui.SkinLoader.GetSkinPath().length - 1) === "/" ? "" : "/") + com.inq.flash.client.chatskins.SndMgr.soundURL;
    }
    com.inq.flash.client.chatskins.SndMgr.buildSoundDiv();
    com.inq.flash.client.chatskins.SndMgr.soundEnabled = com.inq.utils.Util.getConfig("soundEnabled", false);
    com.inq.flash.client.chatskins.SndMgr.swfSoundSuppress = com.inq.utils.Util.getConfig("swfSoundSuppress", false);
    com.inq.flash.client.chatskins.SndMgr._mute = 1 == com.inq.flash.client.control.PersistenceManager.GetValue("m", com.inq.flash.client.chatskins.SndMgr.soundEnabled ? 0 : 1) ? true : com.inq.flash.client.chatskins.SndMgr._mute;
    if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnMuteOff") && com.inq.flash.client.chatskins.SkinControl.isInApplication("btnMuteOn")) {
      haxe.Log.trace("Sound manager init()::PersistenceManager:" + Std.string(com.inq.flash.client.control.PersistenceManager.GetValue("m", 0)), {fileName:"SndMgr.hx", lineNumber:106, className:"com.inq.flash.client.chatskins.SndMgr", methodName:"init"});
      com.inq.flash.client.chatskins.SndMgr.btnMuteOn = Application.application.getButton("btnMuteOn");
      com.inq.flash.client.chatskins.SndMgr.btnMuteOff = Application.application.getButton("btnMuteOff");
      com.inq.flash.client.chatskins.SndMgr.fixButtons();
      if (com.inq.flash.client.chatskins.SndMgr.btnMuteOn != null) {
        com.inq.flash.client.chatskins.SndMgr.btnMuteOn.addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SndMgr.actionBtnMuteOff);
      }
      if (com.inq.flash.client.chatskins.SndMgr.btnMuteOff != null) {
        com.inq.flash.client.chatskins.SndMgr.btnMuteOff.addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SndMgr.actionBtnMuteOn);
      }
    } else {
      if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnChime")) {
        com.inq.flash.client.chatskins.SndMgr.btnChime = Application.application.getButton("btnChime");
        com.inq.flash.client.chatskins.SndMgr.btnChime._img.setAttribute("role", "button");
        com.inq.flash.client.chatskins.SndMgr.btnChime._img.setAttribute("aria-pressed", com.inq.flash.client.chatskins.SndMgr._mute ? "false" : "true");
        if (com.inq.flash.client.chatskins.SndMgr._mute) {
          com.inq.flash.client.chatskins.SndMgr.btnChime._img.setAttribute("src", com.inq.ui.SkinLoader.GetSkinPath() + com.inq.utils.Util.getConfig("soundOffImgURL", null));
        }
        if (com.inq.flash.client.chatskins.SndMgr.btnChime != null) {
          com.inq.flash.client.chatskins.SndMgr.btnChime.addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.chatskins.SndMgr.toggleBtnChime);
        }
      } else {
        com.inq.flash.client.chatskins.SndMgr._mute = true;
        com.inq.flash.client.control.PersistenceManager.SetValue("m", 0);
      }
    }
    return true;
  } catch (err) {
    if (js.Boot.__instanceof(err, Error)) {
      haxe.Log.trace("Error: " + Std.string(err), {fileName:"SndMgr.hx", lineNumber:318, className:"com.inq.flash.client.chatskins.SndMgr", methodName:"PlaySound"});
    }
  }
  return false;
};
com.inq.flash.client.chatskins.SndMgr.actionBtnMuteOn = function(me) {
  try {
    if (!com.inq.utils.Capabilities.isMobile()) {
      com.inq.flash.client.chatskins.SndMgr._mute = true;
      com.inq.flash.client.control.PersistenceManager.SetValue("m", com.inq.flash.client.chatskins.SndMgr._mute ? 1 : 0);
      if (com.inq.flash.client.chatskins.SndMgr.btnMuteOn != null && com.inq.flash.client.chatskins.SndMgr.btnMuteOff != null) {
        com.inq.flash.client.chatskins.SndMgr.fixButtons();
      } else {
        if (com.inq.flash.client.chatskins.SndMgr.btnChime != null) {
          com.inq.flash.client.chatskins.SndMgr.toggleBtnChime();
        }
      }
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  return true;
};
com.inq.flash.client.chatskins.SndMgr.actionBtnMuteOff = function(me) {
  try {
    if (!com.inq.utils.Capabilities.isMobile()) {
      com.inq.flash.client.chatskins.SndMgr._mute = false;
      com.inq.flash.client.control.PersistenceManager.SetValue("m", com.inq.flash.client.chatskins.SndMgr._mute ? 1 : 0);
      if (com.inq.flash.client.chatskins.SndMgr.btnMuteOn != null && com.inq.flash.client.chatskins.SndMgr.btnMuteOff != null) {
        com.inq.flash.client.chatskins.SndMgr.fixButtons();
      } else {
        if (com.inq.flash.client.chatskins.SndMgr.btnChime != null) {
          com.inq.flash.client.chatskins.SndMgr.toggleBtnChime();
        }
      }
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  return true;
};
com.inq.flash.client.chatskins.SndMgr.fixButtons = function() {
  if (com.inq.flash.client.chatskins.SndMgr.btnMuteOn != null && com.inq.flash.client.chatskins.SndMgr.btnMuteOff != null) {
    com.inq.flash.client.chatskins.SndMgr.btnMuteOn.setVisible(com.inq.flash.client.control.PersistenceManager.GetValue("m", com.inq.utils.Capabilities.isMobile() ? 1 : 0));
    com.inq.flash.client.chatskins.SndMgr.btnMuteOff.setVisible(!com.inq.flash.client.chatskins.SndMgr.btnMuteOn.getVisible());
  }
};
com.inq.flash.client.chatskins.SndMgr.toggleBtnChime = function() {
  if (com.inq.flash.client.chatskins.SndMgr.btnChime != null) {
    var objCheck = com.inq.flash.client.chatskins.SndMgr.btnChime._img;
    var _newim = com.inq.flash.client.chatskins.SndMgr.btnChime._newim;
    var currentValue = objCheck.getAttribute("aria-pressed");
    if (currentValue == "false") {
      objCheck.setAttribute("alt", "Chime on");
      com.inq.utils.Timer.delay(function() {
        com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", "Chime On", com.inq.flash.client.chatskins.ChatTextArea.SYSTEM);
      }, 500);
      if (com.inq.flash.client.control.FlashPeer.getIsSkinLocal()) {
        objCheck.setAttribute("src", com.inq.flash.client.control.FlashPeer.getSkinPath() + com.inq.utils.Util.getConfig("soundOnImgURL", null));
      } else {
        objCheck.setAttribute("src", com.inq.ui.SkinLoader.GetSkinPath() + com.inq.utils.Util.getConfig("soundOnImgURL", null));
      }
      _newim.setAttribute("src", com.inq.ui.SkinLoader.GetSkinPath() + com.inq.utils.Util.getConfig("soundOnImgURL", null));
      objCheck.setAttribute("aria-pressed", "true");
      com.inq.flash.client.chatskins.SndMgr._mute = false;
    } else {
      objCheck.setAttribute("alt", "Chime off");
      com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", "Chime Off", com.inq.flash.client.chatskins.ChatTextArea.SYSTEM);
      if (com.inq.flash.client.control.FlashPeer.getIsSkinLocal()) {
        objCheck.setAttribute("src", com.inq.flash.client.control.FlashPeer.getSkinPath() + com.inq.utils.Util.getConfig("soundOffImgURL", null));
      } else {
        objCheck.setAttribute("src", com.inq.ui.SkinLoader.GetSkinPath() + com.inq.utils.Util.getConfig("soundOffImgURL", null));
      }
      _newim.setAttribute("src", com.inq.ui.SkinLoader.GetSkinPath() + com.inq.utils.Util.getConfig("soundOffImgURL", null));
      objCheck.setAttribute("aria-pressed", "false");
      com.inq.flash.client.chatskins.SndMgr._mute = true;
    }
    com.inq.flash.client.control.PersistenceManager.SetValue("m", com.inq.flash.client.chatskins.SndMgr._mute ? 1 : 0);
  }
};
com.inq.flash.client.chatskins.SndMgr.PlaySound = function(soundURL) {
  if (com.inq.utils.Capabilities.isMobile() && typeof com.inq.flash.client.chatskins.SndMgr.audio != "undefined") {
    if (com.inq.flash.client.chatskins.SndMgr.btnChime != null) {
      var currentValue = com.inq.flash.client.chatskins.SndMgr.btnChime._img.getAttribute("aria-pressed");
      if (currentValue == "true") {
        com.inq.flash.client.chatskins.SndMgr.ios.startAudio();
      }
    } else {
      com.inq.flash.client.chatskins.SndMgr.ios.startAudio();
    }
    return;
  }
  if (com.inq.flash.client.chatskins.SndMgr._mute) {
    return;
  }
  if (!com.inq.flash.client.chatskins.SndMgr.soundEnabled || com.inq.flash.client.control.PersistenceManager.GetValue("m", com.inq.utils.Capabilities.isMobile() ? 1 : 0)) {
    return;
  }
  if (com.inq.flash.client.chatskins.SndMgr.btnChime != null) {
    var currentValue = com.inq.flash.client.chatskins.SndMgr.btnChime._img.getAttribute("aria-pressed");
    if (currentValue == "false") {
      return;
    }
  } else {
    if (com.inq.flash.client.chatskins.SndMgr.btnMuteOn == null || com.inq.flash.client.chatskins.SndMgr.btnMuteOff == null) {
      return;
    }
  }
  com.inq.flash.client.chatskins.SndMgr.play(soundURL);
};
com.inq.flash.client.chatskins.SndMgr.play = function(soundURL) {
  if (com.inq.utils.Capabilities.isMobile() && typeof com.inq.flash.client.chatskins.SndMgr.audio != "undefined") {
    com.inq.flash.client.chatskins.SndMgr.ios.startAudio();
    return;
  }
  if (com.inq.flash.client.chatskins.SndMgr.audioSupport) {
    com.inq.flash.client.chatskins.SndMgr.audio.play();
    return;
  }
  if (soundURL == null) {
    soundURL = com.inq.flash.client.chatskins.SndMgr.soundURL;
    if (soundURL == null) {
      return;
    }
  }
  try {
    if (null != com.inq.flash.client.chatskins.SndMgr.divSound) {
      var cidSwf = "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000";
      var cidQT = "clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B";
      var cidMP = "clsid:6BF52A52-394A-11D3-B153-00C04F79FAA6";
      var swfPath = com.inq.utils.Util.getConfig("soundSwf", null);
      var soundExt = null;
      try {
        soundExt = soundURL.split(".").pop();
      } catch (e) {
        if (js.Boot.__instanceof(e, Error)) {
          soundExt = "mp3";
        } else {
          throw e;
        }
      }
      soundExt = soundExt != null ? soundExt.toLowerCase() : "mp3";
      if (soundURL != null && (soundExt == "mp3" || soundExt == "wav")) {
        var sounder = window.document.getElementById("inqSounder");
        if (sounder == null) {
          var bgsound = null;
          bgsound = document.createElement("BGSOUND");
          if (bgsound != null) {
            bgsound.id = "inqSounder";
            bgsound.loop = "1";
            document.body.insertBefore(bgsound, null);
          }
        }
        sounder = window.document.all["inqSounder"];
        if (sounder != null && sounder.src != null) {
          try {
            sounder.src = soundURL;
            return;
          } catch (e) {
            if (js.Boot.__instanceof(e, Error)) {
            } else {
              throw e;
            }
          }
        }
      }
      if (null == swfPath) {
        swfPath = "PlaySoundFile.swf";
      }
      swfPath = com.inq.ui.SkinLoader.GetSkinPath() + "/" + swfPath;
      var flashvars = soundURL == null ? null : "soundURL=" + soundURL + " ";
      var randomNumber = Math.floor(Math.random() * 1E3);
      var swfEmbed = document.all ? "" : '<embed src="' + swfPath + '" quality="high" play="true" loop="false" scale="showall" ' + (flashvars != null ? 'flashvars="' + flashvars + '" ' : "") + 'wmode="transparent" devicefont="false" bgcolor="#ffffff" name="PlaySoundFile" menu="false" allowfullscreen="false" allowscriptaccess="sameDomain" salign="" type="application/x-shockwave-flash" width="10" align="middle" height="10"> \n';
      var haveMime = com.inq.flash.client.chatskins.SndMgr.searchForMimeType(soundExt);
      if (!haveMime && soundExt == "mp3") {
        haveMime = com.inq.flash.client.chatskins.SndMgr.searchForMimeType("mp4");
      }
      if (haveMime) {
        swfEmbed = '<embed src="' + soundURL + '" wmode="transparent" autostart="true" loop="false" width="1" height="1" controller="false">' + "</embed>";
      } else {
        if (com.inq.flash.client.chatskins.SndMgr.swfSoundSuppress) {
          swfEmbed = "";
        }
      }
      var swfHtml = '<object classid="' + cidSwf + '" name="sound' + randomNumber + '"' + ' data="' + swfPath + '"' + ' width="2" ' + ' height="2" ' + ' id="PlaySoundFile"' + ' align="middle">' + ' <param name="allowScriptAccess" value="sameDomain" />' + ' <param name="allowFullScreen" value="false" />' + ' <param name="movie" value="' + swfPath + '" />' + ' <param name="loop" value="false" />' + ' <param name="menu" value="false" />' + ' <param name="quality" value="high" />' + ' <param name="wmode" value="transparent" />' + 
      ' <param name="bgcolor" value="#FF000" />' + (soundURL != null ? ' <param name="flashvars" value="soundURL=' + soundURL + '" />' : "") + (flashvars != null ? ' <param name="flashvars" value="' + flashvars + '" />' : "") + swfEmbed + "</object>";
      if (soundURL != null) {
        swfHtml = '<object classid="' + cidMP + '" name="sound' + randomNumber + '"' + ' data="' + soundURL + '"' + ' width="1" ' + ' height="1" ' + ' id="PlaySoundFileMediaPlayer"' + ' align="middle">' + ' <param name="wmode" value="transparent" />' + ' <PARAM name="SRC" VALUE="' + soundURL + '">' + ' <PARAM name="AUTOPLAY" VALUE="1">' + ' <PARAM name="Filename" VALUE="' + soundURL + '">' + ' <PARAM name="AutoSize" VALUE="0">' + ' <PARAM name="AutoStart" VALUE="0">' + ' <PARAM name="ClickToPlay" VALUE="1">' + 
        ' <PARAM name="PlayCount" VALUE="1">' + ' <PARAM name="ShowControls" VALUE="0">' + ' <PARAM name="ShowAudioControls" VALUE="0">' + ' <PARAM name="ShowDisplay" VALUE="0">' + ' <PARAM name="ShowPositionControls" VALUE="-1">' + ' <PARAM name="ShowStatusBar" VALUE="0">' + ' <PARAM name="ShowTracker" VALUE="0">' + "\n" + swfHtml + "\n" + "</object>";
      }
      if (soundURL != null) {
        swfHtml = '<object classid="' + cidQT + '" name="sound' + randomNumber + '"' + ' data="' + soundURL + '"' + ' width="2" ' + ' height="2" ' + ' id="PlaySoundFileQT"' + ' align="middle">' + ' <param name="wmode" value="transparent" />' + ' <PARAM name="SRC" VALUE="' + soundURL + '">' + ' <PARAM name="AUTOPLAY" VALUE="true">' + '<param name="controller" value="false">' + "\n" + swfHtml + "\n" + "</object>";
      }
      com.inq.flash.client.chatskins.SndMgr.divSound.innerHTML = swfHtml;
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("Error: " + Std.string(e), {fileName:"SndMgr.hx", lineNumber:318, className:"com.inq.flash.client.chatskins.SndMgr", methodName:"PlaySound"});
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.chatskins.SndMgr.searchForMimeType = function(mimeType) {
  var mimes = window.navigator["mimeTypes"];
  if (mimes == null || mimes.length < 1) {
    return false;
  }
  var mix, six;
  var _g1 = 0, _g = mimes.length;
  while (_g1 < _g) {
    var mix1 = _g1++;
    var suffixes = mimes[mix1].suffixes.split(",");
    if (suffixes == null || suffixes.length < 1) {
      continue;
    }
    var _g3 = 0, _g2 = suffixes.length;
    while (_g3 < _g2) {
      var six1 = _g3++;
      if (mimeType == suffixes[six1]) {
        return true;
      }
    }
  }
  return false;
};
com.inq.flash.client.chatskins.SndMgr.prototype.__class__ = com.inq.flash.client.chatskins.SndMgr;
com.inq.flash.client.chatskins.SndMgr.divSound = null;
com.inq.flash.client.chatskins.SndMgr._initialized = com.inq.flash.client.chatskins.SndMgr._init();
com.inq.flash.client.chatskins.SndMgr._mute = false;
com.inq.flash.client.chatskins.SndMgr.soundEnabled = true;
com.inq.flash.client.chatskins.SndMgr.swfSoundSuppress = false;
com.inq.flash.client.chatskins.VideoMgr = function() {
  return {};
}();
com.inq.flash.client.chatskins.VideoMgr.init = function() {
  com.inq.flash.client.chatskins.VideoMgr.customerAcceptsVideo = com.inq.utils.Util.getConfig("customerAcceptsVideo", "Customer accepts video-chat invitation.");
  com.inq.flash.client.chatskins.VideoMgr.customerDeclinesVideo = com.inq.utils.Util.getConfig("customerDeclinesVideo", "Customer declines video-chat invitation.");
  com.inq.flash.client.chatskins.VideoMgr.customerStopsVideo = com.inq.utils.Util.getConfig("customerStopsVideo", "Customer stops video-chat.");
  com.inq.flash.client.control.FlashPeer.setCiFunction("ciAcceptVideoInv", com.inq.flash.client.chatskins.VideoMgr.acceptVideo);
  com.inq.flash.client.control.FlashPeer.setCiFunction("ciDeclineVideoInv", com.inq.flash.client.chatskins.VideoMgr.declineVideo);
  com.inq.flash.client.control.FlashPeer.setCiFunction("ciStopVideo", com.inq.flash.client.chatskins.VideoMgr.stopVideo);
};
com.inq.flash.client.chatskins.VideoMgr.acceptVideo = function() {
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendVideoMessage(com.inq.flash.client.chatskins.VideoMgr.customerAcceptsVideo, com.inq.flash.client.data.MessageFields.DATA_CLIENT_VIDEO_ACCEPT);
};
com.inq.flash.client.chatskins.VideoMgr.declineVideo = function() {
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendVideoMessage(com.inq.flash.client.chatskins.VideoMgr.customerDeclinesVideo, com.inq.flash.client.data.MessageFields.DATA_CLIENT_VIDEO_DECLINE);
};
com.inq.flash.client.chatskins.VideoMgr.stopVideo = function() {
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendVideoMessage(com.inq.flash.client.chatskins.VideoMgr.customerStopsVideo, com.inq.flash.client.data.MessageFields.DATA_CLIENT_VIDEO_STOP);
};
com.inq.flash.client.chatskins.VideoMgr.customerAcceptsVideo = null;
com.inq.flash.client.chatskins.VideoMgr.customerDeclinesVideo = null;
com.inq.flash.client.chatskins.VideoMgr.customerStopsVideo = null;
com.inq.flash.client.chatskins.XTrace = function() {
};
$hxClasses["com.inq.flash.client.chatskins.XTrace"] = com.inq.flash.client.chatskins.XTrace;
com.inq.flash.client.chatskins.XTrace.__name__ = ["com", "inq", "flash", "client", "chatskins", "XTrace"];
com.inq.flash.client.chatskins.XTrace.redirection = function() {
  haxe.Log.trace = com.inq.flash.client.chatskins.XTrace.sysTrace;
  return true;
};
com.inq.flash.client.chatskins.XTrace.setRedirection = function() {
  haxe.Log.trace = com.inq.flash.client.chatskins.XTrace.sysTrace;
  haxe.Log.trace("", {fileName:"XTrace.hx", lineNumber:34, className:"com.inq.flash.client.chatskins.XTrace", methodName:"setRedirection"});
};
com.inq.flash.client.chatskins.XTrace.sysTrace = function(v, inf) {
  var txt = "[" + inf.fileName + ":" + inf.lineNumber + " " + inf.methodName + "] " + Std.string(v);
};
com.inq.flash.client.chatskins.XTrace.StackTrace = function(err, hdr) {
  if (hdr == null) {
    hdr = "WARNING:";
  }
  var st = "";
  var erMsg = err.message;
  var errString = err.toString();
  haxe.Log.trace(hdr + " " + st, {fileName:"XTrace.hx", lineNumber:137, className:"com.inq.flash.client.chatskins.XTrace", methodName:"StackTrace"});
};
com.inq.flash.client.chatskins.XTrace.prototype.__class__ = com.inq.flash.client.chatskins.XTrace;
com.inq.flash.client.control.ApplicationController = function() {
  if (null == com.inq.flash.client.control.ApplicationController.applicationController) {
    com.inq.flash.client.control.ApplicationController.applicationController = this;
  }
  this.chatRouterListen = false;
  this.firstMessageSent = this.persistentReconnect = false;
  this.openerMessageQueue = new Array;
  this.authorizedOnce = false;
  this.chatAccepted = false;
  this.bSendClickStreamData = false;
  this.messageQueue = new Array;
  this.msgCount = 0;
  haxe.Log.trace("create FlashMessagingFramework", {fileName:"ApplicationController.hx", lineNumber:107, className:"com.inq.flash.client.control.ApplicationController", methodName:"new"});
  this.framework = new com.inq.flash.messagingframework.FlashMessagingFramework(this);
  haxe.Log.trace("created FlashMessagingFramework", {fileName:"ApplicationController.hx", lineNumber:109, className:"com.inq.flash.client.control.ApplicationController", methodName:"new"});
  window["com"] = com;
  window["com"]["inq"] = com.inq;
  window["com"]["inq"]["getOpenerMessageQueue"] = $bind(this, this.getOpenerMessageQueue);
  window["com"]["inq"]["getMessageQueue"] = $bind(this, this.getMessageQueue);
  if (this.chat == null) {
    this.chat = new com.inq.flash.client.data.Chat;
  }
  var handler = new com.inq.flash.client.control.messagehandlers.ChatCommunicationMessageHandler;
  this.registerHandler(handler);
  handler = new com.inq.flash.client.control.messagehandlers.ChatAcceptedMessageHandler;
  this.registerHandler(handler);
  handler = new com.inq.flash.client.control.messagehandlers.ChatNeedWaitMessageHandler;
  this.registerHandler(handler);
  handler = new com.inq.flash.client.control.messagehandlers.ChatroomMemberConnectedMessageHandler;
  this.registerHandler(handler);
  handler = new com.inq.flash.client.control.messagehandlers.ChatroomOwnerTransferResponseMessageHandler;
  this.registerHandler(handler);
  handler = new com.inq.flash.client.control.messagehandlers.ChatroomTransferResponse;
  this.registerHandler(handler);
  handler = new com.inq.flash.client.control.messagehandlers.ChatroomMemberLostMessageHandler;
  this.registerHandler(handler);
  handler = new com.inq.flash.client.control.messagehandlers.ChatExitMessageHandler;
  this.registerHandler(handler);
  handler = new com.inq.flash.client.control.messagehandlers.ChatDeniedMessageHandler;
  this.registerHandler(handler);
  handler = new com.inq.flash.client.control.messagehandlers.ChatAuthorizedMessageHandler;
  this.registerHandler(handler);
  handler = new com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler;
  this.registerHandler(handler);
  handler = new com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler;
  this.registerHandler(handler);
  handler = new com.inq.flash.client.control.messagehandlers.ErrorHandler;
  this.registerHandler(handler);
  handler = new com.inq.flash.client.control.messagehandlers.ChatSystemMessageHandler;
  this.registerHandler(handler);
  this.registerHandler(new com.inq.flash.client.control.messagehandlers.ChatCobrowseMessageHandler);
  this.registerHandler(new com.inq.flash.client.control.messagehandlers.NeedWaitHandler);
  this.registerHandler(new com.inq.flash.client.control.messagehandlers.ContinueTransitionHandler);
  this.registerHandler(new com.inq.flash.client.control.messagehandlers.TypingActivityHandler);
  this.registerHandler(new com.inq.flash.client.control.messagehandlers.StateChangeMessageHandler);
  this.registerHandler(new com.inq.flash.client.control.messagehandlers.CommandMessageHandler);
  this.registerHandler(new com.inq.flash.client.control.messagehandlers.ChatLineMessageHandler);
  this.registerHandler(new com.inq.flash.client.control.messagehandlers.PersistentActiveHandler);
  this.registerHandler(new com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler);
};
$hxClasses["com.inq.flash.client.control.ApplicationController"] = com.inq.flash.client.control.ApplicationController;
com.inq.flash.client.control.ApplicationController.__name__ = ["com", "inq", "flash", "client", "control", "ApplicationController"];
com.inq.flash.client.control.ApplicationController.isSkipRestoreMsgOnce = false;
com.inq.flash.client.control.ApplicationController.prototype.getChat = function() {
  return this.chat;
};
com.inq.flash.client.control.ApplicationController.prototype.updateXFrameFromBizRule = function(layerID, url, channelID) {
  if (com.inq.flash.client.control.XFrameWorker.isLayerVisible(layerID)) {
    com.inq.flash.client.control.XFrameWorker.showLayer(layerID, null, url, channelID);
  }
};
com.inq.flash.client.control.ApplicationController.prototype.showAutomaton = function(layerId, url, businessUnitId, initiator) {
  com.inq.flash.client.control.XFrameWorker.showLayer(layerId, null, url, businessUnitId, null, initiator);
};
com.inq.flash.client.control.ApplicationController.prototype.sendDTEvent = function(eventName, data) {
  var msg = new com.inq.flash.client.data.ChatAutomatonResponseMessage(this.chat, eventName, data);
  var selectedLinkName = null;
  if (data.selectedLinkName) {
    selectedLinkName = data.selectedLinkName;
  }
  var checkboxNames = null;
  if (data.selectedCheckboxNames) {
    checkboxNames = data.selectedCheckboxNames;
  }
  com.inq.flash.client.chatskins.SkinControl.modifyDTFields(data.divId, selectedLinkName);
  this.sendMessageOrQueue(msg);
  com.inq.flash.client.chatskins.SkinControl.stopOpenerScript();
  com.inq.flash.client.control.Incrementality.onInteracted();
  com.inq.flash.client.control.Incrementality.onCustomerMsg();
};
com.inq.flash.client.control.ApplicationController.prototype.sendInputState = function(itemName, attributeName, state, changeNow) {
  if (changeNow) {
    com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.setAttribute(itemName, attributeName, state);
  }
  var msg = null;
  msg = new com.inq.flash.client.data.ChatAutomatonElementSetMessage(this.chat, itemName, attributeName, state);
  this.sendMessageOrQueue(msg);
  com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.incrementOutstandingCount();
};
com.inq.flash.client.control.ApplicationController.prototype.sendCoBrowseMessage = function(messageString, eventType, highlightEnabled) {
  var message = new com.inq.flash.client.data.ChatCommunicationCobrowseMessage(this.chat, messageString);
  message.addProperty(com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT, eventType);
  message.addProperty(com.inq.flash.client.data.MessageFields.KEY_LINE_NR, "-1");
  if (highlightEnabled && eventType == com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_ACCEPT) {
    message.addProperty(com.inq.flash.client.data.MessageFields.KEY_COBROWSE_HIGHLIGHT_ENABLED, "1");
  }
  this.sendText(message);
};
com.inq.flash.client.control.ApplicationController.prototype.sendVideoMessage = function(messageString, eventType) {
  var message = new com.inq.flash.client.data.ChatActivityMessage(this.chat, eventType);
  message.addProperty(com.inq.flash.client.data.MessageFields.KEY_DISPLAY_TEXT, messageString);
  message.addProperty(com.inq.flash.client.data.MessageFields.KEY_LINE_NR, "-1");
  this.sendText(message);
};
com.inq.flash.client.control.ApplicationController.prototype.sendFileUploadMessage = function(messageString, eventType) {
  var message = new com.inq.flash.client.data.ChatActivityMessage(this.chat, eventType);
  message.addProperty(com.inq.flash.client.data.MessageFields.KEY_DISPLAY_TEXT, messageString);
  message.addProperty(com.inq.flash.client.data.MessageFields.KEY_LINE_NR, "-1");
  this.sendMessageOrQueue(message);
};
com.inq.flash.client.control.ApplicationController.prototype.sendCoBrowseMessageQuietly = function(messageString, eventType) {
  var message = new com.inq.flash.client.data.ChatCommunicationCobrowseMessage(this.chat, messageString);
  message.addProperty(com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT, eventType);
  message.addProperty(com.inq.flash.client.data.MessageFields.KEY_LINE_NR, "-1");
  message.addProperty(com.inq.flash.client.data.MessageFields.KEY_MESSAGE_CUSTOMER_QUIET, "true");
  this.sendText(message);
};
com.inq.flash.client.control.ApplicationController.prototype.updateFormFields = function(formData, formName, formId) {
  com.inq.flash.client.chatskins.SkinControl.updateFormFields(formData, formName, formId);
};
com.inq.flash.client.control.ApplicationController.prototype.submitForm = function(formName, formId, formString) {
  var displayMessage = com.inq.utils.Util.getConfig("sFormSubmitted", "form submitted");
  var message = new com.inq.flash.client.data.ChatCommunicationMessage(this.chat, displayMessage);
  message.addProperty(com.inq.flash.client.data.MessageFields.FORM_DATA, formString);
  message.addProperty(com.inq.flash.client.data.MessageFields.FORM_NAME, formName);
  message.addProperty(com.inq.flash.client.data.MessageFields.FORM_ID, formId);
  this.sendText(message);
};
com.inq.flash.client.control.ApplicationController.prototype.isFirstMessageSent = function() {
  return this.firstMessageSent;
};
com.inq.flash.client.control.ApplicationController.prototype.customerClosesPopup = function() {
  this.waitingToExitChat = true;
  try {
    var msgcnt = com.inq.flash.client.control.PersistenceManager.GetValue("msgcnt", 0);
    if (this.framework.isConnected() || this.wasConnected || msgcnt != 0) {
      if (!this.authorizedOnce && com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry == 0) {
        this.shutdownQuietly();
      } else {
        if (this.chat != null && this.framework.isConnected()) {
          var cid = this.chat.getChatID();
          var msg = new com.inq.flash.client.data.ChatExitMessage(cid);
          var cTY = Application.application.getCanvas("thankYou");
          if (msg != null && (cTY == null || !cTY.getVisible())) {
            this.sendMessage(msg);
          }
        }
      }
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("customerClosesPopup: Warning:" + Std.string(e), {fileName:"ApplicationController.hx", lineNumber:910, className:"com.inq.flash.client.control.ApplicationController", methodName:"customerClosesPopup"});
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.control.ApplicationController.prototype.checkForChatExit = function() {
  if (this.waitingToExitChat) {
    this.customerClosesPopup();
  }
};
com.inq.flash.client.control.ApplicationController.prototype.setSocketIP = function(crAddress) {
  haxe.Log.trace("setSocketIP:207 crAddress=" + crAddress, {fileName:"ApplicationController.hx", lineNumber:838, className:"com.inq.flash.client.control.ApplicationController", methodName:"setSocketIP"});
  if (crAddress != null && crAddress != "") {
    haxe.Log.trace("setSocketIP:209 crAddress=" + crAddress, {fileName:"ApplicationController.hx", lineNumber:840, className:"com.inq.flash.client.control.ApplicationController", methodName:"setSocketIP"});
    haxe.Log.trace("setSocketIP:211 crAddress=" + crAddress, {fileName:"ApplicationController.hx", lineNumber:842, className:"com.inq.flash.client.control.ApplicationController", methodName:"setSocketIP"});
  }
  haxe.Log.trace("setSocketIP:213 crAddress=" + crAddress, {fileName:"ApplicationController.hx", lineNumber:844, className:"com.inq.flash.client.control.ApplicationController", methodName:"setSocketIP"});
  this.persistentFrameReconnect();
  haxe.Log.trace("setSocketIP:215 crAddress=" + crAddress, {fileName:"ApplicationController.hx", lineNumber:846, className:"com.inq.flash.client.control.ApplicationController", methodName:"setSocketIP"});
};
com.inq.flash.client.control.ApplicationController.prototype.setQueueMessages = function(doQ) {
  this.authorizedOnce = true;
  if (!doQ) {
    this.attemptingConnection = false;
  }
  if (this.queueMessages && !doQ) {
    this.queueMessages = false;
    var _g1 = 0, _g = this.messageQueue.length;
    while (_g1 < _g) {
      var i = _g1++;
      var obj = this.messageQueue[i];
      if (obj != null) {
        var msgItem = this.messageQueue[i];
        var msg = msgItem.msg;
        var msgTime = msgItem.clientTime;
        var deltaTime = Math.round((new Date).getTime() - msgTime);
        msg.addProperty(com.inq.flash.client.data.MessageFields.KEY_TIME_DELTA, "" + deltaTime);
        this.sendMessage(msg);
      }
    }
    this.messageQueue = new Array;
  }
  this.queueMessages = doQ;
};
com.inq.flash.client.control.ApplicationController.prototype.sendFirstQueuedMessage = function() {
  if (!this.queueMessages || this.messageQueue.length < 1) {
    return;
  }
  var msgItem = this.messageQueue.shift();
  var msg = msgItem.msg;
  var msgTime = msgItem.clientTime;
  var deltaTime = Math.round((new Date).getTime() - msgTime);
  msg.addProperty(com.inq.flash.client.data.MessageFields.KEY_TIME_DELTA, "" + deltaTime);
  this.sendMessage(msg);
};
com.inq.flash.client.control.ApplicationController.prototype.playQueueMessages = function() {
  var i;
  var _g1 = 0, _g = this.messageQueue.length;
  while (_g1 < _g) {
    var i1 = _g1++;
    var msgItem = this.messageQueue[i1];
    var msgTime = msgItem.clientTime;
    var deltaTime = Math.round((new Date).getTime() - msgTime);
    var msg = js.Boot.__cast(msgItem.msg, com.inq.flash.messagingframework.Message);
    msg.addProperty(com.inq.flash.client.data.MessageFields.KEY_TIME_DELTA, "" + deltaTime);
    this.framework.sendMessage(msg);
  }
};
com.inq.flash.client.control.ApplicationController.prototype.shouldBeDisconnected = function() {
  return this.intentionalDisconnect;
};
com.inq.flash.client.control.ApplicationController.prototype.shutdownQuietly = function() {
  this.intentionalDisconnect = true;
  this.framework.disconnect();
};
com.inq.flash.client.control.ApplicationController.prototype.shutdown = function() {
  if (this.waitingToExitChat == true) {
    this.shutdownQuietly();
    return;
  }
  this.intentionalDisconnect = true;
  this.framework.disconnect();
  com.inq.flash.client.chatskins.SkinControl.agentClosesChat();
};
com.inq.flash.client.control.ApplicationController.prototype.sendChatCommunicationMessage = function(message, loc) {
  message.addProperty(com.inq.flash.client.data.MessageFields.KEY_LINE_NR, "" + loc);
  if (!this.attemptingConnection && !this.intentionalDisconnect && !this.framework.isConnected() && !this.wasConnected) {
    this.sendButtonClickedTime = Math.round((new Date).getTime());
    try {
      haxe.Log.trace("attemptingConnection", {fileName:"ApplicationController.hx", lineNumber:734, className:"com.inq.flash.client.control.ApplicationController", methodName:"sendChatCommunicationMessage"});
      this.attemptingConnection = true;
      haxe.Log.trace("queueMessages", {fileName:"ApplicationController.hx", lineNumber:736, className:"com.inq.flash.client.control.ApplicationController", methodName:"sendChatCommunicationMessage"});
      this.queueMessages = true;
      haxe.Log.trace("do a send text", {fileName:"ApplicationController.hx", lineNumber:738, className:"com.inq.flash.client.control.ApplicationController", methodName:"sendChatCommunicationMessage"});
      this.sendText(message);
      haxe.Log.trace("framework.connect()", {fileName:"ApplicationController.hx", lineNumber:740, className:"com.inq.flash.client.control.ApplicationController", methodName:"sendChatCommunicationMessage"});
      this.framework.connect();
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
        haxe.Log.trace("ERROR: " + Std.string(e), {fileName:"ApplicationController.hx", lineNumber:743, className:"com.inq.flash.client.control.ApplicationController", methodName:"sendChatCommunicationMessage"});
      } else {
        throw e;
      }
    }
  } else {
    this.sendText(message);
  }
};
com.inq.flash.client.control.ApplicationController.prototype.engageChat = function(chatParams) {
  if (!this.attemptingConnection && !this.intentionalDisconnect && (this.chatRouterListen || !this.framework.isConnected() && !this.wasConnected)) {
    this.sendButtonClickedTime = Math.round((new Date).getTime());
    com.inq.flash.client.chatskins.SkinControl.onChatEngaged();
    var message = new com.inq.flash.client.data.ChatEngageMessage(this.chat, chatParams.agentOutcome, chatParams.clientOutcome, this.getAgentAlias());
    if (chatParams.agentAttrs != "") {
      this.chat.setAgentAttributes(chatParams.agentAttrs);
    }
    if (chatParams.businessUnitID != "") {
      this.chat.setChannelID(chatParams.businessUnitID);
    }
    if (chatParams.phone != "") {
      this.addInitialData(message, "CallerPhone", chatParams.phone, "CallerPhone");
    }
    if (chatParams.agentGroupId) {
      this.chat.setAgentGroupID(chatParams.agentGroupId);
    }
    if (chatParams.publicUserId) {
      this.chat.setPublicUserId(chatParams.publicUserId);
    }
    if (chatParams.scriptTreeId) {
      this.chat.setScriptID(chatParams.scriptTreeId);
    }
    var loc = -1;
    if (chatParams.clientOutcome) {
      loc = com.inq.flash.client.chatskins.SkinControl.AddOpenerToChatWindow(StringTools.htmlUnescape(this.getAgentAlias()), chatParams.clientOutcome, com.inq.flash.client.chatskins.ChatTextArea.AGENT, -1);
    }
    this.sendChatCommunicationMessage(message, loc);
  }
};
com.inq.flash.client.control.ApplicationController.prototype.getAgentAlias = function() {
  var agentName = com.inq.flash.client.control.FlashVars.getFlashVars().agentName;
  var useAgentAlias = com.inq.utils.Util.getConfig("useAgentAlias", false);
  if (useAgentAlias == true && com.inq.flash.client.control.FlashVars.getValue("overrideAgentAlias") != "true") {
    var defaultAgentAlias = com.inq.utils.Util.getConfig("defaultAgentAlias", "&nbsp;");
    agentName = defaultAgentAlias;
  }
  return agentName;
};
com.inq.flash.client.control.ApplicationController.prototype.sendButtonClicked = function() {
  haxe.Log.trace("enter", {fileName:"ApplicationController.hx", lineNumber:664, className:"com.inq.flash.client.control.ApplicationController", methodName:"sendButtonClicked"});
  var txtInput = Application.application.getTextInput("txtInput");
  var text = txtInput._getInput();
  if (text == null || text == "") {
    haxe.Log.trace("no text", {fileName:"ApplicationController.hx", lineNumber:670, className:"com.inq.flash.client.control.ApplicationController", methodName:"sendButtonClicked"});
    return;
  }
  haxe.Log.trace("Check connections", {fileName:"ApplicationController.hx", lineNumber:674, className:"com.inq.flash.client.control.ApplicationController", methodName:"sendButtonClicked"});
  haxe.Log.trace("attemptingConnection=" + Std.string(this.attemptingConnection) + "\n" + "intentionalDisconnect=" + Std.string(this.intentionalDisconnect) + "\n", {fileName:"ApplicationController.hx", lineNumber:675, className:"com.inq.flash.client.control.ApplicationController", methodName:"sendButtonClicked"});
  txtInput.clear();
  txtInput.clearPlaceholder();
  var loc = this.appendSentText(text, -1);
  var message = new com.inq.flash.client.data.ChatCommunicationMessage(this.chat, text);
  this.sendChatCommunicationMessage(message, loc);
};
com.inq.flash.client.control.ApplicationController.prototype.callButtonClicked = function() {
  var txtInput = Application.application.getTextInput("txtInput");
  var text = txtInput._getInput();
  this.callStreamData = com.inq.flash.client.chatskins.SkinControl.getCallStreamData() + com.inq.flash.client.chatskins.SkinControl.getCallFormData();
  var message = new com.inq.flash.client.data.CallCommunicationMessage(this.chat, text);
  message.addProperty(com.inq.flash.client.data.MessageFields.KEY_USERNAME, com.inq.flash.client.chatskins.SkinControl.getCallerNameString());
  message.addProperty(com.inq.flash.client.data.MessageFields.KEY_LINE_NR, "-2");
  message.addProperty("fromV3", com.inq.flash.client.chatskins.SkinControl.getCallerNameString());
  com.inq.flash.client.control.PersistenceManager.SetValue("cn", com.inq.flash.client.chatskins.SkinControl.getCallerNameString());
  this.queueMessages = true;
  this.sendMessageOrQueue(message);
  this.chatRouterListen = false;
  var success = com.inq.flash.client.control.FlashPeer.popOutChat(true, false);
  if (success) {
    var chatCanvas = Application.application.getCanvas("callForm");
    chatCanvas.setVisible(false);
  }
};
com.inq.flash.client.control.ApplicationController.prototype.isConnected = function() {
  if (this.framework == null) {
    return false;
  }
  return this.framework.isConnected();
};
com.inq.flash.client.control.ApplicationController.prototype.localChatRouterListen = function() {
  try {
    if (this.framework.isConnected()) {
      return;
    }
    this.attemptingConnection = true;
    this.queueMessages = true;
    var count = com.inq.flash.client.control.PersistenceManager.GetValue("msgcnt", 0);
    this.framework.setParam("count", count);
    this.framework.connect();
    this.chatRouterListen = true;
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("Error: " + Std.string(e), {fileName:"ApplicationController.hx", lineNumber:635, className:"com.inq.flash.client.control.ApplicationController", methodName:"localChatRouterListen", customParams:["error"]});
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.control.ApplicationController.prototype.persistentFrameReconnect = function() {
  try {
    if (!this.attemptingConnection) {
      this.attemptingConnection = true;
      this.queueMessages = true;
      var count = com.inq.flash.client.control.PersistenceManager.GetValue("msgcnt", 0);
      this.framework.setParam("count", count);
      this.persistentReconnect = true;
      this.chatRouterListen = false;
      this.framework.connect();
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("Error: " + Std.string(e), {fileName:"ApplicationController.hx", lineNumber:614, className:"com.inq.flash.client.control.ApplicationController", methodName:"persistentFrameReconnect"});
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.control.ApplicationController.prototype.connectionLost = function() {
  haxe.Log.trace("connectionLost();", {fileName:"ApplicationController.hx", lineNumber:591, className:"com.inq.flash.client.control.ApplicationController", methodName:"connectionLost"});
  this.queueMessages = true;
};
com.inq.flash.client.control.ApplicationController.prototype.setAgentConfig = function(agentID, eventData, coBrowseEnabled, buID, agentGroupID) {
  if (coBrowseEnabled == null) {
    coBrowseEnabled = false;
  }
  haxe.Log.trace("ApplicationController.setAgentConfig('" + agentID + "')", {fileName:"ApplicationController.hx", lineNumber:585, className:"com.inq.flash.client.control.ApplicationController", methodName:"setAgentConfig"});
  this.agentID = agentID;
  com.inq.flash.client.chatskins.SkinControl.setAgentConfig(agentID, eventData, coBrowseEnabled, buID, agentGroupID);
};
com.inq.flash.client.control.ApplicationController.prototype.urlStringToObject = function(urlStr) {
  var retObj = new com.inq.utils.Dictionary;
  var strArr = StringTools.urlDecode(urlStr).split("&");
  var _g1 = 0, _g = strArr.length;
  while (_g1 < _g) {
    var idx = _g1++;
    var item = strArr[idx];
    var nvPair = item.split("=");
    if (nvPair.length == 2) {
      var name = nvPair[0];
      var val = nvPair[1];
      retObj[name] = val;
    }
  }
  return retObj;
};
com.inq.flash.client.control.ApplicationController.prototype.sendMessage = function(msg) {
  this.addClickStreamData(msg);
  this.framework.sendMessage(msg);
  if (com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION == msg.getMessageType()) {
    com.inq.flash.client.control.Incrementality.onCustomerMsg(msg.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_DATA));
  }
};
com.inq.flash.client.control.ApplicationController.prototype.initializeAutomatonMode = function() {
  if (this.isAutomatonMode() && !this.framework.isConnected() && !com.inq.flash.client.chatskins.SkinControl.isContinued()) {
    haxe.Log.trace("initializing Inline DT automaton", {fileName:"ApplicationController.hx", lineNumber:553, className:"com.inq.flash.client.control.ApplicationController", methodName:"initializeAutomatonMode"});
    this.sendButtonClickedTime = Math.round((new Date).getTime());
    this.framework.connect();
    com.inq.flash.client.chatskins.SkinControl.StopTimer();
  }
};
com.inq.flash.client.control.ApplicationController.prototype.isAutomatonMode = function() {
  return this.chat.getAutomatonId() != null;
};
com.inq.flash.client.control.ApplicationController.prototype.addInitialData = function(msg, name, data, label) {
  var prefix = com.inq.flash.client.data.MessageFields.KEY_INITIAL_CLICKSTREAM_PREFIX + msg.nextInitialDataIndex();
  msg.addProperty(prefix + ".id", name);
  msg.addProperty(prefix + ".data", com.inq.flash.messagingframework.StringUtils.encodeStringForMessage(data));
  if (label != null && label != "" && label != "undefined") {
    msg.addProperty(prefix + ".label", label);
  }
};
com.inq.flash.client.control.ApplicationController.prototype.addClickStreamData = function(msg) {
  if (com.inq.flash.client.control.PersistenceManager.GetValue("s", 0) == 0) {
    this.bSendClickStreamData = true;
  }
  if (!this.bSendClickStreamData) {
    return;
  }
  if (com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION != msg.getMessageType() && com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_OPENER != msg.getMessageType() && com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_QUEUE != msg.getMessageType() && com.inq.flash.client.data.MessageFields.TYPE_CHAT_AUTOMATON_RESPONSE != msg.getMessageType() && com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_OUTCOME != msg.getMessageType()) {
    return;
  }
  var isPersistent = com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat();
  var initialClickstreamData = com.inq.flash.client.chatskins.SkinControl.getInitialClickstreamData();
  if (isPersistent) {
    try {
      initialClickstreamData += com.inq.flash.client.chatskins.SkinControl.getOpener().Application.application.applicationController.callStreamData;
    } catch (err) {
      haxe.Log.trace("ApplicationController.addClickstreamData Error" + Std.string(err), {fileName:"ApplicationController.hx", lineNumber:473, className:"com.inq.flash.client.control.ApplicationController", methodName:"addClickStreamData"});
    }
  }
  haxe.Log.trace("ApplicationController.addClickstreamData: clickStreamData = " + initialClickstreamData, {fileName:"ApplicationController.hx", lineNumber:476, className:"com.inq.flash.client.control.ApplicationController", methodName:"addClickStreamData"});
  this.bSendClickStreamData = false;
  var fieldDictionary = new com.inq.utils.Dictionary;
  if (initialClickstreamData == null) {
    return;
  }
  var csFields = initialClickstreamData.split("^^");
  haxe.Log.trace("", {fileName:"ApplicationController.hx", lineNumber:487, className:"com.inq.flash.client.control.ApplicationController", methodName:"addClickStreamData"});
  var _g1 = 0, _g = csFields.length;
  while (_g1 < _g) {
    var i = _g1++;
    var fieldItem = csFields[i];
    if (fieldItem == "") {
      continue;
    }
    var field = fieldItem.split("=");
    var fieldname = field.shift();
    var value = field.join("=");
    fieldDictionary[fieldname] = value;
  }
  haxe.Log.trace("", {fileName:"ApplicationController.hx", lineNumber:502, className:"com.inq.flash.client.control.ApplicationController", methodName:"addClickStreamData"});
  var fieldID = 0;
  var ixx;
  var _g1 = 0, _g = csFields.length;
  while (_g1 < _g) {
    var ixx1 = _g1++;
    var csField = csFields[ixx1];
    if ("" == csField) {
      continue;
    }
    haxe.Log.trace("field is " + csField, {fileName:"ApplicationController.hx", lineNumber:511, className:"com.inq.flash.client.control.ApplicationController", methodName:"addClickStreamData"});
    var name = csField.split("=").shift();
    if (name == null) {
      continue;
    }
    if (name.charAt(0) != "_") {
      var data = fieldDictionary[name];
      var label = fieldDictionary["_" + name];
      this.addInitialData(msg, name, data, label);
      fieldID++;
    }
  }
  com.inq.flash.client.control.PersistenceManager.SetValue("s", 1);
};
com.inq.flash.client.control.ApplicationController.prototype.connectionEstablished = function() {
  try {
    com.inq.flash.client.control.FlashPeer.setCABeacon(this.chat.BEACON_ACTIVATE);
    var connectionType = this.framework.getConnectionType();
    com.inq.flash.client.chatskins.SkinControl.connectionType = connectionType;
    var ti = Application.application.getTextInput("txtInput").setEnabled(true);
    this.wasConnected = true;
    var isPersistent = com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat();
    var initialClickstreamData = com.inq.flash.client.chatskins.SkinControl.getInitialClickstreamData();
    try {
      if (isPersistent && com.inq.flash.client.chatskins.SkinControl.isClick2call()) {
        initialClickstreamData += com.inq.flash.client.chatskins.SkinControl.getOpener().Application.application.applicationController.callStreamData;
      }
    } catch (err) {
      haxe.Log.trace("Exception: " + Std.string(err), {fileName:"ApplicationController.hx", lineNumber:398, className:"com.inq.flash.client.control.ApplicationController", methodName:"connectionEstablished"});
    }
    if (isPersistent) {
      if (this.notifiedAsPersistent) {
        isPersistent = false;
      } else {
        this.notifiedAsPersistent = true;
      }
    }
    haxe.Log.trace("ApplicationController.connectionEstablished, sending a chat request message", {fileName:"ApplicationController.hx", lineNumber:407, className:"com.inq.flash.client.control.ApplicationController", methodName:"connectionEstablished"});
    var message = null;
    try {
      haxe.Log.trace("ApplicationController: creating msg. chat=" + this.chat.toString(), {fileName:"ApplicationController.hx", lineNumber:410, className:"com.inq.flash.client.control.ApplicationController", methodName:"connectionEstablished"});
      haxe.Log.trace("ApplicationController: creating msg. isPersistent=" + Std.string(isPersistent) + ", agentID=" + this.agentID, {fileName:"ApplicationController.hx", lineNumber:411, className:"com.inq.flash.client.control.ApplicationController", methodName:"connectionEstablished"});
      var deltaTime = this.sendButtonClickedTime != null ? Math.round((new Date).getTime()) - this.sendButtonClickedTime : 0;
      message = new com.inq.flash.client.data.ChatRequestMessage(this.chat, isPersistent, this.agentID, deltaTime);
      com.inq.flash.client.control.PersistenceManager.SetValue("isEngaged", true, false);
      if (com.inq.flash.client.chatskins.SkinControl.isClick2call()) {
        message.addProperty(com.inq.flash.client.data.MessageFields.KEY_CALL_ENABLED, "true");
        message.addProperty(com.inq.flash.client.data.MessageFields.KEY_USERNAME, com.inq.flash.client.control.PersistenceManager.GetValue("cn", com.inq.flash.client.chatskins.SkinControl.getCallerNameString()));
      }
      haxe.Log.trace("ApplicationController: msg sent. msg=" + message.toString(), {fileName:"ApplicationController.hx", lineNumber:424, className:"com.inq.flash.client.control.ApplicationController", methodName:"connectionEstablished"});
    } catch (err) {
      haxe.Log.trace("Exception: " + Std.string(err), {fileName:"ApplicationController.hx", lineNumber:426, className:"com.inq.flash.client.control.ApplicationController", methodName:"connectionEstablished", customParams:["error"]});
    }
    haxe.Log.trace("framework.sendMessage(message):" + message.toString(), {fileName:"ApplicationController.hx", lineNumber:429, className:"com.inq.flash.client.control.ApplicationController", methodName:"connectionEstablished"});
    if (!com.inq.flash.client.chatskins.SkinControl.isContinued() || com.inq.flash.client.control.PersistenceManager.GetValue("msgcnt", 0) == 0) {
      this.sendMessage(message);
    }
    haxe.Log.trace("framework.sendMessage(chat.request) sent", {fileName:"ApplicationController.hx", lineNumber:432, className:"com.inq.flash.client.control.ApplicationController", methodName:"connectionEstablished"});
    if (this.persistentReconnect) {
      this.playQueueMessages();
      this.queueMessages = false;
    }
  } catch (e) {
    haxe.Log.trace("Exception: " + Std.string(e), {fileName:"ApplicationController.hx", lineNumber:438, className:"com.inq.flash.client.control.ApplicationController", methodName:"connectionEstablished"});
  }
  haxe.Log.trace("exit connectionEstablished", {fileName:"ApplicationController.hx", lineNumber:440, className:"com.inq.flash.client.control.ApplicationController", methodName:"connectionEstablished"});
};
com.inq.flash.client.control.ApplicationController.prototype.isConnectionAccepted = function() {
  return this.chatAccepted;
};
com.inq.flash.client.control.ApplicationController.prototype.setConnectionAccepted = function(b) {
  this.chatAccepted = b;
};
com.inq.flash.client.control.ApplicationController.prototype.acknowledgeChatPersistent = function(clientProtoDomain, messageCnt) {
  var b = com.inq.flash.client.control.FlashPeer.registerPersistentWindow();
  if (!b) {
    com.inq.flash.client.chatskins.SkinControl.noUnload();
  }
  var protoDomain = window.location.protocol + "//" + window.location.hostname;
  this.framework.acknowledgePersistentActive(this.chat.getChatID(), protoDomain, clientProtoDomain, !b, messageCnt);
};
com.inq.flash.client.control.ApplicationController.prototype.acknowledgeChatActive = function() {
  this.framework.acknowledgeChatActive(this.chat.getChatID());
};
com.inq.flash.client.control.ApplicationController.prototype.sendBrowserMessage = function(msg) {
  this.framework.sendBrowserMessage(msg);
};
com.inq.flash.client.control.ApplicationController.prototype.enable = function() {
  this.framework.enable();
};
com.inq.flash.client.control.ApplicationController.prototype.disable = function() {
  this.framework.disable();
  var ieVersion = com.inq.flash.client.control.FlashPeer.getBrowserMajorVer(true);
  if (!com.inq.flash.client.control.FlashPeer.isPersistentChat() || com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat() || !com.inq.utils.Util.isIE || ieVersion > 7) {
    com.inq.flash.client.control.FlashPeer.setCABeacon(this.chat.BEACON_DEACTIVATE);
  }
};
com.inq.flash.client.control.ApplicationController.prototype.sendMessageOrQueue = function(message, clientTime) {
  if (!this.queueMessages) {
    this.sendMessage(message);
  } else {
    var now = clientTime == null ? (new Date).getTime() : clientTime;
    this.messageQueue.push({clientTime:now, msg:message});
  }
};
com.inq.flash.client.control.ApplicationController.prototype.processClickToCallQueueMessages = function() {
  var opener = com.inq.flash.client.chatskins.SkinControl.getOpener();
  this.openerMessageQueue = opener["com"]["inq"]["getOpenerMessageQueue"]();
  var messageQueue = opener["com"]["inq"]["getMessageQueue"]();
  var message = null;
  if (messageQueue.length > 0) {
    message = messageQueue[messageQueue.length - 1].msg;
  }
  if (!this.attemptingConnection && !this.intentionalDisconnect && !this.framework.isConnected() && !this.wasConnected) {
    try {
      this.attemptingConnection = true;
      this.queueMessages = true;
      this.sendText(message);
      this.framework.connect();
    } catch (e) {
      haxe.Log.trace("ERROR in processClickToCallQueueMessages: " + Std.string(e), {fileName:"ApplicationController.hx", lineNumber:300, className:"com.inq.flash.client.control.ApplicationController", methodName:"processClickToCallQueueMessages"});
    }
  } else {
    this.sendText(message);
  }
  com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow(message.getProperty(com.inq.flash.client.data.MessageFields.KEY_USERNAME), com.inq.flash.messagingframework.StringUtils.htmlDecode(message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_DATA)), com.inq.flash.client.chatskins.ChatTextArea.CUSTOMER, -1);
};
com.inq.flash.client.control.ApplicationController.prototype.getMessageQueue = function() {
  return this.messageQueue;
};
com.inq.flash.client.control.ApplicationController.prototype.getOpenerMessageQueue = function() {
  return this.openerMessageQueue;
};
com.inq.flash.client.control.ApplicationController.prototype.sendOpenerQueue = function() {
  while (this.openerMessageQueue.length > 0) {
    var openerItem = this.openerMessageQueue.shift();
    var openerText = openerItem.data;
    var message = new com.inq.flash.client.data.ChatCommunicationOpenerMessage(this.chat, openerText, openerItem.agentAlias);
    this.sendMessageOrQueue(message, openerItem.clientTime);
  }
};
com.inq.flash.client.control.ApplicationController.prototype.sendQueueingText = function(queueingText, position, agentAlias) {
  var message = new com.inq.flash.client.data.ChatCommunicationQueueMessage(this.chat, queueingText, agentAlias);
  message.addProperty(com.inq.flash.client.data.MessageFields.KEY_LINE_NR, "" + position);
  this.sendMessageOrQueue(message);
};
com.inq.flash.client.control.ApplicationController.prototype.enqueueOpenerText = function(text, alias) {
  var now = (new Date).getTime();
  this.openerMessageQueue.push({clientTime:now, data:text, agentAlias:alias});
};
com.inq.flash.client.control.ApplicationController.prototype.sendText = function(message) {
  if (!this.firstMessageSent) {
    this.sendOpenerQueue();
  }
  this.sendMessageOrQueue(message);
  this.chatRouterListen = false;
  this.firstMessageSent = true;
};
com.inq.flash.client.control.ApplicationController.prototype.sendTextToAgent = function(text) {
  haxe.Log.trace("enter", {fileName:"ApplicationController.hx", lineNumber:618, className:"com.inq.flash.client.control.ApplicationController", methodName:"sendTextToAgent"});
  if (text == null || text == "") {
    haxe.Log.trace("no text", {fileName:"ApplicationController.hx", lineNumber:670, className:"com.inq.flash.client.control.ApplicationController", methodName:"sendTextToAgent"});
    return;
  }
  haxe.Log.trace("Check connections", {fileName:"ApplicationController.hx", lineNumber:637, className:"com.inq.flash.client.control.ApplicationController", methodName:"sendTextToAgent"});
  haxe.Log.trace("attemptingConnection=" + Std.string(this.attemptingConnection) + "\n" + "intentionalDisconnect=" + Std.string(this.intentionalDisconnect) + "\n", {fileName:"ApplicationController.hx", lineNumber:643, className:"com.inq.flash.client.control.ApplicationController", methodName:"sendTextToAgent"});
  var loc = this.appendSentText(text, -1);
  var message = new com.inq.flash.client.data.ChatCommunicationMessage(this.chat, text);
  this.sendChatCommunicationMessage(message, loc);
};
com.inq.flash.client.control.ApplicationController.prototype.sendRestoredMessage = function() {
  if (com.inq.flash.client.control.PersistenceManager.GetValue("msgcnt", 0) > 0) {
    if (com.inq.flash.client.control.ApplicationController.isSkipRestoreMsgOnce === true) {
      com.inq.flash.client.control.ApplicationController.isSkipRestoreMsgOnce = false;
    } else {
      var message = new com.inq.flash.client.data.ChatActivityMessage(this.chat, com.inq.flash.client.data.MessageFields.ACTIVITY_CUSTOMER_RESTORED);
      this.sendMessageOrQueue(message);
    }
  }
};
com.inq.flash.client.control.ApplicationController.prototype.sendMinimizedMessage = function() {
  if (com.inq.flash.client.control.PersistenceManager.GetValue("msgcnt", 0) > 0) {
    var message = new com.inq.flash.client.data.ChatActivityMessage(this.chat, com.inq.flash.client.data.MessageFields.ACTIVITY_CUSTOMER_MINIMIZED);
    this.sendMessageOrQueue(message);
  }
};
com.inq.flash.client.control.ApplicationController.prototype.TypingActivity = function(bTyping) {
  if (this.firstMessageSent) {
    var txtInput = Application.application.getTextInput("txtInput");
    var text = txtInput._getInput();
    var message = bTyping ? new com.inq.flash.client.data.ChatActivityMessage(this.chat, com.inq.flash.client.data.MessageFields.ACTIVITY_CUSTOMER_TYPING, null, null) : new com.inq.flash.client.data.ChatActivityMessage(this.chat, com.inq.flash.client.data.MessageFields.ACTIVITY_CUSTOMER_STOPS_TYPING, text, null);
    this.sendMessageOrQueue(message);
  }
};
com.inq.flash.client.control.ApplicationController.prototype.appendSentText = function(text, position) {
  return com.inq.flash.client.chatskins.SkinControl.AddCustomerTextToChatWindow(text, position);
};
com.inq.flash.client.control.ApplicationController.prototype.appendReceivedText = function(text, sender, position) {
  if (!com.inq.flash.client.control.XFrameWorker.isDisplayInCI(text)) {
    haxe.Log.trace('Text filtered... "' + text + '"', {fileName:"ApplicationController.hx", lineNumber:167, className:"com.inq.flash.client.control.ApplicationController", methodName:"appendReceivedText"});
    return;
  }
  if (com.inq.flash.client.control.FlashVars.getCustomerName() == sender) {
    com.inq.flash.client.chatskins.SkinControl.AddCustomerTextToChatWindow(text, position);
  } else {
    if (sender == "") {
      com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow(sender, text, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM_STATUS, position);
    } else {
      if (com.inq.flash.client.control.FlashPeer.getIsBuilder() && sender == "system") {
        com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow(sender, text, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, position);
      } else {
        com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow(sender, text, com.inq.flash.client.chatskins.ChatTextArea.AGENT, position);
      }
    }
  }
  ++this.msgCount;
};
com.inq.flash.client.control.ApplicationController.prototype.registerHandler = function(handler) {
  this.framework.registerMessageHandler(handler);
  handler.setController(this);
};
com.inq.flash.client.control.ApplicationController.prototype.processMessage = function(message) {
  this.framework.processMessage(message);
};
com.inq.flash.client.control.ApplicationController.prototype.getMessagingFramework = function() {
  return this.framework;
};
com.inq.flash.client.control.ApplicationController.prototype.sendButtonClickedTime = null;
com.inq.flash.client.control.ApplicationController.prototype.bSendClickStreamData = null;
com.inq.flash.client.control.ApplicationController.prototype.chatAccepted = null;
com.inq.flash.client.control.ApplicationController.prototype.authorizedOnce = null;
com.inq.flash.client.control.ApplicationController.prototype.waitingToExitChat = null;
com.inq.flash.client.control.ApplicationController.prototype.openerMessageQueue = null;
com.inq.flash.client.control.ApplicationController.prototype.messageQueue = null;
com.inq.flash.client.control.ApplicationController.prototype.chatRouterListen = null;
com.inq.flash.client.control.ApplicationController.prototype.notifiedAsPersistent = null;
com.inq.flash.client.control.ApplicationController.prototype.attemptingConnection = null;
com.inq.flash.client.control.ApplicationController.prototype.wasConnected = null;
com.inq.flash.client.control.ApplicationController.prototype.persistentReconnect = null;
com.inq.flash.client.control.ApplicationController.prototype.queueMessages = null;
com.inq.flash.client.control.ApplicationController.prototype.intentionalDisconnect = null;
com.inq.flash.client.control.ApplicationController.prototype.firstMessageSent = null;
com.inq.flash.client.control.ApplicationController.prototype.builtApplicationParameters = null;
com.inq.flash.client.control.ApplicationController.prototype.framework = null;
com.inq.flash.client.control.ApplicationController.prototype.agentID = null;
com.inq.flash.client.control.ApplicationController.prototype.chat = null;
com.inq.flash.client.control.ApplicationController.prototype.callStreamData = null;
com.inq.flash.client.control.ApplicationController.prototype.msgCount = null;
com.inq.flash.client.control.ApplicationController.prototype.__class__ = com.inq.flash.client.control.ApplicationController;
com.inq.flash.client.control.ApplicationController.applicationController = null;
if (!com.inq.flash.messagingframework) {
  com.inq.flash.messagingframework = {};
}
if (!com.inq.flash.messagingframework.connectionhandling) {
  com.inq.flash.messagingframework.connectionhandling = {};
}
;com.inq.flash.messagingframework.connectionhandling.ApplicationConnectionEventHandler = function() {
};
$hxClasses["com.inq.flash.messagingframework.connectionhandling.ApplicationConnectionEventHandler"] = com.inq.flash.messagingframework.connectionhandling.ApplicationConnectionEventHandler;
com.inq.flash.messagingframework.connectionhandling.ApplicationConnectionEventHandler.__name__ = ["com", "inq", "flash", "messagingframework", "connectionhandling", "ApplicationConnectionEventHandler"];
com.inq.flash.messagingframework.connectionhandling.ApplicationConnectionEventHandler.prototype.allConnectionAttemptsFailed = null;
com.inq.flash.messagingframework.connectionhandling.ApplicationConnectionEventHandler.prototype.connectionFailedNeedRetryRequest = null;
com.inq.flash.messagingframework.connectionhandling.ApplicationConnectionEventHandler.prototype.connectionSuccessful = null;
com.inq.flash.messagingframework.connectionhandling.ApplicationConnectionEventHandler.prototype.__class__ = com.inq.flash.messagingframework.connectionhandling.ApplicationConnectionEventHandler;
com.inq.flash.client.control.ClientConnectionEventHandler = function(controller) {
  this.controller = controller;
};
$hxClasses["com.inq.flash.client.control.ClientConnectionEventHandler"] = com.inq.flash.client.control.ClientConnectionEventHandler;
com.inq.flash.client.control.ClientConnectionEventHandler.__name__ = ["com", "inq", "flash", "client", "control", "ClientConnectionEventHandler"];
com.inq.flash.client.control.ClientConnectionEventHandler.prototype.allConnectionAttemptsFailed = function() {
};
com.inq.flash.client.control.ClientConnectionEventHandler.prototype.connectionSuccessful = function() {
  haxe.Log.trace("enter", {fileName:"ClientConnectionEventHandler.hx", lineNumber:25, className:"com.inq.flash.client.control.ClientConnectionEventHandler", methodName:"connectionSuccessful"});
  this.controller.connectionEstablished();
  haxe.Log.trace("exit", {fileName:"ClientConnectionEventHandler.hx", lineNumber:27, className:"com.inq.flash.client.control.ClientConnectionEventHandler", methodName:"connectionSuccessful"});
};
com.inq.flash.client.control.ClientConnectionEventHandler.prototype.connectionClosedNeedRetryRequest = function() {
  return this.connectionFailedNeedRetryRequest(3, 3);
};
com.inq.flash.client.control.ClientConnectionEventHandler.prototype.connectionFailedNeedRetryRequest = function(connectionRetryAttempts, maxConnectionRetries) {
  this.controller.connectionLost();
  if (this.controller.shouldBeDisconnected()) {
    return false;
  }
  return true;
};
com.inq.flash.client.control.ClientConnectionEventHandler.prototype.controller = null;
com.inq.flash.client.control.ClientConnectionEventHandler.prototype.__class__ = com.inq.flash.client.control.ClientConnectionEventHandler;
com.inq.flash.client.control.ClientConnectionEventHandler.__interfaces__ = [com.inq.flash.messagingframework.connectionhandling.ApplicationConnectionEventHandler];
com.inq.flash.client.control.FlashVars = function() {
};
$hxClasses["com.inq.flash.client.control.FlashVars"] = com.inq.flash.client.control.FlashVars;
com.inq.flash.client.control.FlashVars.__name__ = ["com", "inq", "flash", "client", "control", "FlashVars"];
com.inq.flash.client.control.FlashVars._flashVars = null;
com.inq.flash.client.control.FlashVars.flashVars = null;
com.inq.flash.client.control.FlashVars.getFlashVars = function() {
  if (null == com.inq.flash.client.control.FlashVars._flashVars) {
    com.inq.flash.client.control.FlashVars.setApplicationParameters();
  }
  return com.inq.flash.client.control.FlashVars._flashVars;
};
com.inq.flash.client.control.FlashVars.inHOP = null;
com.inq.flash.client.control.FlashVars.agentsAvailable = null;
com.inq.flash.client.control.FlashVars.persistentFrame = null;
com.inq.flash.client.control.FlashVars.msgCnt = null;
com.inq.flash.client.control.FlashVars.chatID = null;
com.inq.flash.client.control.FlashVars.clickStream = null;
com.inq.flash.client.control.FlashVars.submitURL = null;
com.inq.flash.client.control.FlashVars.shutdownPopup = null;
com.inq.flash.client.control.FlashVars.continued = null;
com.inq.flash.client.control.FlashVars.tagServerBaseURL = null;
com.inq.flash.client.control.FlashVars.openerID = null;
com.inq.flash.client.control.FlashVars.agentName = null;
com.inq.flash.client.control.FlashVars.openerDelay = null;
com.inq.flash.client.control.FlashVars.newFramework = null;
com.inq.flash.client.control.FlashVars.theEngagementType = null;
com.inq.flash.client.control.FlashVars.userAgent = null;
com.inq.flash.client.control.FlashVars._init = function() {
  com.inq.flash.client.control.FlashVars._flashVars = null;
  return true;
};
com.inq.flash.client.control.FlashVars.getValue = function(keyName) {
  return com.inq.flash.client.control.FlashVars.getFlashVars()[keyName];
};
com.inq.flash.client.control.FlashVars.setValue = function(keyName, vl) {
  com.inq.flash.client.control.FlashVars.getFlashVars()[keyName] = vl;
};
com.inq.flash.client.control.FlashVars.setAgentName = function(valu) {
  if (valu == null || valu == "null" || StringTools.trim(valu) == "") {
    valu = "Jessica";
  }
  com.inq.flash.client.control.FlashVars.getFlashVars()["agentName"] = valu;
};
com.inq.flash.client.control.FlashVars.setPersistentFrame = function(val) {
  com.inq.flash.client.control.FlashVars.setValue("PersistentFrame", val);
};
com.inq.flash.client.control.FlashVars.getUserAgent = function() {
  return com.inq.flash.client.control.FlashVars.getValue("userAgent");
};
com.inq.flash.client.control.FlashVars.getPersistentFrame = function() {
  return com.inq.flash.client.control.FlashVars.getValue("PersistentFrame");
};
com.inq.flash.client.control.FlashVars.getChatID = function() {
  try {
    return com.inq.flash.client.control.FlashVars.getValue("chatID");
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("FlashVars.getChatID ERROR: " + Std.string(e), {fileName:"FlashVars.hx", lineNumber:73, className:"com.inq.flash.client.control.FlashVars", methodName:"getChatID"});
      return null;
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.control.FlashVars.getClickStream = function() {
  var datum = com.inq.flash.client.control.FlashVars.getValue("clickStream");
  return datum;
};
com.inq.flash.client.control.FlashVars.getSubmitURL = function() {
  return com.inq.flash.client.control.FlashVars.getValue("submitURL");
};
com.inq.flash.client.control.FlashVars.getShutdownPopup = function() {
  return com.inq.flash.client.control.FlashVars.getValue("shutdownPopup");
};
com.inq.flash.client.control.FlashVars.isContinued = function() {
  return Std.parseInt("" + Std.string(com.inq.flash.client.control.FlashVars.getValue("continued"))) == 1;
};
com.inq.flash.client.control.FlashVars.getTagServerBaseURL = function() {
  return com.inq.flash.client.control.FlashVars.getValue("tagServerBaseURL");
};
com.inq.flash.client.control.FlashVars.getOpenerID = function() {
  return com.inq.flash.client.control.FlashVars.getValue("openerID");
};
com.inq.flash.client.control.FlashVars.getAgentName = function() {
  return com.inq.flash.client.control.FlashVars.getValue("agentName");
};
com.inq.flash.client.control.FlashVars.getCustomerName = function() {
  if (com.inq.flash.client.control.FlashVars.customerName == null) {
    var customerDisplayName = com.inq.flash.client.control.PersistenceManager.GetValue("ci_cdn", null);
    if (customerDisplayName == null || customerDisplayName == "") {
      customerDisplayName = com.inq.flash.client.control.FlashVars.getValue("userName");
    }
    com.inq.flash.client.control.FlashVars.setCustomerName(customerDisplayName);
  }
  return com.inq.flash.client.control.FlashVars.customerName;
};
com.inq.flash.client.control.FlashVars.setCustomerName = function(customerName, saveCookie) {
  com.inq.flash.client.control.FlashVars.customerName = customerName;
  com.inq.flash.client.data.Chat.prototype.setUsername(customerName);
  com.inq.flash.client.control.FlashVars.setValue("userName", customerName);
  if (saveCookie == true) {
    com.inq.flash.client.control.PersistenceManager.SetValue("ci_cdn", customerName);
  }
};
com.inq.flash.client.control.FlashVars.getOpenerDelay = function() {
  return com.inq.flash.client.control.FlashVars.getValue("openerDelay");
};
com.inq.flash.client.control.FlashVars.getNewFramework = function() {
  return com.inq.flash.client.control.FlashVars.getValue("newFramework");
};
com.inq.flash.client.control.FlashVars.getTheEngagementType = function() {
  return com.inq.flash.client.control.FlashVars.getValue("theEngagementType");
};
com.inq.flash.client.control.FlashVars.setTheEngagementType = function(valu) {
  com.inq.flash.client.control.FlashVars.setValue("theEngagementType", valu);
};
com.inq.flash.client.control.FlashVars.getInHOP = function() {
  return Std.parseInt("" + Std.string(com.inq.flash.client.control.FlashVars.getValue("inHOP"))) == 1;
};
com.inq.flash.client.control.FlashVars.getAgentsAvailable = function() {
  return Std.parseInt("" + Std.string(com.inq.flash.client.control.FlashVars.getValue("agAvail"))) == 1;
};
com.inq.flash.client.control.FlashVars.setApplicationParameters = function() {
  com.inq.flash.client.control.FlashVars._flashVars = new com.inq.utils.Dictionary;
  var keyz = Reflect.fields(Application.application.parameters);
  haxe.Log.trace("MainApplication.parameters=" + Std.string(Application.application.parameters), {fileName:"FlashVars.hx", lineNumber:100, className:"com.inq.flash.client.control.FlashVars", methodName:"setApplicationParameters"});
  if (null == Application.application.parameters) {
    haxe.Log.trace("ERROR: no parameters", {fileName:"FlashVars.hx", lineNumber:102, className:"com.inq.flash.client.control.FlashVars", methodName:"setApplicationParameters"});
  }
  var _g1 = 0, _g = keyz.length;
  while (_g1 < _g) {
    var s = _g1++;
    var keyname = keyz[s];
    var datum = Application.application.parameters[keyname];
    try {
      com.inq.flash.client.control.FlashVars.setValue(keyname, datum);
      haxe.Log.trace("FlashVars.hx: setApplicationParameters: " + keyname + " = " + datum, {fileName:"FlashVars.hx", lineNumber:111, className:"com.inq.flash.client.control.FlashVars", methodName:"setApplicationParameters"});
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
        haxe.Log.trace("FlashVars.hx: setApplicationparameters: Error" + Std.string(e), {fileName:"FlashVars.hx", lineNumber:113, className:"com.inq.flash.client.control.FlashVars", methodName:"setApplicationParameters"});
      } else {
        throw e;
      }
    }
  }
  com.inq.flash.client.control.FlashVars.setupFlashVar("theEngagementType", "0");
  com.inq.flash.client.control.FlashVars.setupFlashVar("chatID", "-1");
  com.inq.flash.client.control.FlashVars.setupFlashVar("continued", "0");
  com.inq.flash.client.control.PersistenceManager.SetValue("c", 1);
  com.inq.flash.client.control.FlashVars.setupFlashVar("iframeURL", "http://sb3.conversive.com/gui_gamefly/chat.html");
  com.inq.flash.client.control.FlashVars.setupFlashVar("customerID", "155454046669915704");
  com.inq.flash.client.control.FlashVars.setupFlashVar("agentName", "Jessica");
  com.inq.flash.client.control.FlashVars.setupFlashVar("newFramework", "1");
  com.inq.flash.client.control.FlashVars.setupFlashVar("shutdownPopup", "false");
  com.inq.flash.client.control.FlashVars.setupFlashVar("PersistentFrame", "0");
  com.inq.flash.client.control.FlashVars.setupFlashVar("userName", "Visitor");
  com.inq.flash.client.control.FlashVars.setupFlashVar("crHost", "chatrouterv3.inq.com");
  com.inq.flash.client.control.FlashVars.setupFlashVar("crPort", "8080");
  com.inq.flash.client.control.FlashVars.setupFlashVar("openerID", "6630");
  com.inq.flash.client.control.FlashVars.setupFlashVar("delay", "0");
  com.inq.flash.client.control.FlashVars.setupFlashVar("submitURL", "chatrouterv3.inq.com");
  com.inq.flash.client.control.FlashVars.setupFlashVar("commTypes", com.inq.flash.messagingframework.FlashMessagingFramework.CONNECTION_TYPE_HTTP);
  com.inq.flash.client.control.FlashVars.setupFlashVar("theEngagementType", "0");
  com.inq.flash.client.control.FlashVars.setupFlashVar("clickStream", "");
  com.inq.flash.client.control.FlashVars.setValue("shutdownPopup", com.inq.flash.client.control.FlashVars.getValue("shutdownPopup") == "true");
  com.inq.flash.client.control.FlashVars.setValue("PersistentFrame", com.inq.flash.client.control.FlashVars.getValue("PersistentFrame") != "0");
  com.inq.flash.client.control.FlashVars.setupFlashVar("openerDelay", "6");
  com.inq.flash.client.control.FlashVars.setupFlashVar("msgCnt", "-1");
  com.inq.flash.client.control.FlashVars.setupFlashVar("tagServerBaseURL", "//tagserverv3.inq.com");
  com.inq.flash.client.control.FlashVars.setupFlashVar("inHOP", "1");
  com.inq.flash.client.control.FlashVars.setupFlashVar("agAvail", "1");
  var sTagServer = com.inq.flash.client.control.FlashVars.getValue("tagServerBaseURL");
  if (HxOverrides.substr(sTagServer, 0, 4).toUpperCase() != "HTTP" && HxOverrides.substr(sTagServer, 0, 2) != "//") {
    sTagServer = window.location.protocol + "//" + sTagServer;
    com.inq.flash.client.control.FlashVars.setValue("tagServerBaseURL", sTagServer);
  }
  if (sTagServer.split("//")[0].toUpperCase() != ("" + window.location.protocol).toUpperCase()) {
    var parts = sTagServer.split("//");
    parts[0] = window.location.protocol;
    sTagServer = parts.join("//");
  }
  if (HxOverrides.substr(sTagServer, sTagServer.length - 1, null) != "/") {
    sTagServer += "/";
    com.inq.flash.client.control.FlashVars.setValue("tagServerBaseURL", sTagServer);
  }
  com.inq.flash.client.control.FlashVars.setValue("msgCnt", Std.parseInt("" + Std.string(com.inq.flash.client.control.FlashVars.getValue("msgCnt"))));
  com.inq.flash.client.control.FlashVars.setValue("crPort", Std.parseInt("" + Std.string(com.inq.flash.client.control.FlashVars.getValue("crPort"))));
  com.inq.flash.client.control.FlashVars.setValue("theEngagementType", Std.parseInt("" + Std.string(com.inq.flash.client.control.FlashVars.getValue("theEngagementType"))));
  var sF = "\n";
  var keyz1 = Reflect.fields(com.inq.flash.client.control.FlashVars._flashVars);
  var _g1 = 0, _g = keyz1.length;
  while (_g1 < _g) {
    var i = _g1++;
    var elmt = keyz1[i];
    var el = "" + elmt;
    var val = com.inq.flash.client.control.FlashVars._flashVars[elmt];
    var typ = " ";
    typ = typ.charAt(0).toUpperCase() + HxOverrides.substr(typ, 1, null);
    if ("String" == typ) {
      val = '"' + Std.string(val) + '"';
    }
    sF += "FlashVars.flashVars." + elmt + ":" + typ + "=" + Std.string(val) + ";\n";
  }
  haxe.Log.trace(sF, {fileName:"FlashVars.hx", lineNumber:188, className:"com.inq.flash.client.control.FlashVars", methodName:"setApplicationParameters"});
  com.inq.flash.client.chatskins.SkinControl.fireMxmlHandler("onParsedFlashVars");
  return com.inq.flash.client.control.FlashVars._flashVars;
};
com.inq.flash.client.control.FlashVars.getMsgCnt = function() {
  return com.inq.flash.client.control.FlashVars.getValue("msgCnt");
};
com.inq.flash.client.control.FlashVars.setupFlashVar = function(name, defValue) {
  try {
    var _datum = null;
    try {
      _datum = com.inq.flash.client.control.FlashVars.getValue(name);
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
        _datum = null;
      } else {
        throw e;
      }
    }
    if (_datum == null) {
      com.inq.flash.client.control.FlashVars.setValue(name, defValue);
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("FlashVars.setupFlashVars: ERROR: " + Std.string(e), {fileName:"FlashVars.hx", lineNumber:213, className:"com.inq.flash.client.control.FlashVars", methodName:"setupFlashVar"});
      com.inq.flash.client.control.FlashVars.setValue(name, defValue);
    } else {
      throw e;
    }
  }
};
com.inq.flash.client.control.FlashVars.get = function(key) {
  com.inq.flash.client.control.FlashVars.getFlashVars();
  return com.inq.flash.client.control.FlashVars._flashVars[key];
};
com.inq.flash.client.control.FlashVars.prototype.__class__ = com.inq.flash.client.control.FlashVars;
com.inq.flash.client.control.FlashVars.__init = com.inq.flash.client.control.FlashVars._init();
com.inq.flash.client.control.FlashVars.customerName = null;
com.inq.flash.client.control.Incrementality = function() {
};
$hxClasses["com.inq.flash.client.control.Incrementality"] = com.inq.flash.client.control.Incrementality;
com.inq.flash.client.control.Incrementality.__name__ = ["com", "inq", "flash", "client", "control", "Incrementality"];
com.inq.flash.client.control.Incrementality.interacted = null;
com.inq.flash.client.control.Incrementality.init = function() {
  com.inq.flash.client.control.Incrementality.interacted = com.inq.flash.client.control.PersistenceManager.GetValue("ai", false);
  return true;
};
com.inq.flash.client.control.Incrementality.onEngaged = function() {
  com.inq.flash.client.chatskins.SkinControl.StopTimer();
  if (com.inq.flash.client.control.FlashVars.getFlashVars().PersistentFrame) {
    return;
  }
  if (com.inq.flash.client.control.FlashVars.getFlashVars().brID == "") {
    return;
  }
  com.inq.flash.client.control.FlashPeer.onEngaged({brID:com.inq.flash.client.control.FlashVars.getFlashVars().brID});
  com.inq.flash.client.chatskins.SkinControl.fireMxmlHandler("onEngaged");
  haxe.Log.trace("Incrementality.onEngaged", {fileName:"Incrementality.hx", lineNumber:28, className:"com.inq.flash.client.control.Incrementality", methodName:"onEngaged"});
};
com.inq.flash.client.control.Incrementality.onInteracted = function() {
  try {
    var bInteracted = false;
    try {
      bInteracted = com.inq.flash.client.control.Incrementality.interacted;
    } catch (e) {
    }
    if (bInteracted) {
      return;
    }
    com.inq.flash.client.control.Incrementality.interacted = true;
    com.inq.flash.client.control.PersistenceManager.SetValue("ai", com.inq.flash.client.control.Incrementality.interacted);
    if (com.inq.flash.client.control.FlashVars.getFlashVars().PersistentFrame && !(com.inq.flash.client.chatskins.SkinControl.isClick2call() || com.inq.flash.client.control.FlashPeer.isV3C2CPersistent())) {
      return;
    }
    if (com.inq.flash.client.control.FlashVars.getFlashVars().brID == "") {
      return;
    }
    com.inq.flash.client.control.FlashPeer.onInteracted({brID:com.inq.flash.client.control.FlashVars.getFlashVars().brID});
    com.inq.flash.client.chatskins.SkinControl.fireMxmlHandler("onInteracted");
    haxe.Log.trace("onInteracted", {fileName:"Incrementality.hx", lineNumber:50, className:"com.inq.flash.client.control.Incrementality", methodName:"onInteracted"});
  } catch (e) {
    haxe.Log.trace("onInteracted failed: " + Std.string(e), {fileName:"Incrementality.hx", lineNumber:52, className:"com.inq.flash.client.control.Incrementality", methodName:"onInteracted"});
  }
};
com.inq.flash.client.control.Incrementality.onAgentMsg = function() {
  if (com.inq.flash.client.control.FlashVars.getFlashVars().brID == "") {
    return;
  }
  com.inq.flash.client.control.FlashPeer.onAgentMsg({brID:com.inq.flash.client.control.FlashVars.getFlashVars().brID});
  com.inq.flash.client.chatskins.SkinControl.fireMxmlHandler("onAgentMsg");
  haxe.Log.trace("onAgentMsg", {fileName:"Incrementality.hx", lineNumber:63, className:"com.inq.flash.client.control.Incrementality", methodName:"onAgentMsg"});
};
com.inq.flash.client.control.Incrementality.onCustomerMsg = function(chatData) {
  if (com.inq.flash.client.control.FlashVars.getFlashVars().brID == "") {
    return;
  }
  var eventData = {textLine:chatData == null ? "" : chatData};
  com.inq.flash.client.control.FlashPeer.onCustomerMsg(eventData);
  com.inq.flash.client.chatskins.SkinControl.fireMxmlHandler("onCustomerMsg");
  haxe.Log.trace("onCustomerMsg", {fileName:"Incrementality.hx", lineNumber:75, className:"com.inq.flash.client.control.Incrementality", methodName:"onCustomerMsg"});
};
com.inq.flash.client.control.Incrementality.onAssisted = function() {
  if (com.inq.flash.client.control.FlashVars.getFlashVars().brID == "") {
    return;
  }
  com.inq.flash.client.control.FlashPeer.onAssisted({brID:com.inq.flash.client.control.FlashVars.getFlashVars().brID});
  com.inq.flash.client.chatskins.SkinControl.fireMxmlHandler("onAssisted");
  haxe.Log.trace("onAssisted", {fileName:"Incrementality.hx", lineNumber:85, className:"com.inq.flash.client.control.Incrementality", methodName:"onAssisted"});
};
com.inq.flash.client.control.Incrementality.prototype.__class__ = com.inq.flash.client.control.Incrementality;
com.inq.flash.client.control.MinimizeManager = function() {
};
$hxClasses.registerClass(com.inq.flash.client.control.MinimizeManager, "com.inq.flash.client.control.MinimizeManager");
com.inq.flash.client.control.MinimizeManager.count = null;
com.inq.flash.client.control.MinimizeManager.minimized = null;
com.inq.flash.client.control.MinimizeManager.onClose = function() {
  if ((com.inq.flash.client.control.PersistenceManager.GetValue("rm", com.inq.flash.client.control.MinimizeManager.count) == com.inq.flash.client.control.MinimizeManager.IS_MINIMIZED || com.inq.flash.client.control.MinimizeManager.btnRestore == null) && com.inq.flash.client.control.MinimizeManager.minimized) {
    var tY = com.inq.flash.client.control.FlashPeer.isThankYouEnabled();
    if (!tY) {
      com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChat(null);
      return;
    }
    com.inq.flash.client.control.MinimizeManager.Restore();
  }
  com.inq.flash.client.control.MinimizeManager.Restore();
};
com.inq.flash.client.control.MinimizeManager.lastAgentMessage = function(agentMsg) {
  if (agentMsg != null && agentMsg.length > 0 && com.inq.flash.client.control.MinimizeManager.isMinimized()) {
    com.inq.flash.client.control.MinimizeManager.count++;
    com.inq.flash.client.control.PersistenceManager.SetValue("mc", com.inq.flash.client.control.MinimizeManager.count);
    com.inq.flash.client.control.MinimizeManager.displayAgentMessageAndCount(agentMsg);
  }
  if (com.inq.flash.client.control.PersistenceManager.GetValue("rm", com.inq.flash.client.control.MinimizeManager.count) == com.inq.flash.client.control.MinimizeManager.IS_MINIMIZED || com.inq.flash.client.control.MinimizeManager.btnRestore == null) {
    com.inq.flash.client.control.MinimizeManager.Restore();
  }
};
com.inq.flash.client.control.MinimizeManager.showCloseButton = function() {
  var btnClose = Application.application.getButton("btnCloseChat");
  if (btnClose != null) {
    btnClose.setVisible(true);
    if (null != com.inq.flash.client.control.MinimizeManager.btnReallyMinimized) {
      com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.setVisible(false);
    }
    if (null != com.inq.flash.client.control.MinimizeManager.btnMinimize) {
      com.inq.flash.client.control.MinimizeManager.btnMinimize.setVisible(false);
      com.inq.flash.client.control.MinimizeManager.btnMinimize = null;
    }
  }
};
com.inq.flash.client.control.MinimizeManager.displayAgentMessageAndCount = function(agentMsg) {
  if (agentMsg != null && agentMsg.length > 0 && com.inq.flash.client.control.MinimizeManager.isMinimized() && com.inq.flash.client.control.MinimizeManager.count > 0) {
    if (com.inq.flash.client.control.MinimizeManager.agentMsgCounter != null) {
      com.inq.flash.client.control.MinimizeManager.agentMsgCounter._setText("" + com.inq.flash.client.control.MinimizeManager.count);
      if (!com.inq.flash.client.control.MinimizeManager.agentMsgCounter._visible) {
        if (com.inq.utils.Capabilities.isAndroid()) {
          com.inq.flash.client.control.MinimizeManager.agentMsgCounter._div.style.opacity = 1;
        }
        com.inq.flash.client.control.MinimizeManager.agentMsgCounter.setVisible(true);
      }
    }
    if (com.inq.flash.client.control.MinimizeManager.agentText != null) {
      com.inq.flash.client.control.MinimizeManager.agentText._setText(agentMsg);
      if (!com.inq.flash.client.control.MinimizeManager.agentText._visible) {
        com.inq.flash.client.control.MinimizeManager.agentText.setVisible(true);
      }
    }
  }
};
com.inq.flash.client.control.MinimizeManager.displaySmallScreenMsg = function() {
  if (com.inq.utils.Capabilities.isPhone()) {
    var landscape = "orientation" in window ? !(window.parent.orientation == 0 || window.parent.orientation == 180) : false;
    if (com.inq.utils.Capabilities.isChrome()) {
      var bver = parseInt(window.navigator.appVersion.match(/Chrome\/(\d+)\./)[1], 10);
      var tpwin = window.top;
      if (isNaN(bver) || bver >= 33 && bver <= 35) {
        landscape = tpwin.outerWidth > tpwin.outerHeight;
      } else {
        if (bver >= 36) {
          landscape = tpwin.screen.width > tpwin.screen.height;
        }
      }
    }
    com.inq.flash.client.control.MinimizeManager.onoffSmallScreenWarning(landscape && com.inq.flash.client.control.MinimizeManager.minimized == false);
  }
};
com.inq.flash.client.control.MinimizeManager.onoffSmallScreenWarning = function(isOn) {
  var can = Application.application.getCanvas("smallScreenMsg");
  if (can != null) {
    can.setVisible(isOn);
    if (isOn) {
      var timer = new com.inq.utils.Timer(70 * "home button to the right".length + 3E3);
      com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", "", com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, true);
      timer.run = function() {
        com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", "For better chat experience, please use portrait mode", com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, true);
        timer.stop();
      };
    }
  }
};
com.inq.flash.client.control.MinimizeManager.initButtonVisibility = function() {
  if (!com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
    if (com.inq.flash.client.control.MinimizeManager.btnReallyMinimized != null && com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.getStyle("neverShow") != null && com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.getStyle("neverShow") == "true" && com.inq.flash.client.control.PersistenceManager.GetValue("rm", com.inq.flash.client.control.MinimizeManager.count) == com.inq.flash.client.control.MinimizeManager.SHOW_FAKE_MINIMIZE) {
      if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnCloseChat")) {
        var btnClose = Application.application.getButton("btnCloseChat");
        btnClose.setVisible(true);
      }
      com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.setVisible(false);
    } else {
      if (com.inq.flash.client.control.MinimizeManager.btnReallyMinimized != null && com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.getStyle("neverShow") != null && com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.getStyle("neverShow") == "false" && com.inq.flash.client.control.PersistenceManager.GetValue("rm", com.inq.flash.client.control.MinimizeManager.count) == com.inq.flash.client.control.MinimizeManager.SHOW_FAKE_MINIMIZE) {
        com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.setVisible(true);
      }
    }
    if (com.inq.flash.client.control.MinimizeManager.btnReallyMinimized != null && com.inq.flash.client.control.PersistenceManager.GetValue("rm", com.inq.flash.client.control.MinimizeManager.count) != com.inq.flash.client.control.MinimizeManager.SHOW_FAKE_MINIMIZE) {
      if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnCloseChat")) {
        var btnClose = Application.application.getButton("btnCloseChat");
        btnClose.setVisible(false);
      }
    } else {
      var btnClose = Application.application.getButton("btnCloseChat");
      if (btnClose) {
        btnClose.setVisible(true);
      }
    }
  } else {
    if (null != com.inq.flash.client.control.MinimizeManager.btnReallyMinimized) {
      com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.setVisible(false);
    } else {
      if (null != com.inq.flash.client.control.MinimizeManager.btnMinimize) {
        com.inq.flash.client.control.MinimizeManager.btnMinimize.setVisible(false);
      }
    }
  }
};
com.inq.flash.client.control.MinimizeManager.attachButtonHandlers = function() {
  var clientWin = window.parent;
  if (com.inq.flash.client.control.MinimizeManager.btnMinimize != null) {
    com.inq.flash.client.control.MinimizeManager.btnMinimize.addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.control.MinimizeManager.actionMinimize);
  }
  if (com.inq.flash.client.control.MinimizeManager.btnRestore != null) {
    com.inq.flash.client.control.MinimizeManager.btnRestore.addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.control.MinimizeManager.actionRestore);
  }
  if (!com.inq.utils.Capabilities.isAndroid()) {
    com.inq.utils.Capabilities.BindListener(clientWin, "scroll", com.inq.flash.client.control.MinimizeManager.floatMinimized);
    com.inq.utils.Capabilities.BindListener(clientWin, "resize", com.inq.flash.client.control.MinimizeManager.floatMinimized);
    com.inq.utils.Capabilities.BindListener(clientWin, "orientationchange", com.inq.flash.client.control.MinimizeManager.floatMinimized);
  }
  if (com.inq.flash.client.control.MinimizeManager.btnReallyMinimized != null) {
    com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.addEventListener(com.inq.events.MouseEvent.CLICK, com.inq.flash.client.control.MinimizeManager.actionReallyMinimize);
  }
  if (com.inq.utils.Capabilities.isIphone()) {
    com.inq.flash.client.control.MinimizeManager.bindHandlerForClientInputFieldsIos();
  }
};
com.inq.flash.client.control.MinimizeManager.restoreState = function() {
  var _minimizedState = com.inq.flash.client.control.PersistenceManager.GetValue("mc", com.inq.flash.client.control.MinimizeManager.NOT_MINIMIZED);
  var isInitiate = true;
  if (com.inq.flash.client.control.MinimizeManager.NOT_MINIMIZED != _minimizedState) {
    com.inq.flash.client.control.MinimizeManager.count = _minimizedState;
    com.inq.flash.client.control.MinimizeManager.actionMinimize(null, isInitiate);
  } else {
    if (com.inq.flash.client.control.PersistenceManager.GetValue("rm", com.inq.flash.client.control.MinimizeManager.count) == com.inq.flash.client.control.MinimizeManager.IS_MINIMIZED) {
      com.inq.flash.client.control.MinimizeManager.actionReallyMinimize(null, isInitiate);
    } else {
      com.inq.flash.client.control.MinimizeManager.actionRestore();
    }
  }
};
com.inq.flash.client.control.MinimizeManager.init = function() {
  if (!com.inq.flash.client.control.FlashPeer.getIsSkinLocal()) {
    if (com.inq.utils.Capabilities.isPhone() && com.inq.flash.client.chatskins.SkinControl.isInApplication("smallScreenMsg")) {
      com.inq.flash.client.control.MinimizeManager.displaySmallScreenMsg();
      com.inq.flash.client.control.MinimizeManager.displaySmallScreenMsgFnPoint = com.inq.flash.client.control.MinimizeManager.displaySmallScreenMsg;
      com.inq.utils.Capabilities.BindListener(window.parent, "orientationchange", com.inq.flash.client.control.MinimizeManager.displaySmallScreenMsgFnPoint);
    }
  }
  com.inq.flash.client.control.MinimizeManager.count = 0;
  com.inq.flash.client.control.MinimizeManager.minimized = false;
  com.inq.flash.client.control.MinimizeManager.elMinimized = Application.application.getMxmlItem("Minimized");
  com.inq.flash.client.control.MinimizeManager.btnRestore = Application.application.getButton("btnRestore");
  com.inq.flash.client.control.MinimizeManager.btnMinimize = Application.application.getButton("btnMinimize");
  com.inq.flash.client.control.MinimizeManager.btnReallyMinimized = Application.application.getButton("btnReallyMinimized");
  com.inq.flash.client.control.MinimizeManager.agentMsgCounter = Application.application.getMxmlItem("agentMsgCounter");
  com.inq.flash.client.control.MinimizeManager.agentText = Application.application.getMxmlItem("agentText");
  com.inq.flash.client.control.MinimizeManager.ariaMegMini = Application.application.getMxmlItem("tc-aria-readme-mini");
  if (com.inq.flash.client.control.MinimizeManager.btnReallyMinimized != null && com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.getStyle("floatRight") != null && com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.getStyle("right") != null) {
    com.inq.flash.client.control.MinimizeManager.movedMinimize = Std.parseInt(com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.getStyle("floatRight")) + Std.parseInt(com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.getStyle("right"));
  }
  com.inq.flash.client.control.MinimizeManager.turnOffScaling(true);
  com.inq.flash.client.control.MinimizeManager.attachButtonHandlers();
  com.inq.flash.client.control.MinimizeManager.restoreState();
  com.inq.flash.client.control.MinimizeManager.initButtonVisibility();
};
com.inq.flash.client.control.MinimizeManager.turnOffScaling = function(state) {
  if (state == null) {
    state = true;
  }
  if (com.inq.utils.Capabilities.isMobile()) {
    try {
      var head = window.parent.document.getElementsByTagName("HEAD")[0];
      var tmpDiv = window.parent.document.createElement("DIV");
      tmpDiv.innerHTML = state ? '<meta name="' + "tcChat_viewport" + '" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=0" />' : '<meta name="' + "tcChat_viewport" + '" content="width=device-width, initial-scale=1, maximum-scale=10.0, minimum-scale=1, user-scalable=1" />';
    } catch (e) {
      haxe.Log.trace("Error: " + Std.string(e), {fileName:"MinimizeManager.hx", lineNumber:248, className:"com.inq.flash.client.control.MinimizeManager", methodName:"turnOffScaling", customParams:[e]});
    }
  }
};
com.inq.flash.client.control.MinimizeManager.removeScalingMeta = function() {
  var meta = window.parent.document.getElementById("tcChat_viewport");
  if (meta) {
    meta.parentNode.removeChild(meta);
  }
};
com.inq.flash.client.control.MinimizeManager.Close = function() {
  if (com.inq.flash.client.control.MinimizeManager.displaySmallScreenMsgFnPoint != null) {
    com.inq.utils.Capabilities.UnbindListener(window.parent, "orientationchange", com.inq.flash.client.control.MinimizeManager.displaySmallScreenMsgFnPoint);
    com.inq.flash.client.control.MinimizeManager.displaySmallScreenMsgFnPoint = null;
  }
  if (!com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
    com.inq.flash.client.control.MinimizeManager.btnReallyMinimized = null;
    com.inq.flash.client.control.MinimizeManager.btnRestore = null;
    com.inq.flash.client.control.MinimizeManager.btnMinimize = null;
  }
};
com.inq.flash.client.control.MinimizeManager.Restore = function() {
  try {
    if (com.inq.flash.client.control.MinimizeManager.minimized) {
      com.inq.flash.client.control.MinimizeManager.actionRestore();
    }
  } catch (e) {
    haxe.Log.trace("Error: " + Std.string(e), {fileName:"MinimizeManager.hx", lineNumber:295, className:"com.inq.flash.client.control.MinimizeManager", methodName:"Restore"});
  }
};
com.inq.flash.client.control.MinimizeManager.actionReallyMinimize = function(me) {
  if (com.inq.flash.client.control.PersistenceManager.GetValue("msgcnt", 0) == 0) {
    com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChat(null);
  } else {
    if (!com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
      com.inq.flash.client.control.MinimizeManager.minimized = true;
      com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendMinimizedMessage();
      com.inq.flash.client.control.PersistenceManager.SetValue("rm", com.inq.flash.client.control.MinimizeManager.IS_MINIMIZED);
      com.inq.flash.client.control.FlashPeer.fireCustomEvent("ChatMinimized");
      if (com.inq.ui.Stage.getInstance() != null) {
        com.inq.ui.Stage.getInstance().setVisible(false);
      }
    }
  }
  return false;
};
com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn = null;
com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtnAdded = null;
com.inq.flash.client.control.MinimizeManager.dummyRestoreBtn = {add:function() {
  try {
    var btnRestore = top.document.getElementById("tcChat_btnRestore");
    com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn = btnRestore.cloneNode(true);
    var btnRestoreImg = top.document.getElementById("tcChat_btnRestore_img");
    btnRestoreImg.setAttribute("tabindex", "-1");
    btnRestoreImg.setAttribute("aria-hidden", "true");
    com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn.id = com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn.id + "_talkback";
    for (var xi = 0;xi < com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn.childElementCount;xi++) {
      com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn.children[xi].id = com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn.children[xi].id + "_talkback";
    }
    com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn.style.width = "100%";
    var btnDummyHome;
    var footers = top.document.getElementsByTagName("footer");
    if (footers.length > 0) {
      btnDummyHome = footers[0];
    } else {
      btnDummyHome = top.document.body;
    }
    btnDummyHome.appendChild(com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn);
    com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtnAdded = true;
  } catch (err) {
  }
}, show:function() {
  if (com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn != null) {
    try {
      com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn.style.display = "block";
      var btnRestoreImg = top.document.getElementById("tcChat_btnRestore_img");
      btnRestoreImg.setAttribute("tabindex", "-1");
      btnRestoreImg.setAttribute("aria-hidden", "true");
    } catch (err) {
    }
  }
}, hide:function() {
  if (com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn != null) {
    try {
      com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn.style.display = "none";
      var btnRestoreImg = top.document.getElementById("tcChat_btnRestore_img");
      btnRestoreImg.removeAttribute("tabindex");
      btnRestoreImg.removeAttribute("aria-hidden");
    } catch (err) {
    }
  }
}, remove:function() {
  if (com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn != null) {
    try {
      var btnRestoreImg = top.document.getElementById("tcChat_btnRestore_img");
      btnRestoreImg.removeAttribute("tabindex");
      btnRestoreImg.removeAttribute("aria-hidden");
      com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn.parentNode.removeChild(com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn);
      com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn = null;
      com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtnAdded = null;
    } catch (err) {
    }
  }
}};
com.inq.flash.client.control.MinimizeManager.actionMinimize = function(me, isInitiate) {
  if (!com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
    com.inq.flash.client.control.MinimizeManager.minimized = true;
    if (com.inq.utils.Capabilities.isIphone() && !(isInitiate === true)) {
      com.inq.flash.client.chatskins.ChatTextFocusMonitor.scrollToPrevious();
    }
    com.inq.flash.client.control.PersistenceManager.SetValue("mc", com.inq.flash.client.control.MinimizeManager.count);
    com.inq.flash.client.control.FlashPeer.fireCustomEvent("ChatMinimized");
    if (com.inq.flash.client.control.MinimizeManager.elMinimized != null) {
      com.inq.flash.client.control.MinimizeManager.elMinimized.setVisible(true);
      if (com.inq.utils.Capabilities.isAndroid() && com.inq.flash.client.control.MinimizeManager.agentMsgCounter != null) {
        com.inq.flash.client.control.MinimizeManager.agentMsgCounter._div.style.opacity = 0;
        com.inq.flash.client.control.MinimizeManager.agentMsgCounter._div.style.display = "";
      }
    }
    if (com.inq.ui.Stage.getInstance() != null) {
      if (!com.inq.utils.Capabilities.isPhone() || isInitiate === true) {
        com.inq.ui.Stage.getInstance().setVisible(false);
      }
    }
    if (!com.inq.utils.Capabilities.isAndroid()) {
      com.inq.flash.client.control.MinimizeManager.floatMinimized(me);
    }
    com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendMinimizedMessage();
    if (!com.inq.utils.Capabilities.isPhone()) {
      com.inq.flash.client.chatskins.ScrollMonitor.bindAll();
    }
    if (com.inq.flash.client.control.FlashPeer.getIsBuilder()) {
      com.inq.flash.client.control.MinimizeManager.agentText._setText("is there anything else I can help you with?");
      com.inq.flash.client.control.MinimizeManager.agentMsgCounter._setText(3);
      com.inq.flash.client.control.MinimizeManager.agentMsgCounter.setVisible(true);
      if (com.inq.flash.client.control.MinimizeManager.agentText) {
        com.inq.flash.client.control.MinimizeManager.agentText.setVisible(true);
      }
    }
  }
  if (com.inq.utils.Capabilities.isIphone()) {
    com.inq.flash.client.chatskins.ChatTextFocusMonitor.blurFocusedElement();
  }
  if (com.inq.flash.client.control.MinimizeManager.btnRestore != null) {
    if (com.inq.utils.Capabilities.isAndroid() && com.inq.utils.Capabilities.isTablet()) {
      var body = window.top.document.body;
      if (body.scrollWidth > window.top.innerWidth) {
        var minimized = Application.application.getMxmlItem("Minimized");
        var stl = minimized && minimized.styles;
        if (stl && stl["right"] && stl["bottom"]) {
          window.top.scroll(body.clientWidth - stl["right"], body.clientHeight - stl["bottom"]);
        } else {
          if (stl && stl["top"] && stl["left"]) {
            window.top.scroll(0 + stl["left"], 0 + stl["top"]);
          }
        }
      }
      com.inq.utils.Timer.delay(setRestoreFocus, 500);
    } else {
      if (com.inq.utils.Capabilities.isPhone()) {
        if (com.inq.utils.Util.getConfig("isTalkBackDummyRestoreBtnUsed", false) == true) {
          if (com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn == null) {
            com.inq.flash.client.control.MinimizeManager.dummyRestoreBtn.add();
          } else {
            com.inq.flash.client.control.MinimizeManager.dummyRestoreBtn.show();
          }
          window.setTimeout(function() {
            com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtn.getElementsByTagName("input")[0].focus();
            if (com.inq.utils.Capabilities.isPhone()) {
              com.inq.ui.Stage.getInstance().setVisible(false);
            }
          }, 500);
        } else {
          com.inq.utils.Timer.delay(setRestoreFocus, 700);
        }
      } else {
        com.inq.flash.client.control.MinimizeManager.btnRestore.setImageFocus();
      }
    }
    function setRestoreFocus() {
      com.inq.flash.client.control.MinimizeManager.btnRestore.setImageFocus();
      if (com.inq.utils.Capabilities.isPhone()) {
        com.inq.ui.Stage.getInstance().setVisible(false);
      }
    }
  }
  com.inq.flash.client.chatskins.SkinControl.hideModalWindowDivs(false);
  return false;
};
com.inq.flash.client.control.MinimizeManager.actionRestore = function(evt) {
  var isChatRestored = false;
  if (!com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
    if (/android/i.test(navigator.userAgent.toLowerCase())) {
      com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", " ", com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, true);
    }
    if (evt) {
      com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.isTouched = true;
    }
    com.inq.flash.client.chatskins.ChatTextFocusMonitor.saveWindowPositionForce();
    com.inq.flash.client.control.MinimizeManager.count = 0;
    com.inq.flash.client.control.MinimizeManager.minimized = false;
    if (com.inq.flash.client.control.MinimizeManager.agentMsgCounter != null) {
      com.inq.flash.client.control.MinimizeManager.agentMsgCounter.setVisible(false);
    }
    if (com.inq.flash.client.control.MinimizeManager.agentText != null) {
      com.inq.flash.client.control.MinimizeManager.agentText.setVisible(false);
    }
    if (com.inq.flash.client.control.PersistenceManager.GetValue("mc", com.inq.flash.client.control.MinimizeManager.NOT_MINIMIZED) != com.inq.flash.client.control.MinimizeManager.NOT_MINIMIZED) {
      com.inq.flash.client.chatskins.SkinControl.hideModalWindowDivs(true);
      isChatRestored = true;
    }
    com.inq.flash.client.control.PersistenceManager.SetValue("mc", com.inq.flash.client.control.MinimizeManager.NOT_MINIMIZED);
    com.inq.flash.client.control.FlashPeer.fireCustomEvent("ChatRestored");
    if (com.inq.flash.client.control.MinimizeManager.elMinimized != null) {
      com.inq.flash.client.control.MinimizeManager.elMinimized.setVisible(false);
    }
    if (com.inq.flash.client.control.MinimizeManager.talkBackDummyRestoreBtnAdded == true) {
      com.inq.flash.client.control.MinimizeManager.dummyRestoreBtn.hide();
    }
    if (com.inq.flash.client.control.MinimizeManager.btnReallyMinimized != null && com.inq.flash.client.control.PersistenceManager.GetValue("rm", com.inq.flash.client.control.MinimizeManager.count) == com.inq.flash.client.control.MinimizeManager.IS_MINIMIZED) {
      com.inq.flash.client.control.PersistenceManager.SetValue("rm", com.inq.flash.client.control.MinimizeManager.SHOW_FAKE_MINIMIZE);
    }
    if (com.inq.flash.client.chatskins.SkinControl.isInApplication("btnCloseChat")) {
      var btnClose = Application.application.getButton("btnCloseChat");
      btnClose.setVisible(true);
    }
    if (com.inq.flash.client.control.MinimizeManager.btnReallyMinimized != null && com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.getStyle("neverShow") == "false" && com.inq.flash.client.control.PersistenceManager.GetValue("rm", com.inq.flash.client.control.MinimizeManager.count) == com.inq.flash.client.control.MinimizeManager.SHOW_FAKE_MINIMIZE) {
      com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.setStyle("right", com.inq.flash.client.control.MinimizeManager.movedMinimize + "px");
    } else {
      if (com.inq.flash.client.control.MinimizeManager.btnReallyMinimized != null && com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.getStyle("neverShow") == "true" && com.inq.flash.client.control.PersistenceManager.GetValue("rm", com.inq.flash.client.control.MinimizeManager.count) == com.inq.flash.client.control.MinimizeManager.SHOW_FAKE_MINIMIZE) {
        com.inq.flash.client.control.MinimizeManager.btnReallyMinimized.setVisible(false);
      }
    }
    if (com.inq.ui.Stage.getInstance() != null) {
      com.inq.flash.client.chatskins.ScrollMonitor.moveChat();
      com.inq.ui.Stage.getInstance().setVisible(true);
      com.inq.flash.client.chatskins.SkinControl.setUpFocusAndSelection();
    }
    if (com.inq.utils.Capabilities.isPhone()) {
      Application.SetArea(com.inq.utils.Capabilities.getViewport());
      com.inq.stage.ViewportMgr.uponResize();
    } else {
      var skin = window.top.document.getElementById(com.inq.ui.Container.SC_SKIN);
      if (skin && skin.clientWidth === 0) {
        var timer = new com.inq.utils.Timer(25);
        timer.run = function() {
          if (skin.clientWidth !== 0) {
            Application.Resize();
            timer.stop();
          }
        };
      } else {
        Application.Resize();
      }
    }
    if (com.inq.ui.Stage.getInstance() != null) {
      com.inq.flash.client.chatskins.SkinControl.scrollTranscriptToEnd();
    }
    if (com.inq.flash.client.control.MinimizeManager.displaySmallScreenMsgFnPoint != null) {
      com.inq.flash.client.control.MinimizeManager.displaySmallScreenMsg();
    }
    com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendRestoredMessage();
    com.inq.flash.client.chatskins.ScrollMonitor.moveChat();
  }
  var txtInput = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
  if (txtInput != null) {
    if (com.inq.utils.Capabilities.isMobile()) {
      if (!com.inq.flash.client.chatskins.SkinControl.hideObscuredChatDiv()) {
        if (com.inq.utils.Capabilities.isIpad() && com.inq.flash.client.chatskins.SkinControl.accessibilityHelp.isAccessibilityHelpUsed) {
          window.setTimeout(function() {
            txtInput.setFocus();
          }, 1E3);
        } else {
          if (com.inq.utils.Capabilities.isIphone()) {
            if (com.inq.flash.client.chatskins.SkinControl.accessibilityHelp.isAccessibilityHelpUsed) {
              txtInput.setVisible(false);
              txtInput.setVisible(true);
              com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", " ", com.inq.flash.client.chatskins.ChatTextArea.SYSTEM);
              if (com.inq.flash.client.control.MinimizeManager.ariaMegMini) {
                com.inq.flash.client.control.MinimizeManager.ariaMegMini._div.innerHTML = "";
              }
              txtInput.setFocus(true);
            } else {
              if (isChatRestored && com.inq.flash.client.chatskins.ChatTextFocusMonitor.HasFocus()) {
                txtInput.setFocus(true);
              }
            }
          } else {
            if (isChatRestored || !com.inq.utils.Capabilities.isIpad()) {
              txtInput.setFocus();
            }
          }
        }
      }
    } else {
      if (com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat() && navigator.userAgent.indexOf("MSIE 8") != -1) {
        window.setTimeout(function() {
          window.document.body.focus();
          window.setTimeout(function() {
            txtInput.setFocus();
          });
        }, 500);
      }
    }
  }
  return false;
};
com.inq.flash.client.control.MinimizeManager.isMinimized = function() {
  return com.inq.flash.client.control.MinimizeManager.minimized === true || com.inq.flash.client.control.PersistenceManager.GetValue("mc", com.inq.flash.client.control.MinimizeManager.NOT_MINIMIZED) !== com.inq.flash.client.control.MinimizeManager.NOT_MINIMIZED;
};
com.inq.flash.client.control.MinimizeManager.floatMinimized = function(e) {
  if (com.inq.flash.client.control.MinimizeManager.isMinimized() && com.inq.utils.Capabilities.isMobile() && com.inq.flash.client.control.MinimizeManager.elMinimized != null) {
    if (com.inq.utils.Capabilities.isSafariVersion9() && com.inq.flash.client.control.MinimizeManager.elMinimized.getStyle("position") == "fixed") {
      e && e.stopPropagation && e.stopPropagation();
      return false;
    }
    if (com.inq.flash.client.control.MinimizeManager.elMinimized._div != null) {
      var left = null, right = null, top = null, bottom = null;
      var height = null, width = null;
      var l = 0, t = 0, h, w;
      left = com.inq.flash.client.control.MinimizeManager.elMinimized.getStyle("left");
      right = com.inq.flash.client.control.MinimizeManager.elMinimized.getStyle("right");
      top = com.inq.flash.client.control.MinimizeManager.elMinimized.getStyle("top");
      bottom = com.inq.flash.client.control.MinimizeManager.elMinimized.getStyle("bottom");
      height = com.inq.flash.client.control.MinimizeManager.elMinimized.getStyle("height");
      width = com.inq.flash.client.control.MinimizeManager.elMinimized.getStyle("width");
      var vp = com.inq.utils.Capabilities.getViewport();
      w = width == null ? com.inq.flash.client.control.MinimizeManager.elMinimized.getWidth() : com.inq.flash.client.control.MinimizeManager.elMinimized.evaluatePosition(width);
      h = height == null ? com.inq.flash.client.control.MinimizeManager.elMinimized.getHeight() : com.inq.flash.client.control.MinimizeManager.elMinimized.evaluatePosition(height);
      if (left == null && right != null) {
        l = vp.x + vp.w - w - com.inq.flash.client.control.MinimizeManager.elMinimized.evaluatePosition(right);
      } else {
        if (left != null && right == null) {
          l = vp.x + com.inq.flash.client.control.MinimizeManager.elMinimized.evaluatePosition(left);
        }
      }
      if (top == null && bottom != null) {
        t = vp.y + vp.h - h - com.inq.flash.client.control.MinimizeManager.elMinimized.evaluatePosition(bottom);
      } else {
        if (left != null && right == null) {
          t = vp.y + com.inq.flash.client.control.MinimizeManager.elMinimized.evaluatePosition(top);
        }
      }
      var divRestore = com.inq.flash.client.control.MinimizeManager.elMinimized._div;
      divRestore.style.position = "absolute";
      divRestore.style.left = l + "px";
      divRestore.style.top = t + "px";
      if (width) {
        divRestore.style.right = "auto";
      }
      if (com.inq.flash.client.control.MinimizeManager.btnRestore && com.inq.flash.client.control.MinimizeManager.btnRestore.styles.position == "fixed" && t == 0) {
        e && e.stopPropagation && e.stopPropagation();
        return false;
      }
      return true;
    } else {
      haxe.Log.trace("ERROR: elMinimized._div is null", {fileName:"MinimizeManager.hx", lineNumber:458, className:"com.inq.flash.client.control.MinimizeManager", methodName:"floatMinimized"});
    }
  }
  return false;
};
com.inq.flash.client.control.MinimizeManager.iosPositionMinimized = function() {
  try {
    var divRestore = null;
    var clientLayoutHeight = 0;
    var minimizeButtonHeight = 0;
    var orientation = null;
    var keyboardHeight = 0;
    var top = 0;
    var portrait = null;
    divRestore = window.top.document.getElementById("tcChat_Minimized");
    clientLayoutHeight = window.top.document.documentElement.clientHeight;
    var minimizeBackingObject = Application.application.getMxmlItem("Minimized");
    if (minimizeBackingObject) {
      minimizeButtonHeight = minimizeBackingObject.getHeight();
    }
    if (com.inq.utils.Capabilities.isIOSWebView() && divRestore) {
      com.inq.flash.client.control.MinimizeManager.iosPositionWebViewMinimized(divRestore, minimizeButtonHeight);
      return;
    }
    var portrait = com.inq.utils.Capabilities.getOrientation();
    orientation = portrait ? "portrait" : "landscape";
    switch(orientation) {
      case "landscape":
        keyboardHeight = com.inq.flash.client.control.MinimizeManager.SAFARI_KEYBOARD_HEIGHT_LANDSCAPE;
        top = (clientLayoutHeight - keyboardHeight) / 2;
        top = top + window.top.pageYOffset;
        break;
      case "portrait":
        keyboardHeight = com.inq.flash.client.control.MinimizeManager.SAFARI_KEYBOARD_HEIGHT_PORTRAIT;
        top = clientLayoutHeight - (keyboardHeight + minimizeButtonHeight);
        top = top + window.top.pageYOffset;
        break;
    }
    if (divRestore) {
      divRestore.style.position = "absolute";
      divRestore.style.top = top + "px";
      divRestore.style.left = window.top.pageXOffset + "px";
    } else {
      haxe.Log.trace("Error: geting minimize div", {fileName:"MinimizeManager.js", lineNumber:675, className:"com.inq.flash.client.control.MinimizeManager", methodName:"positionMinimize"});
    }
  } catch (error) {
    haxe.Log.trace("Error: " + Std.string(error), {fileName:"MinimizeManager.js", lineNumber:678, className:"com.inq.flash.client.control.MinimizeManager", methodName:"positionMinimize", customParams:[error]});
  }
  return true;
};
com.inq.flash.client.control.MinimizeManager.iosPositionWebViewMinimized = function(restoreBtn, restoreBtnHeight) {
  restoreBtn.style.position = "absolute";
  restoreBtn.style.top = window.top.pageYOffset + (window.top.innerHeight - restoreBtnHeight) + "px";
  restoreBtn.style.left = window.top.pageXOffset + "px";
};
com.inq.flash.client.control.MinimizeManager.iosClientInputFocus = function(e) {
  var clientWin = window.parent;
  com.inq.utils.Capabilities.UnbindListener(clientWin, "scroll", com.inq.flash.client.control.MinimizeManager.floatMinimized);
  com.inq.utils.Capabilities.UnbindListener(clientWin, "resize", com.inq.flash.client.control.MinimizeManager.floatMinimized);
  com.inq.utils.Capabilities.UnbindListener(clientWin, "orientationchange", com.inq.flash.client.control.MinimizeManager.floatMinimized);
  com.inq.flash.client.chatskins.ScrollMonitor.unbindAll();
  window.top.addEventListener("scroll", com.inq.flash.client.control.MinimizeManager.iosPositionMinimized, false);
  window.top.addEventListener("orientationchange", com.inq.flash.client.control.MinimizeManager.iosPositionMinimized, false);
  if (com.inq.utils.Capabilities.isIOSWebView()) {
    com.inq.flash.client.control.MinimizeManager.iosPositionMinimized();
  }
};
com.inq.flash.client.control.MinimizeManager.iosClientInputBlur = function(e) {
  window.top.removeEventListener("scroll", com.inq.flash.client.control.MinimizeManager.iosPositionMinimized, false);
  window.top.removeEventListener("orientationchange", com.inq.flash.client.control.MinimizeManager.iosPositionMinimized, false);
  if (com.inq.utils.Capabilities.isSafariVersion9()) {
    var divRestore = window.top.document.getElementById("tcChat_Minimized");
    divRestore.style.position = com.inq.flash.client.control.MinimizeManager.btnRestoreLocation.position;
    divRestore.style.left = com.inq.flash.client.control.MinimizeManager.btnRestoreLocation.left;
    divRestore.style.top = com.inq.flash.client.control.MinimizeManager.btnRestoreLocation.top;
  } else {
    com.inq.flash.client.control.MinimizeManager.floatMinimized();
  }
  var clientWin = window.parent;
  com.inq.utils.Capabilities.BindListener(clientWin, "scroll", com.inq.flash.client.control.MinimizeManager.floatMinimized);
  com.inq.utils.Capabilities.BindListener(clientWin, "resize", com.inq.flash.client.control.MinimizeManager.floatMinimized);
  com.inq.utils.Capabilities.BindListener(clientWin, "orientationchange", com.inq.flash.client.control.MinimizeManager.floatMinimized);
  com.inq.flash.client.chatskins.ScrollMonitor.bindAll();
};
com.inq.flash.client.control.MinimizeManager.bindHandlerForClientInputFieldsIos = function() {
  if (com.inq.utils.Capabilities.isSafariVersion9()) {
    var divRestore = window.top.document.getElementById("tcChat_Minimized");
    com.inq.flash.client.control.MinimizeManager.btnRestoreLocation = {position:divRestore.style.position, left:divRestore.style.left, top:divRestore.style.top};
  }
  var inputs = window.top.document.getElementsByTagName("input");
  for (var i = 0;i < inputs.length;i++) {
    if (inputs[i].className.indexOf("tcChat") == -1 && inputs[i].className.indexOf("tcXF") == -1 && inputs[i].readOnly !== true) {
      inputs[i].addEventListener("focus", com.inq.flash.client.control.MinimizeManager.iosClientInputFocus, false);
      inputs[i].addEventListener("blur", com.inq.flash.client.control.MinimizeManager.iosClientInputBlur, false);
    }
  }
  var selects = window.top.document.getElementsByTagName("select");
  for (var i = 0;i < selects.length;i++) {
    if (selects[i].className.indexOf("tcChat") == -1 && selects[i].className.indexOf("tcXF") == -1) {
      selects[i].addEventListener("focus", com.inq.flash.client.control.MinimizeManager.iosClientInputFocus, false);
      selects[i].addEventListener("blur", com.inq.flash.client.control.MinimizeManager.iosClientInputBlur, false);
    }
  }
  var textareas = window.top.document.getElementsByTagName("textarea");
  for (var i = 0;i < textareas.length;i++) {
    if (textareas[i].className.indexOf("tcChat") == -1 && textareas[i].className.indexOf("tcXF") == -1) {
      textareas[i].addEventListener("focus", com.inq.flash.client.control.MinimizeManager.iosClientInputFocus, false);
      textareas[i].addEventListener("blur", com.inq.flash.client.control.MinimizeManager.iosClientInputBlur, false);
    }
  }
};
com.inq.flash.client.control.MinimizeManager.prototype.__class__ = com.inq.flash.client.control.MinimizeManager;
com.inq.flash.client.control.MinimizeManager.agentMsgCounter = null;
com.inq.flash.client.control.MinimizeManager.agentText = null;
com.inq.flash.client.control.MinimizeManager.btnRestore = null;
com.inq.flash.client.control.MinimizeManager.btnMinimize = null;
com.inq.flash.client.control.MinimizeManager.btnReallyMinimized = null;
com.inq.flash.client.control.MinimizeManager.IS_MINIMIZED = -1;
com.inq.flash.client.control.MinimizeManager.SHOW_FAKE_MINIMIZE = -2;
com.inq.flash.client.control.MinimizeManager.elMinimized = null;
com.inq.flash.client.control.MinimizeManager._minimizedOffset = null;
com.inq.flash.client.control.MinimizeManager.inqChatStage = null;
com.inq.flash.client.control.MinimizeManager.originalScalingMeta = null;
com.inq.flash.client.control.MinimizeManager.NOT_MINIMIZED = -1;
com.inq.flash.client.control.MinimizeManager.META_ID = "tcChat_viewport";
com.inq.flash.client.control.MinimizeManager.SCALING_META = '<meta name="' + "tcChat_viewport" + '" content="width=device-width, initial-scale=1, maximum-scale=10.0, minimum-scale=1, user-scalable=1" />';
com.inq.flash.client.control.MinimizeManager.NO_SCALING_META = '<meta name="' + "tcChat_viewport" + '" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=0" />';
com.inq.flash.client.control.MinimizeManager.movedMinimize = 0;
com.inq.flash.client.control.MinimizeManager.displaySmallScreenMsgFnPoint = null;
com.inq.flash.client.control.MinimizeManager.MODE_FIXED = 0;
com.inq.flash.client.control.MinimizeManager.MODE_ABSOLUTE = 1;
com.inq.flash.client.control.MinimizeManager.positionMode = null;
com.inq.flash.client.control.MinimizeManager.touchStartPoint = null;
com.inq.flash.client.control.MinimizeManager.SAFARI_KEYBOARD_HEIGHT_PORTRAIT = 216;
com.inq.flash.client.control.MinimizeManager.SAFARI_KEYBOARD_HEIGHT_LANDSCAPE = 162;
com.inq.flash.client.control.UploadHandler = function() {
};
$hxClasses.registerClass(com.inq.flash.client.control.UploadHandler, "com.inq.flash.client.control.UploadHandler");
com.inq.flash.client.control.UploadHandler.init = function() {
  var fi = Application.application.getMxmlItem("UploadButton");
  com.inq.flash.client.control.UploadHandler.fileInput = fi && fi.input;
  if (com.inq.flash.client.control.UploadHandler.fileInput) {
    com.inq.flash.client.control.UploadHandler.fileInput.addEventListener("change", com.inq.flash.client.control.UploadHandler.actionUpload);
    com.inq.flash.client.control.UploadHandler.closeButton = Application.application.getMxmlItem("UploadCloseButton");
    com.inq.flash.client.control.UploadHandler.closeButton && com.inq.flash.client.control.UploadHandler.closeButton._img.addEventListener("click", com.inq.flash.client.control.UploadHandler.actionClose);
    com.inq.flash.client.control.UploadHandler.successText = Application.application.getMxmlItem("UploadSuccess");
  }
};
com.inq.flash.client.control.UploadHandler.close = function() {
  com.inq.flash.client.control.UploadHandler.fileInput && com.inq.flash.client.control.UploadHandler.fileInput.removeEventListener("change", com.inq.flash.client.control.UploadHandler.actionUpload);
  com.inq.flash.client.control.UploadHandler.closeButton && com.inq.flash.client.control.UploadHandler.closeButton._img.removeEventListener("click", com.inq.flash.client.control.UploadHandler.actionClose);
};
com.inq.flash.client.control.UploadHandler.actionUpload = function(e) {
  var fileSize = parseInt(com.inq.flash.client.control.FlashPeer.getFileTransferSize() || "5") * 1E3 * 1E3;
  var agentGroupId = com.inq.flash.client.control.FlashVars.getValue("agID");
  var url = (com.inq.flash.client.control.FlashPeer.getFileTransferUrl() || com.inq.utils.Util.getConfig("uploadServerUrl", "http://localhost:8080")) + "/filetransfer/rest/cont/uploadFile";
  var siteId = com.inq.flash.client.control.FlashVars.getValue("siteID");
  var errorElement = Application.application.getMxmlItem("UploadError");
  if (errorElement) {
    errorElement.setVisible(false);
  }
  if (com.inq.flash.client.control.UploadHandler.successText) {
    com.inq.flash.client.control.UploadHandler.successText.setVisible(false);
  }
  if (e.target.files) {
    var xhr;
    var formData = new FormData;
    var file = e.target.files[0];
    var val = file.name;
    if (!/(\.jpg|\.jpeg|\.bmp|\.gif|\.png|\.doc|\.xls|\.docx|\.xlsx|\.pdf)$/i.test(val)) {
      com.inq.flash.client.control.UploadHandler.showUploadFailedMessage(errorElement, com.inq.utils.Util.getConfig("uploadTypeError", "File type not allowed to upload:") + val);
      return;
    }
    if (file.size > fileSize) {
      com.inq.flash.client.control.UploadHandler.showUploadFailedMessage(errorElement, com.inq.utils.Util.getConfig("uploadSizeError", "File is too large. Please select a file that is less than " + fileSize / 1E6 + " MB"));
      return;
    }
    formData.append("file", e.target.files[0]);
    formData.append("siteId", siteId);
    xhr = new XMLHttpRequestFacade;
    xhr.open("POST", url);
    xhr.send(formData);
    xhr.onreadystatechange = function() {
      if (xhr.status == 200 && xhr.readyState == XMLHttpRequestFacade.DONE) {
        var resp = JSON.parse(xhr.response);
        if (resp && resp.responseStatus == 200) {
          com.inq.flash.client.control.UploadHandler.sendUploadSuccesMessage(resp, siteId, agentGroupId);
        }
      } else {
        if (xhr.status == 400 && xhr.readyState == XMLHttpRequestFacade.DONE) {
          com.inq.flash.client.control.UploadHandler.showUploadFailedMessage(errorElement, com.inq.utils.Util.getConfig("badFile", "Uploaded file contains virus"));
        } else {
          if (xhr.readyState == XMLHttpRequestFacade.DONE) {
            com.inq.flash.client.control.UploadHandler.showUploadFailedMessage(errorElement, com.inq.utils.Util.getConfig("uploadServerError", "Server Encountered Unexpected Error"));
          }
        }
      }
      com.inq.flash.client.control.UploadHandler.fileInput.value = "";
    };
  } else {
    com.inq.flash.client.control.UploadHandler.actionUploadIE(e, agentGroupId, siteId, errorElement);
  }
};
com.inq.flash.client.control.UploadHandler.actionUploadIE = function(e, agentGroupId, siteId, errorElement) {
  var fileName;
  var siteIdInput;
  var iframe;
  var url = (com.inq.flash.client.control.FlashPeer.getFileTransferUrl() || com.inq.utils.Util.getConfig("uploadServerUrl", "http://localhost:8080")) + "/filetransfer/rest/cont/uploadFileIE";
  if (e.srcElement) {
    fileName = e.srcElement.value;
    if (!/(\.jpg|\.jpeg|\.bmp|\.gif|\.png|\.doc|\.xls|\.docx|\.xlsx|\.pdf)$/i.test(fileName)) {
      com.inq.flash.client.control.UploadHandler.showUploadFailedMessage(errorElement, com.inq.utils.Util.getConfig("uploadTypeError", "File type not allowed to upload:") + fileName);
      return;
    }
    if (!com.inq.flash.client.control.UploadHandler.uploadForm) {
      com.inq.flash.client.control.UploadHandler.uploadForm = document.createElement("form");
      siteIdInput = document.createElement("input");
      siteIdInput.setAttribute("name", "siteId");
      siteIdInput.setAttribute("type", "text");
      siteIdInput.value = siteId;
      com.inq.flash.client.control.UploadHandler.uploadForm.setAttribute("action", url);
      com.inq.flash.client.control.UploadHandler.uploadForm.setAttribute("method", "post");
      com.inq.flash.client.control.UploadHandler.uploadForm.setAttribute("enctype", "multipart/form-data");
      com.inq.flash.client.control.UploadHandler.uploadForm.setAttribute("encoding", "multipart/form-data");
      com.inq.flash.client.control.UploadHandler.uploadForm.setAttribute("id", "IEfileUploadForm");
      com.inq.flash.client.control.UploadHandler.fileInput.parentElement.appendChild(com.inq.flash.client.control.UploadHandler.uploadForm);
      com.inq.flash.client.control.UploadHandler.uploadForm.appendChild(com.inq.flash.client.control.UploadHandler.fileInput);
      com.inq.flash.client.control.UploadHandler.uploadForm.appendChild(siteIdInput);
      iframe = document.createElement("iframe");
      iframe.setAttribute("id", "upload_iframe");
      iframe.setAttribute("name", "upload_iframe");
      iframe.setAttribute("style", "border: none;display: none;");
      com.inq.flash.client.control.UploadHandler.uploadForm.appendChild(iframe);
      window.frames["upload_iframe"].name = "upload_iframe";
      com.inq.flash.client.control.UploadHandler.uploadFrame = document.getElementById("upload_iframe");
      onmessage = function(e) {
        if (url.indexOf(e.origin) != -1) {
          com.inq.flash.client.control.UploadHandler.fileInput.value = "";
          var data = eval("(" + e.data + ")");
          if (data && data.responseStatus == "200") {
            com.inq.flash.client.control.UploadHandler.sendUploadSuccesMessage(data, siteId, agentGroupId);
          } else {
            if (data && data.responseStatus == "400") {
              com.inq.flash.client.control.UploadHandler.showUploadFailedMessage(errorElement, com.inq.utils.Util.getConfig("badFile", "Uploaded file contains virus"));
            } else {
              com.inq.flash.client.control.UploadHandler.showUploadFailedMessage(errorElement, com.inq.utils.Util.getConfig("uploadServerError", "Server Encountered Unexpected Error"));
            }
          }
        }
      };
      com.inq.flash.client.control.UploadHandler.uploadForm.setAttribute("target", "upload_iframe");
    }
    com.inq.flash.client.control.UploadHandler.uploadForm.submit();
  }
};
com.inq.flash.client.control.UploadHandler.actionClose = function() {
  var errorElement = Application.application.getMxmlItem("UploadError");
  com.inq.flash.client.control.ApplicationController.applicationController.sendTextToAgent("Customer has closed the file upload window.");
  if (errorElement) {
    errorElement.setVisible(false);
  }
};
com.inq.flash.client.control.UploadHandler.sendUploadSuccesMessage = function(resp, siteId, agentGroupId) {
  var uploadMsg = com.inq.utils.Util.getConfig("uploadSuccessMsg", "File successfully uploaded");
  com.inq.flash.client.control.ApplicationController.applicationController.sendTextToAgent(uploadMsg);
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendFileUploadMessage(com.inq.utils.Util.getConfig("fileTransferApiUrl", "https://api.touchcommerce.com/") + "chatfiles/" + siteId + "/" + encodeURI(resp.fileName) + "?site=" + siteId + "&agentGroup=" + agentGroupId, com.inq.flash.client.data.MessageFields.ACTIVITY_FILE_UPLOAD_PATH);
  if (com.inq.flash.client.control.UploadHandler.successText) {
    com.inq.flash.client.control.UploadHandler.successText.setText(uploadMsg);
    com.inq.flash.client.control.UploadHandler.successText.setVisible(true);
  }
};
com.inq.flash.client.control.UploadHandler.showUploadFailedMessage = function(errorElement, msg) {
  if (errorElement) {
    errorElement.setText(msg);
    errorElement.setVisible(true);
  }
  com.inq.flash.client.control.ApplicationController.applicationController.sendTextToAgent(msg);
};
com.inq.flash.client.control.UploadHandler.uploadForm = null;
com.inq.flash.client.control.UploadHandler.uploadFrame = null;
com.inq.flash.client.control.UploadHandler.fileInput = null;
com.inq.flash.client.control.UploadHandler.closeButton = null;
com.inq.flash.client.control.UploadHandler.successText = null;
com.inq.flash.client.control.XFrameWorker = function() {
};
$hxClasses["com.inq.flash.client.control.XFrameWorker"] = com.inq.flash.client.control.XFrameWorker;
com.inq.flash.client.control.XFrameWorker.__name__ = ["com", "inq", "flash", "client", "control", "XFrameWorker"];
com.inq.flash.client.control.XFrameWorker.init = function() {
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.engageChat", com.inq.flash.client.control.XFrameWorker.engageChat);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.isChatConnected", com.inq.flash.client.control.XFrameWorker.isChatConnected);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.showLayer", com.inq.flash.client.control.XFrameWorker.showLayer);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.hideLayer", com.inq.flash.client.control.XFrameWorker.hideLayer);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.grow", com.inq.flash.client.control.XFrameWorker.grow);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.shrink", com.inq.flash.client.control.XFrameWorker.shrink);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.showLayerXcd", com.inq.flash.client.control.XFrameWorker.showLayerXcd);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.isLayerVisible", com.inq.flash.client.control.XFrameWorker.isLayerVisible);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.fireCustomEvt", com.inq.flash.client.control.XFrameWorker.fireCustomEvt);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.showAutomatonXcd", com.inq.flash.client.control.XFrameWorker.showAutomatonXcd);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.hideLayerAndEndChat", com.inq.flash.client.control.XFrameWorker.hideLayerAndEndChat);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.growXcd", com.inq.flash.client.control.XFrameWorker.growXcd);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.closeChat", com.inq.flash.client.control.XFrameWorker.closeChat);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.setAutomatonDataMapXcd", com.inq.flash.client.control.XFrameWorker.setAutomatonDataMapXcd);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.isDisplayInCI", com.inq.flash.client.control.XFrameWorker.isDisplayInCI);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.resizeStage", com.inq.flash.client.control.XFrameWorker.resizeStage);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.moveStage", com.inq.flash.client.control.XFrameWorker.moveStage);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.syncLayer", com.inq.flash.client.control.XFrameWorker.syncLayer);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.XFrameWorker.onCookiesCommitted", com.inq.flash.client.control.XFrameWorker.onCookiesCommitted);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.MinimizeManager.actionMinimize", com.inq.flash.client.control.MinimizeManager.actionMinimize);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.flash.client.control.MinimizeManager.actionRestore", com.inq.flash.client.control.MinimizeManager.actionRestore);
  com.inq.utils.Util.publish("window.inqFrame.XFrameWorker.setCircularModalWindow", com.inq.flash.client.control.XFrameWorker.setCircularModalWindow);
  com.inq.utils.Util.publish("window.inqFrame.XFrameWorker.setCircularApplication", com.inq.flash.client.control.XFrameWorker.setCircularApplication);
  com.inq.utils.Util.publish("window.inqFrame.XFrameWorker.removeCircularModalWindow", com.inq.flash.client.control.XFrameWorker.removeCircularModalWindow);
  com.inq.utils.Util.publish("window.inqFrame.XFrameWorker.transitionPage", com.inq.flash.client.control.XFrameWorker.transitionPage);
  com.inq.utils.Util.publish("window.inqFrame.com.inq.net.URLLoader._httpRequestHandler", com.inq.net.URLLoader._httpRequestHandler);
  var xf = com.inq.flash.client.control.PersistenceManager.GetValue("xf", {});
  var keyz = Reflect.fields(xf);
  var layerID;
  var show;
  haxe.Log.trace("XFrameWorker.init(): restoring saved state for " + keyz.length + " layer(s).", {fileName:"XFrameWorker.hx", lineNumber:46, className:"com.inq.flash.client.control.XFrameWorker", methodName:"init"});
  var _g1 = 0, _g = keyz.length;
  while (_g1 < _g) {
    var i = _g1++;
    layerID = keyz[i];
    show = "1" == xf[layerID];
    if (show) {
      com.inq.flash.client.control.XFrameWorker.showLayer(layerID);
    } else {
      com.inq.flash.client.control.XFrameWorker.hideLayer(layerID);
    }
  }
  return true;
};
com.inq.flash.client.control.XFrameWorker.isLayerVisible = function(layerID) {
  var visible = false;
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication(layerID)) {
    var cntr = Application.application.getMxmlItem(layerID);
    if (cntr.getStyle("visible") == "true") {
      visible = true;
    }
  } else {
    haxe.Log.trace("XFrameWorker.isLayerVisible('" + layerID + "', ...): layer is not in the application", {fileName:"XFrameWorker.hx", lineNumber:68, className:"com.inq.flash.client.control.XFrameWorker", methodName:"isLayerVisible", customParams:["warn"]});
  }
  return visible;
};
com.inq.flash.client.control.XFrameWorker.showLayer = function(layerID, noOpeners, url, channelID, updateCookies, initiator) {
  if (com.inq.flash.client.control.MinimizeManager.isMinimized()) {
    return;
  }
  if (updateCookies == null) {
    updateCookies = true;
  }
  if (noOpeners == null) {
    noOpeners = false;
  }
  haxe.Log.trace("XFrameWorker.showLayer(" + layerID + ", " + Std.string(noOpeners) + ", " + url + ", " + channelID + ", " + Std.string(updateCookies) + ") entered", {fileName:"XFrameWorker.hx", lineNumber:84, className:"com.inq.flash.client.control.XFrameWorker", methodName:"showLayer"});
  var cntr;
  var deltaHeight = 0;
  var deltaWidth = 0;
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication(layerID)) {
    cntr = Application.application.getMxmlItem(layerID);
    if (null != cntr) {
      if (url != null) {
        if (js.Boot.__instanceof(cntr, com.inq.ui.XFrame)) {
          var data = com.inq.flash.client.control.FlashPeer.parseXFrameUrl(url);
          data["initiator"] = initiator;
          cntr.setSrcWithChannelID(data, channelID);
          cntr.persistURL();
        } else {
          cntr.setSrc(url);
        }
      } else {
        cntr.updateSrc(channelID, initiator);
      }
      cntr.loadContent();
      if (cntr.getStyle("visibility") == "collapse") {
        var stageHeight = Std.parseInt(window.frameElement.style.height);
        var stageWidth = Std.parseInt(window.frameElement.style.width);
        try {
          deltaWidth = Std.parseInt(cntr.getStyle("ucW"));
        } catch (e) {
          deltaWidth = 0;
        }
        try {
          deltaHeight = Std.parseInt(cntr.getStyle("ucH"));
        } catch (e) {
          deltaHeight = 0;
        }
        if (deltaWidth == null) {
          try {
            deltaWidth = Std.parseInt(cntr.getStyle("width"));
          } catch (e) {
            deltaWidth = 0;
          }
        }
        if (deltaHeight == null) {
          try {
            deltaHeight = Std.parseInt(cntr.getStyle("height"));
          } catch (e) {
            deltaWidth = 0;
          }
        }
        if (deltaWidth == null) {
          deltaWidth = 0;
        }
        if (deltaHeight == null) {
          deltaHeight = 0;
        }
        cntr.setStyle("visibility", "visible");
        cntr.setStyle("visible", "true");
        cntr.setVisible(true);
        com.inq.flash.client.control.XFrameWorker.setPersistentState(layerID, true, updateCookies);
        Application.application.resize();
      } else {
        if (cntr.getStyle("visible") == "false") {
          cntr.setStyle("visible", "true");
          cntr.setVisible(true);
          com.inq.flash.client.control.XFrameWorker.setPersistentState(layerID, true, updateCookies);
        }
      }
    }
  } else {
    haxe.Log.trace("XFrameWorker.showLayer('" + layerID + "', ...): layer is not in the application", {fileName:"XFrameWorker.hx", lineNumber:128, className:"com.inq.flash.client.control.XFrameWorker", methodName:"showLayer", customParams:["warn"]});
  }
  com.inq.flash.client.control.XFrameWorker.enableChatWindow();
  if (layerID == "Chat") {
    haxe.Log.trace("XFrameWorker.showLayer: SkinControl.kickOffChat", {fileName:"XFrameWorker.hx", lineNumber:131, className:"com.inq.flash.client.control.XFrameWorker", methodName:"showLayer"});
    com.inq.flash.client.chatskins.SkinControl.kickOffChat(noOpeners);
    haxe.Log.trace("XFrameWorker.showLayer: SkinControl.fireMxmlHandler(onShowChat)", {fileName:"XFrameWorker.hx", lineNumber:133, className:"com.inq.flash.client.control.XFrameWorker", methodName:"showLayer"});
    com.inq.flash.client.chatskins.SkinControl.fireMxmlHandler("onShowChat");
  } else {
    if (layerID == "chat") {
      var txtInput = com.inq.flash.client.chatskins.SkinControl.getTextInputField();
      txtInput.setFocus();
    }
  }
};
com.inq.flash.client.control.XFrameWorker.enableChatWindow = function() {
  var cWindow = window.parent.document.getElementById("tcChat_chatWindow");
  if (cWindow && cWindow.hasAttribute("data-disabled")) {
    com.inq.flash.client.chatskins.SkinControl.getInputArea().setVisible(true);
    com.inq.flash.client.chatskins.SkinControl.getSendButton().setVisible(true);
    cWindow.removeAttribute("aria-hidden");
    cWindow.removeAttribute("data-disabled");
  }
};
com.inq.flash.client.control.XFrameWorker.showLayerXcd = function(layerID, updateCookies, automatonId) {
  var initiator = {type:"automaton", id:automatonId};
  com.inq.flash.client.control.XFrameWorker.showLayer(layerID, false, null, null, updateCookies, initiator);
};
com.inq.flash.client.control.XFrameWorker.showAutomatonXcd = function(automatonId, layerID, url, updateCookies) {
  var initiator = {type:"automaton", id:automatonId};
  com.inq.flash.client.control.XFrameWorker.showLayer(layerID, false, url, null, updateCookies, initiator);
};
com.inq.flash.client.control.XFrameWorker.fireCustomEvt = function(eventName, jsonData, dataFcn) {
  if (dataFcn != null && dataFcn == "") {
    dataFcn = null;
  }
  com.inq.flash.client.control.FlashPeer.fireCustomEvt(eventName, jsonData, dataFcn);
};
com.inq.flash.client.control.XFrameWorker.hideLayer = function(layerID, updateCookies) {
  if (updateCookies == null) {
    updateCookies = true;
  }
  haxe.Log.trace("XFrameWorker.hideLayer(" + layerID + ", " + Std.string(updateCookies) + ") entered", {fileName:"XFrameWorker.hx", lineNumber:156, className:"com.inq.flash.client.control.XFrameWorker", methodName:"hideLayer"});
  var cntr;
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication(layerID)) {
    cntr = Application.application.getMxmlItem(layerID);
    var stageHeight = Std.parseInt(window.frameElement.style.height);
    var stageWidth = Std.parseInt(window.frameElement.style.width);
    cntr.initStyle("visibility", "collapse");
    Application.application.resize();
    var deltaWidth = stageWidth - Std.parseInt(window.frameElement.style.width);
    var deltaHeight = stageHeight - Std.parseInt(window.frameElement.style.height);
    cntr.initStyle("ucH", "" + deltaHeight);
    cntr.initStyle("ucW", "" + deltaWidth);
    com.inq.flash.client.control.XFrameWorker.setPersistentState(layerID, false, updateCookies);
    cntr.fireHidden();
    cntr._visible = false;
  } else {
    haxe.Log.trace("XFrameWorker.hideLayer('" + layerID + "', ...): layer is not in the application", {fileName:"XFrameWorker.hx", lineNumber:170, className:"com.inq.flash.client.control.XFrameWorker", methodName:"hideLayer", customParams:["warn"]});
  }
};
com.inq.flash.client.control.XFrameWorker.hideLayerAndEndChat = function(layerID, updateCookies) {
  if (updateCookies == null) {
    updateCookies = true;
  }
  haxe.Log.trace("hideLayerAndEndChat entered", {fileName:"XFrameWorker.hx", lineNumber:176, className:"com.inq.flash.client.control.XFrameWorker", methodName:"hideLayerAndEndChat"});
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().shutdown();
  if (layerID.toUpperCase() == "ROOT") {
  } else {
    com.inq.flash.client.control.XFrameWorker.hideLayer(layerID, updateCookies);
  }
};
com.inq.flash.client.control.XFrameWorker.grow = function(layerID, url, updateCookies, initiator) {
  if (updateCookies == null) {
    updateCookies = true;
  }
  var cntr;
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication(layerID)) {
    cntr = Application.application.getMxmlItem(layerID);
    if (url != null) {
      if (js.Boot.__instanceof(cntr, com.inq.ui.XFrame)) {
        var data = com.inq.flash.client.control.FlashPeer.parseXFrameUrl(url);
        data["initiator"] = initiator;
        cntr.setSrcWithChannelID(data, null);
        cntr.persistURL();
      } else {
        cntr.setSrc(url);
      }
    } else {
      cntr.updateSrc(null, initiator);
    }
    var msgVideoOpen = com.inq.utils.Util.getConfig("msgVideoOpen", "");
    msgVideoOpen = msgVideoOpen.replace("{accesskey}", getBrowserAccessKey());
    com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", msgVideoOpen, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM);
    cntr.loadContent();
    var growDeltaX = 0;
    var growDeltaY = 0;
    if (cntr.getStyle("visibility") == "collapse") {
      cntr.setStyle("visibility", "visible");
      cntr.setStyle("visible", "true");
      cntr.setVisible(true);
      var st = cntr.getStyle("height");
      if (st != null && st != "") {
        growDeltaY = cntr.getHeight();
      }
      st = cntr.getStyle("width");
      if (st != null && st != "") {
        growDeltaX = cntr.getWidth();
      }
    }
    var stageHeight = com.inq.ui.Stage.getterStageHeight() + growDeltaY;
    var stageWidth = com.inq.ui.Stage.getterStageWidth() + growDeltaX;
    if (com.inq.utils.Util.getConfig("divSkin", false)) {
      stageWidth = Std.parseInt(inqFrame.frameElement.style.width) + Std.parseInt(cntr.styles.width);
    }
    com.inq.flash.client.control.XFrameWorker.setPersistentState(layerID, true, updateCookies);
    com.inq.flash.client.control.XFrameWorker.resizeStage(stageWidth, stageHeight);
    cntr.setVisible(true);
    if (layerID == "Chat") {
      com.inq.flash.client.chatskins.SkinControl.kickOffChat();
    }
  }
  function getBrowserAccessKey() {
    var accessKey = "Alt";
    if (navigator.userAgent.toLowerCase().indexOf("firefox") > -1) {
      accessKey = "Shift Alt";
    } else {
      if (navigator.userAgent.indexOf("Safari") != -1 && navigator.userAgent.indexOf("Chrome") == -1 && navigator.userAgent.indexOf("Android") == -1 && navigator.platform.toUpperCase().indexOf("MAC") >= 0) {
        accessKey = "Control";
      }
    }
    return accessKey;
  }
};
com.inq.flash.client.control.XFrameWorker.growXcd = function(layerID, updateCookies, automatonId) {
  var initiator = {type:"automaton", id:automatonId};
  com.inq.flash.client.control.XFrameWorker.showLayer(layerID, false, null, null, updateCookies, initiator);
};
com.inq.flash.client.control.XFrameWorker.shrink = function(layerID, updateCookies) {
  if (updateCookies == null) {
    updateCookies = true;
  }
  haxe.Log.trace("XFrameWorker.shrink(" + layerID + ", " + Std.string(updateCookies) + ") entered", {fileName:"XFrameWorker.hx", lineNumber:226, className:"com.inq.flash.client.control.XFrameWorker", methodName:"shrink"});
  var cntr;
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication(layerID)) {
    var msgVideoClose = com.inq.utils.Util.getConfig("msgVideoClose", "");
    com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", msgVideoClose, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM);
    cntr = Application.application.getMxmlItem(layerID);
    var growDeltaX = 0;
    var growDeltaY = 0;
    if (cntr.getStyle("visibility") != "collapse") {
      var st = cntr.getStyle("height");
      if (st != null && st != "") {
        growDeltaY = cntr.getHeight();
      }
      st = cntr.getStyle("width");
      if (st != null && st != "") {
        growDeltaX = cntr.getWidth();
      }
    }
    cntr.initStyle("visible", "false");
    cntr.initStyle("visibility", "collapse");
    if (!com.inq.flash.client.control.MinimizeManager.isMinimized()) {
      Application.application.resize();
    }
    var stageHeight = com.inq.ui.Stage.getterStageHeight() - growDeltaY;
    var stageWidth = com.inq.ui.Stage.getterStageWidth() - growDeltaX;
    com.inq.flash.client.control.XFrameWorker.resizeStage(stageWidth, stageHeight);
    if (!com.inq.flash.client.control.MinimizeManager.isMinimized()) {
      com.inq.flash.client.chatskins.SkinControl.setFocusOnInputField();
    }
    com.inq.flash.client.control.XFrameWorker.setPersistentState(layerID, false, updateCookies);
  }
};
com.inq.flash.client.control.XFrameWorker.engageChat = function(chatParams) {
  if (typeof chatParams != "object") {
    chatParams = com.inq.flash.client.control.XFrameWorker._preparingChatParameters.apply(null, arguments);
  }
  chatParams.agentOutcome = com.inq.flash.client.control.XFrameWorker.DO_NOT_DISPLAY_IN_CI + com.inq.flash.client.control.XFrameWorker.findCustomerName(chatParams.agentOutcome);
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().engageChat(chatParams);
  if (chatParams.circularTabbing) {
    com.inq.flash.client.control.XFrameWorker.setCircularApplication();
  } else {
    com.inq.flash.client.control.XFrameWorker.removeCircularModalWindow();
  }
};
com.inq.flash.client.control.XFrameWorker._preparingChatParameters = function(text, clientText, agentAttrs, businessUnitID, phone, agentGroupId, scriptTreeId, publicUserId) {
  return {agentOutcome:text, clientOutcome:clientText, agentAttrs:agentAttrs, businessUnitID:businessUnitID, phone:phone, agentGroupId:agentGroupId, scriptTreeId:scriptTreeId, publicUserId:publicUserId};
};
com.inq.flash.client.control.XFrameWorker.isChatConnected = function() {
  return com.inq.flash.client.chatskins.SkinControl.getApplicationController().isConnected();
};
com.inq.flash.client.control.XFrameWorker.findCustomerName = function(aStr) {
  var cdnStr;
  var myregex = new RegExp("CustomerDisplayName: (.*)\n", "i");
  if (myregex.test(aStr)) {
    cdnStr = myregex.exec(aStr);
    if (cdnStr.length == 2 && cdnStr[1] != "") {
      com.inq.flash.client.control.FlashVars.setCustomerName(cdnStr[1], true);
    }
    aStr = aStr.replace(myregex, "");
  }
  return aStr;
};
com.inq.flash.client.control.XFrameWorker.closeChat = function() {
  com.inq.flash.client.chatskins.SkinControl.actionCloseChat();
};
com.inq.flash.client.control.XFrameWorker.setAutomatonDataMapXcd = function(json) {
  com.inq.flash.client.control.FlashVars.setValue("automatonSpecData", json);
};
com.inq.flash.client.control.XFrameWorker.isDisplayInCI = function(text) {
  return text.indexOf(com.inq.flash.client.control.XFrameWorker.DO_NOT_DISPLAY_IN_CI) < 0;
};
com.inq.flash.client.control.XFrameWorker.setPersistentState = function(id, show, updateCookies) {
  haxe.Log.trace("XFrameWorker.setPersistentState entered: layer '" + id + "' = " + Std.string(show) + ", updateCookies=" + Std.string(updateCookies), {fileName:"XFrameWorker.hx", lineNumber:263, className:"com.inq.flash.client.control.XFrameWorker", methodName:"setPersistentState"});
  var xf = com.inq.flash.client.control.PersistenceManager.GetValue("xf", {});
  xf[id] = show ? "1" : "0";
  if (id.match(/[^0-9a-zA-Z]/) && typeof console != "undefined") {
    console.warn("(Warning!!!) XFrame name " + id + " contains special symbols and will not be parsed in cookies! Please change XFrame name");
  }
  com.inq.flash.client.control.PersistenceManager.SetValue("xf", xf, true, updateCookies);
};
com.inq.flash.client.control.XFrameWorker.resizeStage = function(stageWidth, stageHeight) {
  Application.ResizeStage(stageWidth, stageHeight);
  Application.application.resize();
  com.inq.flash.client.control.XFrameWorker.hideLoadingButton();
};
com.inq.flash.client.control.XFrameWorker.moveStage = function(location, x, y) {
  var area = Application.GetArea();
  var vp = com.inq.utils.Capabilities.getViewport();
  var pos = Application.calcChatLocation(area.w, area.h, x, y, location);
  if (pos) {
    var iframe = window.frameElement;
    iframe.style.left = Std.string(pos.x) + "px";
    iframe.style.top = Std.string(pos.y) + "px";
    Application.initialXPos = pos.x - vp.x;
    Application.initialYPos = pos.y - vp.y;
    Application.MoveStage(pos.x, pos.y);
  } else {
    haxe.Log.trace("XFrameWorker.moveStage('" + location + "', ...): can't move persistent chat window");
  }
};
com.inq.flash.client.control.XFrameWorker.syncLayer = function(layerID, cacheId, dtid) {
  var cntr;
  var deltaHeight = 0;
  var deltaWidth = 0;
  var indx;
  var map = {};
  if (com.inq.flash.client.chatskins.SkinControl.isInApplication(layerID)) {
    var name, valu, i;
    cntr = Application.application.getMxmlItem(layerID);
    if (cntr == null || cntr.src == null) {
      return;
    }
    indx = cntr.src.indexOf("?");
    if (indx == -1) {
      return;
    }
    var params = cntr.src.substr(indx + 1);
    var url = cntr.src.substr(0, indx + 1);
    var nameValuePairs = params.split("&");
    var namepair;
    var _g1 = 0, _g = nameValuePairs.length;
    while (_g1 < _g) {
      var i1 = _g1++;
      var namevalue = nameValuePairs[i1];
      indx = namevalue.indexOf("=");
      if (indx != -1) {
        name = HxOverrides.substr(namevalue, 0, indx);
        valu = HxOverrides.substr(namevalue, indx + 1, null);
      } else {
        name = namevalue;
        valu = null;
      }
      map[name] = valu;
    }
    if (dtid != null) {
      map["dtid"] = dtid;
    }
    if (cacheId != null) {
      map["cacheid"] = cacheId;
    }
    var query = "";
    var keyz = Reflect.fields(map);
    var _g1 = 0, _g = keyz.length;
    while (_g1 < _g) {
      var i1 = _g1++;
      name = keyz[i1];
      valu = map[name];
      if (i1 != 0) {
        query += "&";
      }
      if (valu != null) {
        query += name + "=" + valu;
      } else {
        query += name;
      }
    }
    url += query;
    com.inq.flash.client.control.PersistenceManager.SetValue("xfq", query);
    cntr.setSrc(url);
    if (cntr.getVisible()) {
      cntr.loadContent();
    } else {
      com.inq.flash.client.control.XFrameWorker.showLayer(layerID);
    }
  }
};
com.inq.flash.client.control.XFrameWorker.onCookiesCommitted = function(handler) {
  com.inq.flash.client.control.FlashPeer.onCookiesCommitted(handler);
};
com.inq.flash.client.control.XFrameWorker.ariaHelpOnLoadingButton = function() {
  var xframeloadingDiv = Application.application.getMxmlItem("xframeloading");
  if (xframeloadingDiv && xframeloadingDiv._visible == true) {
    if (navigator.userAgent.toLowerCase().indexOf("firefox") > -1) {
      com.inq.flash.client.control.XFrameWorker.xframeLoadingIntId = window.setInterval(function() {
        var btnPW = Application.application.getButton("btnPleaseWait")._img;
        var loadingLabel = Application.application.getButton("btnPleaseWait").label;
        com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", loadingLabel !== null ? loadingLabel : "Chat is loading ... Please wait.", com.inq.flash.client.chatskins.ChatTextArea.SYSTEM);
        btnPW.focus();
        if (com.inq.flash.client.control.XFrameWorker.xframeLoadingIntIdCount > 5) {
          clearInterval(com.inq.flash.client.control.XFrameWorker.xframeLoadingIntId);
          com.inq.flash.client.control.XFrameWorker.xframeLoadingIntId = -1;
        }
        com.inq.flash.client.control.XFrameWorker.xframeLoadingIntIdCount++;
      }, 1E3);
    } else {
      try {
        var loadingLabel = Application.application.getButton("btnPleaseWait").label;
        com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", loadingLabel !== null ? loadingLabel : "Chat is loading ... Please wait.", com.inq.flash.client.chatskins.ChatTextArea.SYSTEM);
      } catch (jerr) {
      }
    }
  }
};
com.inq.flash.client.control.XFrameWorker.xframeLoadingIntIdCount = 0;
com.inq.flash.client.control.XFrameWorker.hideLoadingButton = function() {
  var xframeloadingDiv = Application.application.getMxmlItem("xframeloading");
  if (xframeloadingDiv && xframeloadingDiv._visible == true) {
    xframeloadingDiv.setVisible(false);
    com.inq.flash.client.chatskins.ChatTextArea.prototype.addAriaMsg("", "", com.inq.flash.client.chatskins.ChatTextArea.SYSTEM);
    if (com.inq.flash.client.control.XFrameWorker.xframeLoadingIntId && com.inq.flash.client.control.XFrameWorker.xframeLoadingIntId > -1) {
      clearInterval(com.inq.flash.client.control.XFrameWorker.xframeLoadingIntId);
    }
  }
};
com.inq.flash.client.control.XFrameWorker.setCircularModalWindow = function(div, firstEl, lastEl) {
  return com.inq.aria.ModalWindow.setCircularModalWindow(div, firstEl, lastEl);
};
com.inq.flash.client.control.XFrameWorker.setCircularApplication = function() {
  return com.inq.aria.ModalWindow.setCircularApplication();
};
com.inq.flash.client.control.XFrameWorker.removeCircularModalWindow = function() {
  com.inq.aria.ModalWindow.removeCircularModalWindow();
};
com.inq.flash.client.control.XFrameWorker.transitionPage = function() {
  var xframes = Application.application.getXFrameItems();
  for (var i = 0;i < xframes.length;i++) {
    xframes[i].resetScrolling();
  }
};
com.inq.flash.client.control.XFrameWorker.prototype.__class__ = com.inq.flash.client.control.XFrameWorker;
com.inq.flash.client.control.XFrameWorker.DO_NOT_DISPLAY_IN_CI = "\x3c!-- Data Pass --\x3e";
com.inq.flash.messagingframework.AbstractMessageHandler = function(messageType) {
  this.messageType = messageType;
};
$hxClasses["com.inq.flash.messagingframework.AbstractMessageHandler"] = com.inq.flash.messagingframework.AbstractMessageHandler;
com.inq.flash.messagingframework.AbstractMessageHandler.__name__ = ["com", "inq", "flash", "messagingframework", "AbstractMessageHandler"];
com.inq.flash.messagingframework.AbstractMessageHandler.prototype.getMessagingFramework = function() {
  return this.framework;
};
com.inq.flash.messagingframework.AbstractMessageHandler.prototype.setMessagingFramework = function(framework) {
  this.framework = framework;
};
com.inq.flash.messagingframework.AbstractMessageHandler.prototype.getMessageType = function() {
  return this.messageType;
};
com.inq.flash.messagingframework.AbstractMessageHandler.prototype.processMessage = function(message) {
};
com.inq.flash.messagingframework.AbstractMessageHandler.prototype.framework = null;
com.inq.flash.messagingframework.AbstractMessageHandler.prototype.messageType = null;
com.inq.flash.messagingframework.AbstractMessageHandler.prototype.__class__ = com.inq.flash.messagingframework.AbstractMessageHandler;
if (!com.inq.flash.client.control.messagehandlers) {
  com.inq.flash.client.control.messagehandlers = {};
}
;com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler = function(messageType) {
  com.inq.flash.messagingframework.AbstractMessageHandler.call(this, messageType);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler"] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ClientApplicationMessageHandler"];
com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.__super__ = com.inq.flash.messagingframework.AbstractMessageHandler;
for (var k in com.inq.flash.messagingframework.AbstractMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k] = com.inq.flash.messagingframework.AbstractMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype.getController = function() {
  return this.controller;
};
com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype.setController = function(controller) {
  this.controller = controller;
};
com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype.controller = null;
com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatAcceptedMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHAT_ACCEPTED);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatAcceptedMessageHandler"] = com.inq.flash.client.control.messagehandlers.ChatAcceptedMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatAcceptedMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatAcceptedMessageHandler"];
com.inq.flash.client.control.messagehandlers.ChatAcceptedMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatAcceptedMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatAcceptedMessageHandler.prototype.processMessage = function(message) {
  var agentID = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_ID);
  if (agentID != null && agentID != "") {
    var cobrowseEnabled = com.inq.flash.messagingframework.StringUtils.getBooleanValue(message.getProperty(com.inq.flash.client.data.MessageFields.KEY_COBROWSE_ENABLED));
    this.getController().setAgentConfig(agentID, com.inq.utils.EventDataUtils.fromMessage(message), cobrowseEnabled, message.getProperty(com.inq.flash.client.data.MessageFields.KEY_BUSINESS_UNIT_ID), message.getProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_GROUP_ID));
  }
  this.getController().checkForChatExit();
  this.getController().setConnectionAccepted(true);
  com.inq.flash.client.chatskins.SkinControl.setSocketIP(message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHATROUTER_ADDRESS));
  var auxParams = {Agent:true};
  com.inq.flash.client.control.FlashPeer.setSurveyAuxParams(auxParams);
  com.inq.flash.client.chatskins.SkinControl.fireMxmlHandler("onChatAccepted");
};
com.inq.flash.client.control.messagehandlers.ChatAcceptedMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatAcceptedMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatAuthorizedMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHAT_AUTHORIZED);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatAuthorizedMessageHandler"] = com.inq.flash.client.control.messagehandlers.ChatAuthorizedMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatAuthorizedMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatAuthorizedMessageHandler"];
com.inq.flash.client.control.messagehandlers.ChatAuthorizedMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatAuthorizedMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatAuthorizedMessageHandler.prototype.processMessage = function(message) {
  this.getController().getChat().setHasAuthorized(true);
  this.getController().sendFirstQueuedMessage();
  this.getController().setQueueMessages(false);
};
com.inq.flash.client.control.messagehandlers.ChatAuthorizedMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatAuthorizedMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHAT_AUTOMATON_SETTING);
  this.REPLACE_STRING = "_REPLACE_";
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler"] = com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler;
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatAutomatonRequestElementSettingHandler"];
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.setAttribute = function(elementID, attributeName, attributeValue) {
  var elements = window.document.getElementsByName(elementID);
  if (elements.length == 0) {
    haxe.Log.trace("element not found by name [" + elementID + "]", {fileName:"ChatAutomatonRequestElementSettingHandler.hx", lineNumber:72, className:"com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler", methodName:"setAttribute", customParams:["error"]});
  } else {
    var _g1 = 0, _g = elements.length;
    while (_g1 < _g) {
      var ix = _g1++;
      var el = elements[ix];
      if (el.name != elementID) {
        continue;
      }
      if (attributeName == "disabled" && el.tagName == "A") {
        el.setAttribute("STYLE", attributeValue == "bold" ? "color: #323232; font-weight: bold" : "color: gray");
        try {
          el.removeAttribute("onclick");
        } catch (e) {
        }
        el.setAttribute("onclick", "return false;");
        try {
          el.removeAttribute("HREF");
        } catch (e) {
        }
        try {
          el.removeAttribute("href");
        } catch (e) {
        }
      } else {
        if (attributeValue == "null") {
          try {
            el.removeAttribute(attributeName);
          } catch (e) {
          }
        } else {
          el.setAttribute(attributeName, attributeValue);
        }
      }
      com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.setAttributesInChatTextArea(el);
    }
  }
};
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.incrementOutstandingCount = function() {
  com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.outstanding++;
  haxe.Log.trace("incrementOutstandingCount: " + com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.outstanding, {fileName:"ChatAutomatonRequestElementSettingHandler.hx", lineNumber:109, className:"com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler", methodName:"incrementOutstandingCount"});
};
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.decrementOutstandingCount = function() {
  --com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.outstanding;
  haxe.Log.trace("decrementOutstandingCount: " + com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.outstanding, {fileName:"ChatAutomatonRequestElementSettingHandler.hx", lineNumber:122, className:"com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler", methodName:"decrementOutstandingCount"});
  if (com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.outstanding < 0) {
    com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.outstanding = 0;
  }
};
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.getOutstandingCount = function() {
  return com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.outstanding;
};
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.hasNoOutstandingMessages = function() {
  return com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.getOutstandingCount() == 0;
};
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.setAttributesInChatTextArea = function(element) {
  com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.setEngaged();
  var cw = com.inq.flash.client.chatskins.SkinControl.getChatWindow();
  var div = window.document.createElement("DIV");
  var lineno = 0;
  var dirty = false;
  var elementID = null;
  var spanID = null;
  var p = element.parentNode;
  while (p != null) {
    if (p.tagName == "SPAN") {
      break;
    }
    p = p.parentNode;
  }
  if (p != null) {
    elementID = p.id;
    try {
      while (true) {
        var html = null;
        try {
          html = cw.getTranscriptLine(lineno);
        } catch (e) {
          if (js.Boot.__instanceof(e, Error)) {
            html = null;
          } else {
            throw e;
          }
        }
        if (html == null) {
          break;
        }
        div.innerHTML = html;
        var elements = div.getElementsByTagName("SPAN");
        if (elements.length > 0) {
          var _g1 = 0, _g = elements.length;
          while (_g1 < _g) {
            var indx = _g1++;
            var el = elements[indx];
            if (el.id != elementID) {
              continue;
            }
            if (el.innerHTML == p.innerHTML) {
              return;
            }
            el.innerHTML = p.innerHTML;
            cw.replaceTranscriptLine(lineno, div.innerHTML);
            return;
          }
        }
        ++lineno;
      }
    } catch (e) {
      haxe.Log.trace("Error: " + Std.string(e) + "\nLine number is " + lineno, {fileName:"ChatAutomatonRequestElementSettingHandler.hx", lineNumber:184, className:"com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler", methodName:"setAttributesInChatTextArea", customParams:["error"]});
    }
  }
};
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.setEngaged = function() {
  if (com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler._engaged) {
    return;
  }
  com.inq.flash.client.control.Incrementality.onEngaged();
  com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler._engaged = true;
};
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.prototype.processMessage = function(message) {
  com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler._engaged = true;
  if ("1" != message.getProperty(com.inq.flash.client.data.MessageFields.KEY_REPLAY)) {
    com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.decrementOutstandingCount();
    return;
  }
  var elementID = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_ID);
  var attributeName = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_TYPE);
  var attributeValue = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_STATE);
  com.inq.flash.client.chatskins.SkinControl.executeAfter(function() {
    return window.document.getElementsByName(elementID).length > 0;
  }, function() {
    com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.setAttribute(elementID, attributeName, attributeValue);
  }, "ChatAutomatonRequestElementSettingHandler.setAttribute");
};
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.prototype.REPLACE_STRING = null;
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.prototype.chat = null;
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler;
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler.outstanding = 0;
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestElementSettingHandler._engaged = false;
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHAT_AUTOMATON_REQUEST);
  this.REPLACE_STRING = "_REPLACE_";
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler"] = com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatAutomatonRequestMessageHandler"];
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler.onChange = function(name) {
  var elements = window.document.getElementsByName(name);
  if (elements.length > 0) {
    var el = elements[elements.length - 1];
    switch(el.type) {
      case "checkbox":
        try {
          com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendInputState(name, "CHECKED", el.checked ? "CHECKED" : "null", true);
        } catch (e) {
        }
        break;
    }
  }
  return false;
};
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler.prototype.processMessage = function(message) {
  var agentName = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_MSG_AGENT_ALIAS);
  com.inq.flash.client.control.Incrementality.onAgentMsg();
  var chatText = com.inq.flash.messagingframework.StringUtils.decodeStringFromMessage(message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_DATA));
  var divId = "automation_" + (new Date).getTime();
  var msgData = 'this, { divId: "' + divId + '"';
  if (message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_TYPE) != null) {
    if (msgData.length > 0) {
      msgData += ", ";
    }
    msgData += 'type : "' + message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_TYPE) + '"';
  }
  var automatonId = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_ID);
  if (automatonId != null) {
    if (msgData.length > 0) {
      msgData += ", ";
    }
    msgData += 'id : "' + automatonId + '"';
    var auxParams = com.inq.flash.client.control.FlashPeer.getSurveyAuxParams();
    if (auxParams == null) {
      auxParams = {};
    }
    auxParams["Auto"] = true;
    var automatonList = auxParams["automatonList"];
    var automatonArray;
    if (automatonList == null) {
      automatonArray = new Array;
    } else {
      automatonArray = automatonList.split(",");
    }
    var isIdPresent = false;
    var _g = 0;
    while (_g < automatonArray.length) {
      var id = automatonArray[_g];
      ++_g;
      if (id == automatonId) {
        isIdPresent = true;
        break;
      }
    }
    if (!isIdPresent) {
      automatonArray[automatonArray.length] = automatonId;
    }
    auxParams["automatonList"] = automatonArray.join(",");
    com.inq.flash.client.control.FlashPeer.setSurveyAuxParams(auxParams);
  }
  if (message.getProperty(com.inq.flash.client.data.MessageFields.KEY_DT_QUESTION) != null) {
    if (msgData.length > 0) {
      msgData += ", ";
    }
    msgData += "loggedQuestion : " + com.inq.utils.StringUtil.toJsonString(message.getProperty(com.inq.flash.client.data.MessageFields.KEY_DT_QUESTION));
  }
  if (message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_STATE) != null) {
    if (msgData.length > 0) {
      msgData += ", ";
    }
    msgData += "state : " + com.inq.utils.StringUtil.toJsonString(message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_STATE));
  }
  if (message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_DATA_MODEL) != null) {
    if (msgData.length > 0) {
      msgData += ", ";
    }
    msgData += "model : " + message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_DATA_MODEL);
  }
  msgData += "}";
  chatText = chatText.split(this.REPLACE_STRING).join(com.inq.utils.StringUtil.htmlAttrEscape(msgData));
  var outText = "<span id='" + divId + "' >" + chatText + "</span>";
  var tmpDiv = document.createElement("DIV");
  tmpDiv.innerHTML = outText;
  var items = tmpDiv.getElementsByTagName("INPUT");
  var _g1 = 0, _g = items.length;
  while (_g1 < _g) {
    var ix = _g1++;
    var name = items[ix].name;
    if (name == null || name == "") {
      continue;
    }
    var onchange = 'inqFrame.com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler.onChange("' + name + '");';
    var el = items[ix];
    items[ix].setAttribute(el.type == "checkbox" ? "onclick" : "onchange", onchange);
  }
  outText = tmpDiv.innerHTML;
  var position = -1;
  var regexP = new EReg("<\\s*P\\b\\s*[^>]*>", "ig");
  var regexPEnd = new EReg("<\\s*/P\\s*>", "ig");
  outText = regexP.replace(outText, "<br/><br/>");
  outText = regexPEnd.replace(outText, "");
  this.getController().appendReceivedText(outText, agentName != null ? agentName : "", position);
};
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler.prototype.REPLACE_STRING = null;
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler.prototype.chat = null;
com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatAutomatonRequestMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatCobrowseMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHAT_COBROWSE);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatCobrowseMessageHandler"] = com.inq.flash.client.control.messagehandlers.ChatCobrowseMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatCobrowseMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatCobrowseMessageHandler"];
com.inq.flash.client.control.messagehandlers.ChatCobrowseMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatCobrowseMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatCobrowseMessageHandler.prototype.executeCobrowseInvite = function(message, agentName, chatText) {
  com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow(agentName, chatText, com.inq.flash.client.chatskins.ChatTextArea.AGENT, -1);
  var replay = "" + message.getProperty(com.inq.flash.client.data.MessageFields.KEY_REPLAY);
  if (replay != "1") {
    com.inq.flash.client.control.MinimizeManager.lastAgentMessage(chatText);
  }
};
com.inq.flash.client.control.messagehandlers.ChatCobrowseMessageHandler.prototype.executeCobrowseTest = function(message, agentName, cobrowseEvent) {
  var perfomanceTestResult = false;
  if (Inq["CBC"]) {
    perfomanceTestResult = Inq["CBC"].performanceTest();
  }
  if (perfomanceTestResult) {
    com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessageQuietly(com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseTestSuccess, cobrowseEvent);
  } else {
    com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendCoBrowseMessageQuietly(com.inq.flash.client.chatskins.CoBrowseMgr.cobrowseTestFail, cobrowseEvent);
  }
};
com.inq.flash.client.control.messagehandlers.ChatCobrowseMessageHandler.prototype.processMessage = function(message) {
  var chatText = com.inq.flash.messagingframework.StringUtils.decodeStringFromMessage(message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_DATA));
  var agentName = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_MESSAGE_AGENT_ALIAS);
  var quiet = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_MESSAGE_CUSTOMER_QUIET);
  if (agentName != null) {
    var cobrowseEvent = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT);
    if (com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_AGENT_COBROWSE_END != cobrowseEvent) {
      if (com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_AGENT_COBROWSE_SENT_INVITE == cobrowseEvent) {
        if (!com.inq.flash.client.control.FlashPeer.isCobrowseEnagaged()) {
          this.executeCobrowseInvite(message, agentName, chatText);
        }
      }
      if (com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_AGENT_COBROWSE_SENT_SHARED_INVITE == cobrowseEvent) {
        if (!com.inq.flash.client.control.FlashPeer.isCobrowseSharedControl()) {
          this.executeCobrowseInvite(message, agentName, chatText);
        }
      }
      if (com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_AGENT_COBROWSE_SENT_INVITE_TEST == cobrowseEvent && "1" != message.getProperty(com.inq.flash.client.data.MessageFields.KEY_REPLAY)) {
        if (!com.inq.flash.client.control.FlashPeer.isCobrowseEnagaged()) {
          this.executeCobrowseTest(message, agentName, cobrowseEvent);
        }
      }
      if (com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_AGENT_COBROWSE_SENT_SHARED_INVITE_TEST == cobrowseEvent && "1" != message.getProperty(com.inq.flash.client.data.MessageFields.KEY_REPLAY)) {
        if (!com.inq.flash.client.control.FlashPeer.isCobrowseSharedControl()) {
          this.executeCobrowseTest(message, agentName, cobrowseEvent);
        }
      }
    }
  } else {
    if (chatText === com.inq.flash.client.chatskins.CoBrowseMgr.customerAcceptsCobrowse || chatText === com.inq.flash.client.chatskins.CoBrowseMgr.customerAcceptsSharedControl) {
      com.inq.flash.client.chatskins.CoBrowseMgr.ariaCobStart();
    } else {
      com.inq.flash.client.chatskins.CoBrowseMgr.ariaCobEnd();
    }
    if (!quiet) {
      com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow("", chatText, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, -1);
    } else {
      try {
        com.inq.flash.client.chatskins.FormMgr.updateFormTimeExecutor(com.inq.flash.client.chatskins.SkinControl.cw);
      } catch (e) {
        haxe.Log.trace("ChatCobrowseMessageHandler.processMessage: ERROR - during execution of com.inq.flash.client.chatskins.FormMgr.updateFormTimeExecutor");
      }
    }
  }
};
com.inq.flash.client.control.messagehandlers.ChatCobrowseMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatCobrowseMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatCommunicationMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatCommunicationMessageHandler"] = com.inq.flash.client.control.messagehandlers.ChatCommunicationMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatCommunicationMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatCommunicationMessageHandler"];
com.inq.flash.client.control.messagehandlers.ChatCommunicationMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatCommunicationMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatCommunicationMessageHandler.prototype.processMessage = function(message) {
  var agentName = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_MESSAGE_AGENT_ALIAS);
  var clientName = com.inq.flash.client.control.FlashVars.getCustomerName();
  var chatTextKey = message.getMessageType() == com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_OUTCOME ? com.inq.flash.client.data.MessageFields.KEY_CLIENT_OUTCOME_DATA : com.inq.flash.client.data.MessageFields.KEY_CHAT_DATA;
  var chatText = com.inq.flash.messagingframework.StringUtils.decodeStringFromMessage(message.getProperty(chatTextKey));
  chatText = com.inq.flash.client.chatskins.SkinControl.checkForGoToPersistentChatMsg(chatText);
  var agentId = "" + message.getProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_ID);
  if (agentName == null) {
    agentName = com.inq.flash.client.control.FlashVars.getFlashVars().agentName;
  }
  if (agentId != null && agentId != "undefined" && (chatText.indexOf("http:") >= 0 || chatText.indexOf("https:") >= 0) && chatText.indexOf("href=") == -1) {
    var rex = /https?:\/\/[-\w.]+(:\d+)?(\/([-\w.,;/?:@&=+$%#!~*'()]*(\?\S+)?)?)?/g;
    chatText = chatText.replace(rex, '<a href="$&" target="_blank">$&</a>');
  }
  if (message.getMessageType() == com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_QUEUE) {
    agentId = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_ALIAS);
    var useAgentAlias = com.inq.utils.Util.getConfig("useAgentAlias", false);
    if (useAgentAlias == true && com.inq.flash.client.control.FlashVars.getValue("overrideAgentAlias") != "true") {
      var defaultAgentAlias = com.inq.utils.Util.getConfig("defaultAgentAlias", "&nbsp;");
      agentName = defaultAgentAlias;
    }
  } else {
    if (agentId == "undefined" || agentId == "null") {
      agentId = null;
    }
  }
  var replay = null;
  replay = "" + message.getProperty(com.inq.flash.client.data.MessageFields.KEY_REPLAY);
  replay = replay == "undefined" || replay == "null" ? null : replay;
  if (replay == "1" && message.getMessageType() != com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_QUEUE) {
    com.inq.flash.client.control.messagehandlers.NeedWaitHandler.incrementCounter();
  }
  var position = -1;
  var sPosition = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_LINE_NR);
  if (null != sPosition) {
    position = Std.parseInt(sPosition);
  }
  if (message.getMessageType() != com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_OPENER && agentId != null && replay == null) {
    if (message.getMessageType() == com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION) {
      com.inq.flash.client.control.Incrementality.onInteracted();
      com.inq.flash.client.control.Incrementality.onAgentMsg();
    }
    com.inq.flash.client.chatskins.FocusMonitor.startTitlebarFlash();
    com.inq.flash.client.control.MinimizeManager.lastAgentMessage(chatText);
    com.inq.flash.client.chatskins.SndMgr.PlaySound();
  }
  if (replay != null && agentId != null) {
    com.inq.flash.client.control.MinimizeManager.displayAgentMessageAndCount(chatText);
  }
  var senderName;
  if (message.getProperty(com.inq.flash.client.data.MessageFields.FORM_DATA) == null) {
    senderName = agentId != null || message.getMessageType() == com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_OUTCOME ? agentName : clientName;
  } else {
    senderName = "";
  }
  if (message.getMessageType() == com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_OUTCOME && (position == null || position == -1) && chatText) {
    com.inq.flash.client.chatskins.SkinControl.AddOpenerToChatWindow(senderName, chatText, com.inq.flash.client.chatskins.ChatTextArea.AGENT, position);
  } else {
    this.getController().appendReceivedText(chatText, senderName, position);
  }
  if (message.getProperty(com.inq.flash.client.data.MessageFields.FORM_DATA) != null) {
    this.getController().updateFormFields(message.getProperty(com.inq.flash.client.data.MessageFields.FORM_DATA), message.getProperty(com.inq.flash.client.data.MessageFields.FORM_NAME), message.getProperty(com.inq.flash.client.data.MessageFields.FORM_ID));
  }
};
com.inq.flash.client.control.messagehandlers.ChatCommunicationMessageHandler.prototype.chat = null;
com.inq.flash.client.control.messagehandlers.ChatCommunicationMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatCommunicationMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatDeniedMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHAT_DENIED);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatDeniedMessageHandler"] = com.inq.flash.client.control.messagehandlers.ChatDeniedMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatDeniedMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatDeniedMessageHandler"];
com.inq.flash.client.control.messagehandlers.ChatDeniedMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatDeniedMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatDeniedMessageHandler.prototype.processMessage = function(message) {
  var deniedMessageLabel = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_TY_LABEL);
  if (deniedMessageLabel != null && deniedMessageLabel != "undefined" && deniedMessageLabel != "null") {
    com.inq.flash.client.chatskins.SkinControl.tYImageLabel = deniedMessageLabel;
  }
  this.getController().shutdown();
  com.inq.flash.client.chatskins.SkinControl.doThankYou();
  com.inq.flash.client.chatskins.SkinControl.sendEventToAllAutomatons("onChatDenied");
  this.getController().disable();
};
com.inq.flash.client.control.messagehandlers.ChatDeniedMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatDeniedMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatExitMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHAT_EXIT);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatExitMessageHandler"] = com.inq.flash.client.control.messagehandlers.ChatExitMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatExitMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatExitMessageHandler"];
com.inq.flash.client.control.messagehandlers.ChatExitMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatExitMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatExitMessageHandler.prototype.processMessage = function(message) {
  var cid = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_ID);
  var tYLabel = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_TY_LABEL);
  if (tYLabel != null && tYLabel != "undefined" && tYLabel != "null") {
    com.inq.flash.client.chatskins.SkinControl.tYImageLabel = tYLabel;
  } else {
    com.inq.flash.client.chatskins.SkinControl.tYImageLabel = "";
  }
  if (cid.length == 0) {
  } else {
    com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry = 0;
    this.getController().shutdown();
    this.getController().disable();
    com.inq.flash.client.control.MinimizeManager.onClose();
  }
};
com.inq.flash.client.control.messagehandlers.ChatExitMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatExitMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatNeedWaitMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHAT_WAIT);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatNeedWaitMessageHandler"] = com.inq.flash.client.control.messagehandlers.ChatNeedWaitMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatNeedWaitMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatNeedWaitMessageHandler"];
com.inq.flash.client.control.messagehandlers.ChatNeedWaitMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatNeedWaitMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatNeedWaitMessageHandler.prototype.processMessage = function(message) {
  this.getController().setQueueMessages(true);
};
com.inq.flash.client.control.messagehandlers.ChatNeedWaitMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatNeedWaitMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatSystemMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHAT_SYSTEM);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatSystemMessageHandler"] = com.inq.flash.client.control.messagehandlers.ChatSystemMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatSystemMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatSystemMessageHandler"];
com.inq.flash.client.control.messagehandlers.ChatSystemMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatSystemMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatSystemMessageHandler.prototype.processMessage = function(message) {
  var textToDisplay = message.getProperty("client.display.text");
  if (textToDisplay != null) {
    var displayText = StringTools.trim(textToDisplay);
    var messageParts = displayText.split("&nl;");
    var _g1 = 0, _g = messageParts.length;
    while (_g1 < _g) {
      var i = _g1++;
      com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow("", messageParts[i], com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, -1);
    }
  } else {
    var chatText = com.inq.flash.messagingframework.StringUtils.decodeStringFromMessage(message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_DATA));
    com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow("bob", chatText, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, -1);
  }
};
com.inq.flash.client.control.messagehandlers.ChatSystemMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatSystemMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatroomMemberConnectedMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHATROOM_MEMBER_CONNECTED);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatroomMemberConnectedMessageHandler"] = com.inq.flash.client.control.messagehandlers.ChatroomMemberConnectedMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatroomMemberConnectedMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatroomMemberConnectedMessageHandler"];
com.inq.flash.client.control.messagehandlers.ChatroomMemberConnectedMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatroomMemberConnectedMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatroomMemberConnectedMessageHandler.prototype.processMessage = function(message) {
  if (message.getProperty(com.inq.flash.client.data.MessageFields.KEY_OWNER) == com.inq.flash.client.data.MessageFields.DATA_TRUE && "1" != message.getProperty(com.inq.flash.client.data.MessageFields.KEY_REPLAY)) {
    var cobrowseEnabled = com.inq.flash.messagingframework.StringUtils.getBooleanValue(message.getProperty(com.inq.flash.client.data.MessageFields.KEY_COBROWSE_ENABLED));
    var agentID = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHATROOM_MEMBER_ID);
    com.inq.flash.client.chatskins.SkinControl.setAgentConfig(agentID, com.inq.utils.EventDataUtils.fromMessage(message), cobrowseEnabled, message.getProperty(com.inq.flash.client.data.MessageFields.KEY_BUSINESS_UNIT_ID), message.getProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_GROUP_ID));
  }
  var isReassignMode = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_IS_REASSIGNMENT_MODE);
  var tcMode = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_TC_MODE);
  if (tcMode == com.inq.flash.client.data.MessageFields.DATA_TRANSFER || tcMode == com.inq.flash.client.data.MessageFields.DATA_CONFERENCE && message.getProperty(com.inq.flash.client.data.MessageFields.KEY_SCREENING) == com.inq.flash.client.data.MessageFields.DATA_FALSE || isReassignMode == com.inq.flash.client.data.MessageFields.DATA_TRUE) {
    com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow("", message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CLIENT_DISPLAY_TEXT), com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, -1);
  }
};
com.inq.flash.client.control.messagehandlers.ChatroomMemberConnectedMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatroomMemberConnectedMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatroomMemberLostMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHATROOM_MEMBER_LOST);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatroomMemberLostMessageHandler"] = com.inq.flash.client.control.messagehandlers.ChatroomMemberLostMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatroomMemberLostMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatroomMemberLostMessageHandler"];
com.inq.flash.client.control.messagehandlers.ChatroomMemberLostMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatroomMemberLostMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatroomMemberLostMessageHandler.prototype.processMessage = function(message) {
  var textToDisplay = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CLIENT_DISPLAY_TEXT);
  if (textToDisplay != null) {
    var displayText = StringTools.trim(textToDisplay);
    var messageParts = displayText.split("&nl;");
    var _g1 = 0, _g = messageParts.length;
    while (_g1 < _g) {
      var i = _g1++;
      com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow("", messageParts[i], com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, -1);
    }
  }
};
com.inq.flash.client.control.messagehandlers.ChatroomMemberLostMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatroomMemberLostMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatroomOwnerTransferResponseMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_OWNER_TRANSFER_RESPONSE);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatroomOwnerTransferResponseMessageHandler"] = com.inq.flash.client.control.messagehandlers.ChatroomOwnerTransferResponseMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatroomOwnerTransferResponseMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatroomOwnerTransferResponseMessageHandler"];
com.inq.flash.client.control.messagehandlers.ChatroomOwnerTransferResponseMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatroomOwnerTransferResponseMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatroomOwnerTransferResponseMessageHandler.prototype.processMessage = function(message) {
  var newOwner = StringTools.trim(message.getProperty("owner.id"));
  if (newOwner != null && newOwner != "undefined" && newOwner != "null") {
    var cobrowseEnabled = com.inq.flash.messagingframework.StringUtils.getBooleanValue(message.getProperty(com.inq.flash.client.data.MessageFields.KEY_COBROWSE_ENABLED));
    com.inq.flash.client.chatskins.SkinControl.setAgentConfig(newOwner, com.inq.utils.EventDataUtils.fromMessage(message), cobrowseEnabled, message.getProperty(com.inq.flash.client.data.MessageFields.KEY_BUSINESS_UNIT_ID), message.getProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_GROUP_ID));
  }
};
com.inq.flash.client.control.messagehandlers.ChatroomOwnerTransferResponseMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatroomOwnerTransferResponseMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatroomTransferResponse = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHAT_TRANSFER_RESPONSE);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatroomTransferResponse"] = com.inq.flash.client.control.messagehandlers.ChatroomTransferResponse;
com.inq.flash.client.control.messagehandlers.ChatroomTransferResponse.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatroomTransferResponse"];
com.inq.flash.client.control.messagehandlers.ChatroomTransferResponse.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatroomTransferResponse.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatroomTransferResponse.prototype.processMessage = function(message) {
  var displayText = StringTools.trim(message.getProperty("client.display.text"));
  var messageParts = displayText.split("&nl;");
  var _g1 = 0, _g = messageParts.length;
  var agentID = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_ID);
  while (_g1 < _g) {
    var i = _g1++;
    com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow("", messageParts[i], com.inq.flash.client.chatskins.ChatTextArea.SYSTEM, -1);
  }
  if (agentID != null && agentID != "") {
    var cobrowseEnabled = com.inq.flash.messagingframework.StringUtils.getBooleanValue(message.getProperty(com.inq.flash.client.data.MessageFields.KEY_COBROWSE_ENABLED));
    this.getController().setAgentConfig(agentID, com.inq.utils.EventDataUtils.fromMessage(message), cobrowseEnabled, message.getProperty(com.inq.flash.client.data.MessageFields.KEY_BUSINESS_UNIT_ID), message.getProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_GROUP_ID));
  }
};
com.inq.flash.client.control.messagehandlers.ChatroomTransferResponse.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatroomTransferResponse;
com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CLIENT_COMMAND);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler"] = com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler;
com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ClientCommandMessageHandler"];
com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler.prototype.processMessage = function(message) {
  var replay = "1" == message.getProperty(com.inq.flash.client.data.MessageFields.KEY_REPLAY);
  var cmd = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CLIENT_CMD_PARAM);
  if (cmd == null || cmd == "") {
    cmd = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CLIENT_COMMAND_PARAM);
  }
  var pageURL = com.inq.flash.messagingframework.StringUtils.decodeStringFromMessage(cmd);
  var sTarget = "inqNewWindow";
  var indx;
  var newCmdPr = "client_command";
  var match;
  if (pageURL == "hide_input") {
    com.inq.flash.client.chatskins.SkinControl.hideInput();
    return;
  }
  match = pageURL.match(/^show_input(\|(.*))?/);
  var isShowInput = match != null ? true : false;
  if (isShowInput) {
    com.inq.flash.client.chatskins.SkinControl.showInput(match[2] == "true");
    return;
  }
  if (replay) {
    return;
  }
  if (pageURL.indexOf(newCmdPr) == 0) {
    com.inq.flash.client.chatskins.SkinControl.executeCustomCommand(HxOverrides.substr(pageURL, newCmdPr.length, null));
    return;
  }
  if ((indx = pageURL.indexOf(" to ")) >= 0) {
    sTarget = HxOverrides.substr(pageURL, indx + 4, null);
    pageURL = HxOverrides.substr(pageURL, 0, indx);
    haxe.Log.trace("doPushPage: extract target " + sTarget, {fileName:"ClientCommandMessageHandler.hx", lineNumber:66, className:"com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler", methodName:"processMessage"});
  }
  if (pageURL == "xform") {
    var paramPair = sTarget.split("|");
    var namePair = paramPair[0].split(".");
    var url = paramPair.length > 1 ? paramPair[1].split(com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler.XFORM_SERVER_PLACEHOLDER).join(com.inq.flash.client.control.FlashPeer.getXFormsDomain()) : null;
    var initiatorType = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_INITIATOR);
    var initiatorId = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_INITIATOR_ID);
    var initiator = {type:initiatorType, id:initiatorId};
    com.inq.flash.client.control.MinimizeManager.lastAgentMessage(null);
    switch(namePair[0]) {
      case "shrink":
        com.inq.flash.client.control.XFrameWorker.shrink(namePair[1]);
        break;
      case "grow":
        com.inq.flash.client.control.XFrameWorker.grow(namePair[1], url, null, initiator);
        break;
      case "hide":
        com.inq.flash.client.control.XFrameWorker.hideLayer(namePair[1]);
        break;
      case "show":
        com.inq.flash.client.control.XFrameWorker.showLayer(namePair[1], null, url, null, null, initiator);
        break;
    }
    return;
  }
  if (sTarget == "skin") {
    com.inq.ui.SkinLoader.LoadNewSkin(pageURL);
    return;
  }
  if (sTarget == "forward") {
    if (!com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
      return;
    }
    var win = window.parent;
    if (win.focus) {
      win.focus();
    }
    return;
  }
  if (pageURL.indexOf("goToPersistentChat") >= 0) {
    haxe.Log.trace("CHAT: Frameset Push, closing socket", {fileName:"ClientCommandMessageHandler.hx", lineNumber:107, className:"com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler", methodName:"processMessage"});
    this.getController().shutdownQuietly();
  }
  if (com.inq.flash.client.control.FlashVars.getFlashVars().persistentFrame) {
    com.inq.flash.client.chatskins.SkinControl.PushToFrameset(pageURL, sTarget);
  } else {
    if ("_inqPersistentChat" == sTarget) {
      com.inq.flash.client.chatskins.SkinControl.enablePersistentChatButtonAndEstablishUrl(pageURL);
    } else {
      if ("flashForm" == sTarget) {
        com.inq.flash.client.chatskins.SkinControl.PushEmbeddedForm();
      } else {
        if ("block-service" == sTarget) {
          com.inq.flash.client.chatskins.SkinControl.blockService(pageURL);
        } else {
          com.inq.flash.client.chatskins.SkinControl.PushToFrameset(pageURL, sTarget);
        }
      }
    }
  }
};
com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler.prototype.chat = null;
com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler;
com.inq.flash.client.control.messagehandlers.ClientCommandMessageHandler.XFORM_SERVER_PLACEHOLDER = "${xformsServerUrl}";
com.inq.flash.client.control.messagehandlers.ContinueTransitionHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CONTINUE_TRANSITION);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ContinueTransitionHandler"] = com.inq.flash.client.control.messagehandlers.ContinueTransitionHandler;
com.inq.flash.client.control.messagehandlers.ContinueTransitionHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ContinueTransitionHandler"];
com.inq.flash.client.control.messagehandlers.ContinueTransitionHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ContinueTransitionHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ContinueTransitionHandler.prototype.processMessage = function(message) {
  this.getController().acknowledgeChatActive();
};
com.inq.flash.client.control.messagehandlers.ContinueTransitionHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ContinueTransitionHandler;
com.inq.flash.client.control.messagehandlers.ErrorHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_ERROR);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ErrorHandler"] = com.inq.flash.client.control.messagehandlers.ErrorHandler;
com.inq.flash.client.control.messagehandlers.ErrorHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ErrorHandler"];
com.inq.flash.client.control.messagehandlers.ErrorHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ErrorHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ErrorHandler.prototype.processMessage = function(message) {
  haxe.Log.trace("MessageHandler: " + message.getProperty(com.inq.flash.client.data.MessageFields.KEY_ERROR_MSG), {fileName:"ErrorHandler.hx", lineNumber:15, className:"com.inq.flash.client.control.messagehandlers.ErrorHandler", methodName:"processMessage"});
};
com.inq.flash.client.control.messagehandlers.ErrorHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ErrorHandler;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHAT_NEED_WAIT);
  haxe.Log.trace("NeedWaitHandler.Constructor", {fileName:"NeedWaitHandler.hx", lineNumber:103, className:"com.inq.flash.client.control.messagehandlers.NeedWaitHandler", methodName:"new"});
  com.inq.flash.client.control.messagehandlers.NeedWaitHandler.cntMessage = -1;
  this.needwaitMessageFirstDefault = com.inq.utils.Util.getConfig("needwaitMessageFirstDefault", com.inq.flash.client.control.messagehandlers.NeedWaitHandler.NEED_WAIT_MESSAGE_FIRST_DEFAULT);
  this.needwaitMessageDefault = com.inq.utils.Util.getConfig("needwaitMessageDefault", com.inq.flash.client.control.messagehandlers.NeedWaitHandler.NEED_WAIT_MESSAGE_DEFAULT);
  this.needwaitMessageNoAgentAvailable = com.inq.utils.Util.getConfig("needwaitMessageNoAgentAvailable", com.inq.flash.client.control.messagehandlers.NeedWaitHandler.NEED_WAIT_MESSAGE_DEFAULT);
  this.needwaitMessageFirstNoAgentAvailable = com.inq.utils.Util.getConfig("needwaitMessageFirstNoAgentAvailable", com.inq.flash.client.control.messagehandlers.NeedWaitHandler.NEED_WAIT_MESSAGE_DEFAULT);
  this.needwaitMessageFirst = com.inq.utils.Util.getConfig("needwaitMessageFirst", null);
  this.needwaitMessageFirstSoon = com.inq.utils.Util.getConfig("needwaitMessageFirstSoon", null);
  this.needwaitMessageFirstMinutes = com.inq.utils.Util.getConfig("needwaitMessageFirstMinutes", null);
  this.needwaitMessageFirstSeconds = com.inq.utils.Util.getConfig("needwaitMessageFirstSeconds", null);
  this.needwaitMessage = com.inq.utils.Util.getConfig("needwaitMessage", null);
  this.needwaitMessageMinutes = com.inq.utils.Util.getConfig("needwaitMessageMinutes", null);
  this.needwaitMessageSeconds = com.inq.utils.Util.getConfig("needwaitMessageSeconds", null);
  this.needwaitMessageSoon = com.inq.utils.Util.getConfig("needwaitMessageSoon", null);
  this.useMinuteForWaitMessageSoon = com.inq.utils.Util.getConfig("useMinuteForWaitMessageSoon", false);
  this.needwaitSoon = com.inq.utils.Util.getConfig("needwaitSoon", 10);
  this.needwaitPeriod = com.inq.utils.Util.getConfig("needwaitPeriod", null);
  this.needWaitSequenceMessages = com.inq.utils.Util.getConfig("needWaitSequenceMessages", null);
  this.processingBehavior = com.inq.utils.Util.getConfig("processingBehavior", com.inq.flash.client.control.messagehandlers.NeedWaitHandler.LEGACY_MESSAGE_PROCESSING);
  this.queueMessagingHandler = new com.inq.flash.client.control.messagehandlers.QueueMessagingHandler(this);
  this.isEnabled = this.queueMessagingHandler.isEnabled || this.needwaitMessageFirst != null && this.needwaitMessage != null && this.needwaitPeriod != null;
  this.needwaitThreshold = this.needwaitPeriod != null ? this.needwaitPeriod * 10 - 1 : 10;
  if (this.processingBehavior == com.inq.flash.client.control.messagehandlers.NeedWaitHandler.SEQUENCE_MESSAGE_PROCESSING) {
    this.isEnabled = true;
    com.inq.flash.client.control.messagehandlers.NeedWaitHandler.initNeedWaitSequenceList(this.needWaitSequenceMessages);
  }
  this.lastProcessedWaitMsg = (new Date).getTime();
  haxe.Log.trace("NeedWaitHandler isEnabled = " + Std.string(this.isEnabled), {fileName:"NeedWaitHandler.hx", lineNumber:136, className:"com.inq.flash.client.control.messagehandlers.NeedWaitHandler", methodName:"new"});
};
$hxClasses.extend(com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler, com.inq.flash.client.control.messagehandlers.NeedWaitHandler, "com.inq.flash.client.control.messagehandlers.NeedWaitHandler");
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.cntMessage = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.needWaitSequenceList = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.incrementCounter = function() {
  com.inq.flash.client.control.messagehandlers.NeedWaitHandler.cntMessage++;
};
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.initNeedWaitSequenceList = function(messages) {
  haxe.Log.trace("start initNeedWaitSequenceList function", {fileName:"NeedWaitHandler.hx", lineNumber:369, className:"com.inq.flash.client.control.messagehandlers.NeedWaitHandler", methodName:"initNeedWaitSequenceList"});
  var arrayMessages = messages.split("//");
  com.inq.flash.client.control.messagehandlers.NeedWaitHandler.needWaitSequenceList = new Array;
  var _g = 0;
  while (_g < arrayMessages.length) {
    var message = arrayMessages[_g];
    ++_g;
    var parts = message.split("|");
    haxe.Log.trace("Part s of message" + messages, {fileName:"NeedWaitHandler.hx", lineNumber:376, className:"com.inq.flash.client.control.messagehandlers.NeedWaitHandler", methodName:"initNeedWaitSequenceList"});
    var sequenceMessage = new com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage;
    sequenceMessage.setNeedWaitMessage(parts[0]);
    sequenceMessage.setCountHit(Std.parseInt(parts[1]));
    sequenceMessage.setTimeShift(Std.parseFloat(parts[2]));
    com.inq.flash.client.control.messagehandlers.NeedWaitHandler.needWaitSequenceList.push(sequenceMessage);
  }
};
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.sendQueueingMsgString = function(agentName, queueingMsgString) {
  var position = com.inq.flash.client.chatskins.SkinControl.AddTranscriptItemToChatWindow(agentName, queueingMsgString, com.inq.flash.client.chatskins.ChatTextArea.AGENT, -1);
  com.inq.flash.client.chatskins.SkinControl.getApplicationController().sendQueueingText(queueingMsgString, position, agentName);
};
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.sequenceMessageProcessing = function(agentName) {
  var queueingMsgString = com.inq.flash.client.control.messagehandlers.NeedWaitHandler.NEED_WAIT_MESSAGE_DEFAULT;
  var now = (new Date).getTime();
  var period = (now - this.lastProcessedWaitMsg) / 1E3;
  if (period < com.inq.flash.client.control.messagehandlers.NeedWaitHandler.needWaitSequenceList[0].getTimeShift()) {
    haxe.Log.trace("NeedWaitHandler (sequenceMessageProcessing): period is to short " + period, {fileName:"NeedWaitHandler.hx", lineNumber:323, className:"com.inq.flash.client.control.messagehandlers.NeedWaitHandler", methodName:"sequenceMessageProcessing"});
  } else {
    haxe.Log.trace("NeedWaitHandler (sequenceMessageProcessing): message period is: " + period + " secs", {fileName:"NeedWaitHandler.hx", lineNumber:327, className:"com.inq.flash.client.control.messagehandlers.NeedWaitHandler", methodName:"sequenceMessageProcessing"});
    if (com.inq.flash.client.control.messagehandlers.NeedWaitHandler.needWaitSequenceList[0].getCountHit() > 1) {
      com.inq.flash.client.control.messagehandlers.NeedWaitHandler.needWaitSequenceList[0].decrCount();
      queueingMsgString = com.inq.flash.client.control.messagehandlers.NeedWaitHandler.needWaitSequenceList[0].getNeedWaitMessage();
    } else {
      if (com.inq.flash.client.control.messagehandlers.NeedWaitHandler.needWaitSequenceList[0].getCountHit() == 1) {
        queueingMsgString = com.inq.flash.client.control.messagehandlers.NeedWaitHandler.needWaitSequenceList.shift().getNeedWaitMessage();
      } else {
        if (com.inq.flash.client.control.messagehandlers.NeedWaitHandler.needWaitSequenceList[0].getCountHit() == -1) {
          queueingMsgString = com.inq.flash.client.control.messagehandlers.NeedWaitHandler.needWaitSequenceList[0].getNeedWaitMessage();
        }
      }
    }
    this.sendQueueingMsgString(agentName, queueingMsgString);
    this.lastProcessedWaitMsg = now;
  }
};
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.legacyMessageProcessing = function(message, agentName) {
  var queueingMsgString;
  if (++com.inq.flash.client.control.messagehandlers.NeedWaitHandler.cntMessage == 0) {
    queueingMsgString = this.substituteWaitTime(message, this.needwaitMessageFirst, this.needwaitMessageFirstSoon, this.needwaitMessageFirstSeconds, this.needwaitMessageFirstMinutes, this.needwaitMessageFirstNoAgentAvailable, this.needwaitMessageFirstDefault);
    queueingMsgString = this.substituteQPFromMessage(queueingMsgString, this.needwaitMessageFirstDefault, message);
    this.sendQueueingMsgString(agentName, queueingMsgString);
    this.lastProcessedWaitMsg = (new Date).getTime();
    return;
  }
  var now = (new Date).getTime();
  var period = (now - this.lastProcessedWaitMsg) / 1E3;
  if (period < 3) {
    haxe.Log.trace("NeedWaitHandler: period is to short " + period, {fileName:"NeedWaitHandler.hx", lineNumber:297, className:"com.inq.flash.client.control.messagehandlers.NeedWaitHandler", methodName:"legacyMessageProcessing"});
  } else {
    if (period >= this.needwaitThreshold) {
      haxe.Log.trace("NeedWaitHandler: message period is: " + period + " secs", {fileName:"NeedWaitHandler.hx", lineNumber:301, className:"com.inq.flash.client.control.messagehandlers.NeedWaitHandler", methodName:"legacyMessageProcessing"});
      queueingMsgString = this.substituteWaitTime(message, this.needwaitMessage, this.needwaitMessageSoon, this.needwaitMessageSeconds, this.needwaitMessageMinutes, this.needwaitMessageNoAgentAvailable, this.needwaitMessageDefault);
      queueingMsgString = this.substituteQPFromMessage(queueingMsgString, this.needwaitMessageDefault, message);
      this.sendQueueingMsgString(agentName, queueingMsgString);
      this.lastProcessedWaitMsg = now;
      ++com.inq.flash.client.control.messagehandlers.NeedWaitHandler.cntMessage;
    }
  }
};
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.substituteWaitTime = function(message, waitText, waitTextSoon, waitTextSeconds, waitTextMinutes, waitTextNoAgentsAvailable, waitTextDefault) {
  var queueingMsgString = waitText;
  var waitTime = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_WAIT_EST_ASSIGN_TIME);
  if (waitTime != null) {
    var milliSecondWaitTime = Std.parseInt(waitTime);
    var secondWaitTime = Math.floor(milliSecondWaitTime / 1E3);
    var minutes = Math.floor(secondWaitTime / 60);
    var seconds = Math.floor(secondWaitTime % 60);
    var minutesOnly = Math.round(secondWaitTime / 60);
    var secondsOnly = Math.floor(secondWaitTime);
    if (minutes > 0 && waitTextMinutes != null) {
      queueingMsgString = this.substituteText(waitTextMinutes, waitTextDefault, com.inq.flash.client.control.messagehandlers.NeedWaitHandler.MINUTE_WAIT_TIME, "" + minutes);
      queueingMsgString = this.substituteText(queueingMsgString, waitTextDefault, com.inq.flash.client.control.messagehandlers.NeedWaitHandler.MINUTES_ONLY_WAIT_TIME, "" + minutesOnly);
      queueingMsgString = this.substituteText(queueingMsgString, waitTextDefault, com.inq.flash.client.control.messagehandlers.NeedWaitHandler.SECOND_WAIT_TIME, "" + seconds);
    } else {
      if (milliSecondWaitTime == -1 && waitTextNoAgentsAvailable != null) {
        queueingMsgString = waitTextNoAgentsAvailable;
      } else {
        if ((secondWaitTime < this.needwaitSoon || milliSecondWaitTime == 0) && waitTextSoon != null) {
          if (this.useMinuteForWaitMessageSoon) {
            queueingMsgString = this.substituteText(waitTextSoon, waitTextDefault, com.inq.flash.client.control.messagehandlers.NeedWaitHandler.MINUTES_ONLY_WAIT_TIME, "" + minutes);
          } else {
            queueingMsgString = this.substituteText(waitTextSoon, waitTextDefault, com.inq.flash.client.control.messagehandlers.NeedWaitHandler.SECOND_WAIT_TIME, "" + seconds);
          }
        } else {
          if (waitTextSeconds != null) {
            queueingMsgString = this.substituteText(waitTextSeconds, waitTextDefault, com.inq.flash.client.control.messagehandlers.NeedWaitHandler.SECOND_WAIT_TIME, "" + seconds);
            queueingMsgString = this.substituteText(queueingMsgString, waitTextDefault, com.inq.flash.client.control.messagehandlers.NeedWaitHandler.SECONDS_ONLY_WAIT_TIME, "" + secondsOnly);
          } else {
            queueingMsgString = this.substituteText(waitText, waitTextDefault, com.inq.flash.client.control.messagehandlers.NeedWaitHandler.SECOND_WAIT_TIME, "" + seconds);
            queueingMsgString = this.substituteText(queueingMsgString, waitTextDefault, com.inq.flash.client.control.messagehandlers.NeedWaitHandler.SECONDS_ONLY_WAIT_TIME, "" + secondsOnly);
            queueingMsgString = this.substituteText(queueingMsgString, waitTextDefault, com.inq.flash.client.control.messagehandlers.NeedWaitHandler.MINUTE_WAIT_TIME, "" + minutes);
            queueingMsgString = this.substituteText(queueingMsgString, waitTextDefault, com.inq.flash.client.control.messagehandlers.NeedWaitHandler.MINUTES_ONLY_WAIT_TIME, "" + minutesOnly);
          }
        }
      }
    }
  }
  return queueingMsgString;
};
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.substituteText = function(text, defaultText, pattern, substitute) {
  if (substitute == null) {
    return defaultText;
  } else {
    return text.replace(pattern, substitute);
  }
};
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.substituteTextFromMessage = function(text, defaultText, pattern, message, property) {
  var substitute = message.getProperty(property);
  return this.substituteText(text, defaultText, pattern, substitute);
};
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.substituteQPFromMessage = function(text, defaultText, message) {
  return this.substituteText(text, defaultText, com.inq.flash.client.control.messagehandlers.NeedWaitHandler.QUEUE_POSITION, message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_WAIT_POS));
};
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.processMessage = function(message) {
  haxe.Log.trace("Processing message behavior: " + this.processingBehavior, {fileName:"NeedWaitHandler.hx", lineNumber:146, className:"com.inq.flash.client.control.messagehandlers.NeedWaitHandler", methodName:"processMessage"});
  var params = {queuePos:message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_WAIT_POS), queueTime:message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_WAIT_EST_ASSIGN_TIME)};
  com.inq.flash.client.chatskins.SkinControl.sendEventToAllAutomatons("onChatInQueue", params);
  if (!this.isEnabled) {
    return;
  }
  if (com.inq.flash.client.chatskins.SkinControl.getApplicationController().isConnectionAccepted()) {
    haxe.Log.trace("NeedWaitHandler: already connected", {fileName:"NeedWaitHandler.hx", lineNumber:149, className:"com.inq.flash.client.control.messagehandlers.NeedWaitHandler", methodName:"processMessage"});
  }
  var agentName = com.inq.flash.client.control.FlashVars.getFlashVars().agentName;
  var useAgentAlias = com.inq.utils.Util.getConfig("useAgentAlias", false);
  if (useAgentAlias == true && com.inq.flash.client.control.FlashVars.getValue("overrideAgentAlias") != "true") {
    var defaultAgentAlias = com.inq.utils.Util.getConfig("defaultAgentAlias", "&nbsp;");
    agentName = defaultAgentAlias;
  }
  if (this.queueMessagingHandler.isEnabled) {
    var queueingMsg = this.queueMessagingHandler.msgProcessing(message);
    if (queueingMsg) {
      this.sendQueueingMsgString(agentName, queueingMsg);
      this.lastProcessedWaitMsg = (new Date).getTime();
    }
  } else {
    if (this.processingBehavior == com.inq.flash.client.control.messagehandlers.NeedWaitHandler.LEGACY_MESSAGE_PROCESSING) {
      this.legacyMessageProcessing(message, agentName);
    } else {
      if (this.processingBehavior == com.inq.flash.client.control.messagehandlers.NeedWaitHandler.SEQUENCE_MESSAGE_PROCESSING) {
        this.sequenceMessageProcessing(agentName);
      }
    }
  }
};
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.processingBehavior = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needWaitSequenceMessages = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.isEnabled = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitThreshold = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitPeriod = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitSoon = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitMessageMinutes = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitMessageSeconds = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitMessageSoon = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.useMinuteForWaitMessageSoon = false;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitMessage = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitMessageFirstMinutes = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitMessageFirstSeconds = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitMessageFirstSoon = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitMessageFirst = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitMessageNoAgentAvailable = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitMessageFirstNoAgentAvailable = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitMessageDefault = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.needwaitMessageFirstDefault = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.lastProcessedWaitMsg = null;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.NeedWaitHandler;
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.NEED_WAIT_MESSAGE_FIRST_DEFAULT = "Sorry for the delay, please wait";
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.NEED_WAIT_MESSAGE_DEFAULT = "Still busy, please wait";
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.APPX_WAIT_TIME = "<<APPX-WAIT-TIME>>";
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.MINUTE_WAIT_TIME = "<<MINUTE-WAIT-TIME>>";
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.MINUTES_ONLY_WAIT_TIME = "<<MINUTES-ONLY-WAIT-TIME>>";
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.SECOND_WAIT_TIME = "<<SECOND-WAIT-TIME>>";
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.SECONDS_ONLY_WAIT_TIME = "<<SECONDS-ONLY-WAIT-TIME>>";
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.QUEUE_POSITION = "<<QUEUE-POSITION>>";
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.NEED_WAIT_SEQUENCE_MESSAGE = "Still busy, please wait | 1 |30";
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.LEGACY_MESSAGE_PROCESSING = "LEGACY_MESSAGE_PROCESSING";
com.inq.flash.client.control.messagehandlers.NeedWaitHandler.SEQUENCE_MESSAGE_PROCESSING = "SEQUENCE_MESSAGE_PROCESSING";
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage = function() {
};
$hxClasses["com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage"] = com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage;
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "NeedWaitSequenceMessage"];
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage.prototype.decrCount = function() {
  var _g = this, _g1 = _g.getCountHit();
  _g.setCountHit(_g1 - 1);
  _g1;
};
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage.prototype.incrCount = function() {
  var _g = this, _g1 = _g.getCountHit();
  _g.setCountHit(_g1 + 1);
  _g1;
};
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage.prototype.getCountHit = function() {
  return this.countHit;
};
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage.prototype.setCountHit = function(count) {
  return this.countHit = count;
};
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage.prototype.getTimeShift = function() {
  return this.timeShift;
};
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage.prototype.setTimeShift = function(time) {
  return this.timeShift = time;
};
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage.prototype.getNeedWaitMessage = function() {
  return this.needWaitMessage;
};
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage.prototype.setNeedWaitMessage = function(message) {
  return this.needWaitMessage = message;
};
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage.prototype.countHit = null;
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage.prototype.timeShift = null;
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage.prototype.needWaitMessage = null;
com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage.prototype.__class__ = com.inq.flash.client.control.messagehandlers.NeedWaitSequenceMessage;
com.inq.flash.client.control.messagehandlers.QueueMessagingHandler = function(parent) {
  this.needWaitHandler = parent;
  this.spec = this.getQueueMessagingSpec();
  this.isEnabled = !!this.spec;
  this.setId = null;
  this.set = null;
  this.isChangedSet = false;
  this.msgId = 0;
  this.msgCount = 0;
  this.lastProcessedWaitMsg = (new Date).getTime();
};
$hxClasses.registerClass(com.inq.flash.client.control.messagehandlers.QueueMessagingHandler, "com.inq.flash.client.control.messagehandlers.QueueMessagingHandler");
com.inq.flash.client.control.messagehandlers.QueueMessagingHandler.prototype.getQueueMessagingSpec = function() {
  var qmSpec = com.inq.flash.client.control.FlashPeer.getQueueMessagingSpec();
  if (qmSpec) {
    var ewtKey = this.QMS.EWT_REMAINING_IN_SECONDS;
    qmSpec[this.QMS.SETS].sort(function(a, b) {
      return a[ewtKey] - b[ewtKey];
    });
  }
  return qmSpec;
};
com.inq.flash.client.control.messagehandlers.QueueMessagingHandler.prototype.msgProcessing = function(message) {
  var queueingMsg;
  var waitTime = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_WAIT_EST_ASSIGN_TIME);
  var milliSecondWaitTime = Std.parseInt(waitTime);
  var secondWaitTime = Math.floor(waitTime / 1E3);
  if (waitTime != null) {
    if (milliSecondWaitTime == -1) {
      if (this.isThresholdAgentOfflineMsg()) {
        queueingMsg = this.spec[this.QMS.AGENT_OFFLINE_MSG] || this.needWaitHandler.needwaitMessageDefault;
        this.lastProcessedWaitMsg = (new Date).getTime();
      }
    } else {
      this.updateActiveSet(secondWaitTime);
      if (this.isThresholdMsg()) {
        this.lastProcessedWaitMsg = (new Date).getTime();
        queueingMsg = this.substituteEWT(this.set[this.QMS.MESSAGES][this.msgId][this.QMS.MESSAGE_TEXT], milliSecondWaitTime);
        queueingMsg = this.substituteQPFromMessage(queueingMsg, message);
        this.updateMsgOrder();
      }
    }
  }
  return queueingMsg;
};
com.inq.flash.client.control.messagehandlers.QueueMessagingHandler.prototype.updateActiveSet = function(waitTime) {
  var sets = this.spec[this.QMS.SETS];
  var currentSetId = 0;
  for (var i = 1;i < sets.length;i++) {
    if (waitTime <= sets[i][this.QMS.EWT_REMAINING_IN_SECONDS]) {
      currentSetId = i;
      break;
    }
  }
  this.isChangedSet = this.setId != currentSetId;
  if (this.isChangedSet) {
    this.setId = currentSetId;
    this.set = sets[currentSetId];
    this.msgId = 0;
    this.msgCount = 0;
    var moKey = this.QMS.MESSAGE_ORDER;
    this.set[this.QMS.MESSAGES].sort(function(a, b) {
      return a[moKey] - b[moKey];
    });
  }
};
com.inq.flash.client.control.messagehandlers.QueueMessagingHandler.prototype.isThresholdAgentOfflineMsg = function() {
  var period = ((new Date).getTime() - this.lastProcessedWaitMsg) / 1E3;
  return period >= Std.parseInt(this.spec[this.QMS.AGENT_OFFLINE_REPEAT_INTERVAL]);
};
com.inq.flash.client.control.messagehandlers.QueueMessagingHandler.prototype.isThresholdMsg = function() {
  var period = ((new Date).getTime() - this.lastProcessedWaitMsg) / 1E3;
  return period >= Std.parseInt(this.set[this.QMS.MESSAGES][this.msgId][this.QMS.REPEAT_INTERVAL_IN_SECONDS]);
};
com.inq.flash.client.control.messagehandlers.QueueMessagingHandler.prototype.substituteEWT = function(waitText, waitTime) {
  if (waitText == "") {
    return waitText;
  }
  var queueingMsg = waitText;
  var secondWaitTime = Math.floor(waitTime / 1E3);
  var timeMap = {MINUTES:Math.floor(secondWaitTime / 60), MINUTES_ONLY:Math.round(secondWaitTime / 60), SECONDS:Math.floor(secondWaitTime % 60), SECONDS_ONLY:Math.floor(secondWaitTime)};
  timeMap.FULL = timeMap.MINUTES + (timeMap.SECONDS < 10 ? ":0" : ":") + timeMap.SECONDS;
  for (var k in this.EWT) {
    queueingMsg = this.substituteText(queueingMsg, this.EWT[k], timeMap[k]);
  }
  return queueingMsg;
};
com.inq.flash.client.control.messagehandlers.QueueMessagingHandler.prototype.updateMsgOrder = function() {
  this.msgCount++;
  var msgCollection = this.set[this.QMS.MESSAGES];
  if (msgCollection[this.msgId][this.QMS.DISPLAY_TIMES] <= this.msgCount) {
    if (msgCollection[this.msgId + 1]) {
      this.msgId++;
      this.msgCount = 0;
    } else {
      haxe.Log.trace("[QueueMessagingHandler] Was reached the threshold of the queue messaging. There is no next message. Message count: " + this.msgCount);
    }
  }
};
com.inq.flash.client.control.messagehandlers.QueueMessagingHandler.prototype.substituteQPFromMessage = function(text, message) {
  return this.needWaitHandler.substituteQPFromMessage(text, this.needWaitHandler.needwaitMessageDefault, message);
};
com.inq.flash.client.control.messagehandlers.QueueMessagingHandler.prototype.substituteText = function(text, pattern, substitute) {
  return this.needWaitHandler.substituteText(text, this.needWaitHandler.needwaitMessageDefault, pattern, substitute);
};
com.inq.flash.client.control.messagehandlers.QueueMessagingHandler.prototype.EWT = {FULL:"<<FULL>>", MINUTES:"<<MINUTES>>", MINUTES_ONLY:"<<MINUTES-ONLY>>", SECONDS:"<<SECONDS>>", SECONDS_ONLY:"<<SECONDS-ONLY>>"};
com.inq.flash.client.control.messagehandlers.QueueMessagingHandler.prototype.QMS = {AGENT_OFFLINE_MSG:"aom", AGENT_OFFLINE_REPEAT_INTERVAL:"aori", SETS:"qms", EWT_REMAINING_IN_SECONDS:"ewt", MESSAGES:"qm", MESSAGE_ORDER:"mo", MESSAGE_TEXT:"mt", DISPLAY_TIMES:"dt", REPEAT_INTERVAL_IN_SECONDS:"ris"};
com.inq.flash.client.control.messagehandlers.PersistentActiveHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_GET_PERSISTENT_DOMAIN);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.PersistentActiveHandler"] = com.inq.flash.client.control.messagehandlers.PersistentActiveHandler;
com.inq.flash.client.control.messagehandlers.PersistentActiveHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "PersistentActiveHandler"];
com.inq.flash.client.control.messagehandlers.PersistentActiveHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.PersistentActiveHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.PersistentActiveHandler.prototype.processMessage = function(message) {
  var replay = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_REPLAY);
  if (!com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
    return;
  }
  if (replay == null || replay != "1") {
    var xfr = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_DATA);
    if (xfr == null || xfr.length == 0) {
      var protoDomain = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_PROTODOMAIN);
      var messageCnt = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CLIENT_MESSAGE_COUNT);
      this.getController().acknowledgeChatPersistent(protoDomain, messageCnt);
    } else {
      xfr = com.inq.flash.messagingframework.StringUtils.decodeStringFromMessage(xfr);
      var loc = window.parent.location.href;
      if (loc != xfr) {
        com.inq.flash.client.chatskins.SkinControl.noUnload();
        try {
          window.parent.opener = null;
        } catch (e) {
          if (js.Boot.__instanceof(e, Error)) {
            haxe.Log.trace("PersistentActiveHandler.processMessage: " + Std.string(e), {fileName:"PersistentActiveHandler.hx", lineNumber:35, className:"com.inq.flash.client.control.messagehandlers.PersistentActiveHandler", methodName:"processMessage"});
          } else {
            throw e;
          }
        }
        window.parent.location.href = xfr;
      }
    }
  } else {
    haxe.Log.trace("replay", {fileName:"PersistentActiveHandler.hx", lineNumber:42, className:"com.inq.flash.client.control.messagehandlers.PersistentActiveHandler", methodName:"processMessage"});
  }
};
com.inq.flash.client.control.messagehandlers.PersistentActiveHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.PersistentActiveHandler;
com.inq.flash.client.control.messagehandlers.TypingActivityHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHAT_ACTIVITY);
  this.sAgentIsTyping = com.inq.utils.Util.getConfig("sAgentIsTyping", "Agent is typing");
  this.sAgentStoppedTyping = com.inq.utils.Util.getConfig("sAgentStoppedTyping", "Agent stopped typing");
};
$hxClasses["com.inq.flash.client.control.messagehandlers.TypingActivityHandler"] = com.inq.flash.client.control.messagehandlers.TypingActivityHandler;
com.inq.flash.client.control.messagehandlers.TypingActivityHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "TypingActivityHandler"];
com.inq.flash.client.control.messagehandlers.TypingActivityHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.TypingActivityHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.TypingActivityHandler.prototype.processMessage = function(message) {
  switch(message.getProperty(com.inq.flash.client.data.MessageFields.KEY_TYPE)) {
    case com.inq.flash.client.data.MessageFields.ACTIVITY_AGENT_TYPING:
      var cw = com.inq.flash.client.chatskins.SkinControl.cw;
      if (null != cw) {
        cw.addTranscript("", this.sAgentIsTyping, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM_STATUS, -1);
      }
      break;
    case com.inq.flash.client.data.MessageFields.ACTIVITY_AGENT_STOPPED_TYPING:
      var cw = com.inq.flash.client.chatskins.SkinControl.cw;
      if (null != cw) {
        cw.addTranscript("", this.sAgentStoppedTyping, com.inq.flash.client.chatskins.ChatTextArea.SYSTEM_STATUS, -1);
      }
      break;
    case com.inq.flash.client.data.MessageFields.ACTIVITY_CUSTOMER_TYPING:
      com.inq.flash.client.chatskins.SkinControl.userWasTyping = true;
      break;
    case com.inq.flash.client.data.MessageFields.ACTIVITY_CUSTOMER_STOPS_TYPING:
      com.inq.flash.client.chatskins.SkinControl.userWasTyping = false;
      break;
  }
};
com.inq.flash.client.control.messagehandlers.TypingActivityHandler.prototype.sAgentIsTyping = null;
com.inq.flash.client.control.messagehandlers.TypingActivityHandler.prototype.sAgentStoppedTyping = null;
com.inq.flash.client.control.messagehandlers.TypingActivityHandler.prototype.isEnabled = null;
com.inq.flash.client.control.messagehandlers.TypingActivityHandler.prototype.needwaitPeriod = null;
com.inq.flash.client.control.messagehandlers.TypingActivityHandler.prototype.needwaitMessage = null;
com.inq.flash.client.control.messagehandlers.TypingActivityHandler.prototype.needwaitMessageFirst = null;
com.inq.flash.client.control.messagehandlers.TypingActivityHandler.prototype.cntMessage = null;
com.inq.flash.client.control.messagehandlers.TypingActivityHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.TypingActivityHandler;
com.inq.flash.client.control.messagehandlers.CommandMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_COMMAND);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.CommandMessageHandler"] = com.inq.flash.client.control.messagehandlers.CommandMessageHandler;
com.inq.flash.client.control.messagehandlers.CommandMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "CommandMessageHandler"];
com.inq.flash.client.control.messagehandlers.CommandMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.CommandMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.CommandMessageHandler.prototype.processMessage = function(message) {
  message.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CLIENT_COMMAND);
  this.getController().processMessage(message);
};
com.inq.flash.client.control.messagehandlers.CommandMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.CommandMessageHandler;
com.inq.flash.client.control.messagehandlers.StateChangeMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_STATE_CHANGE);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.StateChangeMessageHandler"] = com.inq.flash.client.control.messagehandlers.StateChangeMessageHandler;
com.inq.flash.client.control.messagehandlers.StateChangeMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "StateChangeMessageHandler"];
com.inq.flash.client.control.messagehandlers.StateChangeMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.StateChangeMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.StateChangeMessageHandler.prototype.processMessage = function(message) {
  var oldType = message.getMessageType();
  var state = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_STATE);
  switch(state) {
    case com.inq.flash.client.data.MessageFields.DATA_STATE_QUEUED:
      message.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_NEED_WAIT);
      break;
    case com.inq.flash.client.data.MessageFields.DATA_STATE_ASSIGNED:
      message.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_ACCEPTED);
      break;
    case com.inq.flash.client.data.MessageFields.DATA_STATE_CLOSED:
      message.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_EXIT);
      break;
    case com.inq.flash.client.data.MessageFields.DATA_STATE_TRANSFER:
      message.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_TRANSFER_RESPONSE);
      break;
    case com.inq.flash.client.data.MessageFields.DATA_STATE_CONFERENCE:
      message.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_OWNER_TRANSFER_RESPONSE);
      break;
    case com.inq.flash.client.data.MessageFields.DATA_STATE_AGENT_IS_TYPING:
      message.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_ACTIVITY);
      break;
  }
  if (oldType != message.getMessageType()) {
    this.getController().processMessage(message);
  }
};
com.inq.flash.client.control.messagehandlers.StateChangeMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.StateChangeMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatLineMessageHandler = function() {
  com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.call(this, com.inq.flash.client.data.MessageFields.TYPE_CHATLINE);
};
$hxClasses["com.inq.flash.client.control.messagehandlers.ChatLineMessageHandler"] = com.inq.flash.client.control.messagehandlers.ChatLineMessageHandler;
com.inq.flash.client.control.messagehandlers.ChatLineMessageHandler.__name__ = ["com", "inq", "flash", "client", "control", "messagehandlers", "ChatLineMessageHandler"];
com.inq.flash.client.control.messagehandlers.ChatLineMessageHandler.__super__ = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler;
for (var k in com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype) {
  com.inq.flash.client.control.messagehandlers.ChatLineMessageHandler.prototype[k] = com.inq.flash.client.control.messagehandlers.ClientApplicationMessageHandler.prototype[k];
}
com.inq.flash.client.control.messagehandlers.ChatLineMessageHandler.prototype.processMessage = function(message) {
  message.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION);
  this.getController().processMessage(message);
};
com.inq.flash.client.control.messagehandlers.ChatLineMessageHandler.prototype.__class__ = com.inq.flash.client.control.messagehandlers.ChatLineMessageHandler;
com.inq.flash.messagingframework.Message = function() {
  this.data = {};
  this.data[com.inq.flash.client.data.MessageFields.KEY_VERSION] = "0.05";
  this.postSend = false;
  this.initialDataIndex = 0;
};
$hxClasses["com.inq.flash.messagingframework.Message"] = com.inq.flash.messagingframework.Message;
com.inq.flash.messagingframework.Message.__name__ = ["com", "inq", "flash", "messagingframework", "Message"];
com.inq.flash.messagingframework.Message.prototype.isPostSend = function() {
  return this.postSend;
};
com.inq.flash.messagingframework.Message.prototype.setPostSend = function(isPost) {
  this.postSend = isPost;
};
com.inq.flash.messagingframework.Message.prototype.toString = function() {
  var dataString = "";
  var keyz = Reflect.fields(this.data);
  var _g1 = 0, _g = keyz.length;
  while (_g1 < _g) {
    var ix = _g1++;
    var key = keyz[ix];
    if (key != "") {
      var item = "";
      try {
        var valu = this.data[key];
        if (valu != null) {
          item = key + "=" + this.data[key] + "\n";
        }
      } catch (e) {
        if (js.Boot.__instanceof(e, Error)) {
          haxe.Log.trace("bad key: " + key + " error: " + Std.string(e), {fileName:"Message.js", lineNumber:79, className:"com.inq.flash.messagingframework.Message", methodName:"toString"});
        } else {
          throw e;
        }
      }
      dataString += item;
    }
  }
  dataString += "\n";
  return dataString;
};
com.inq.flash.messagingframework.Message.prototype.serializeToURL = function() {
  var dataString = "";
  for (var key in this.data) {
    if (key) {
      var valu = this.data[key];
      if (valu != null && typeof valu != "function") {
        var item = "&" + key + "=" + encodeURIComponent(valu.toString());
        dataString += item;
      }
    }
  }
  return dataString;
};
com.inq.flash.messagingframework.Message.prototype.getMessageType = function() {
  return this.data[com.inq.flash.client.data.MessageFields.KEY_MESSAGE_TYPE];
};
com.inq.flash.messagingframework.Message.prototype.getProperty = function(name) {
  return this.data[name];
};
com.inq.flash.messagingframework.Message.prototype.addProperty = function(name, value) {
  this.data[name] = value;
};
com.inq.flash.messagingframework.Message.prototype.nextInitialDataIndex = function() {
  return this.initialDataIndex++;
};
com.inq.flash.messagingframework.Message.prototype.setData = function(fields) {
  if (typeof fields == "object") {
    this.data = fields;
  } else {
    if (typeof fields == "string") {
      var lines = fields.split("\n");
      for (var i = 0;i < lines.length;i++) {
        this.addProperty(lines[i].slice(0, lines[i].indexOf("=")), lines[i].slice(lines[i].indexOf("=") + 1));
      }
    }
  }
};
com.inq.flash.messagingframework.Message.prototype.setMessageType = function(messageType) {
  this.data[com.inq.flash.client.data.MessageFields.KEY_MESSAGE_TYPE] = messageType;
};
com.inq.flash.messagingframework.Message.prototype.postSend = null;
com.inq.flash.messagingframework.Message.prototype.data = null;
com.inq.flash.messagingframework.Message.prototype.initialDataIndex = null;
com.inq.flash.messagingframework.Message.prototype.__class__ = com.inq.flash.messagingframework.Message;
if (!com.inq.flash.client.data) {
  com.inq.flash.client.data = {};
}
;com.inq.flash.client.data.ChatCommunicationMessage = function(chat, text) {
  com.inq.flash.messagingframework.Message.call(this);
  this.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION);
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_ID, chat.getChatID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_DATA, com.inq.flash.messagingframework.StringUtils.encodeStringForMessage(text));
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_RETURN_RECEIPT, "1");
};
$hxClasses["com.inq.flash.client.data.ChatCommunicationMessage"] = com.inq.flash.client.data.ChatCommunicationMessage;
com.inq.flash.client.data.ChatCommunicationMessage.__name__ = ["com", "inq", "flash", "client", "data", "ChatCommunicationMessage"];
com.inq.flash.client.data.ChatCommunicationMessage.__super__ = com.inq.flash.messagingframework.Message;
for (var k in com.inq.flash.messagingframework.Message.prototype) {
  com.inq.flash.client.data.ChatCommunicationMessage.prototype[k] = com.inq.flash.messagingframework.Message.prototype[k];
}
com.inq.flash.client.data.ChatCommunicationMessage.prototype.__class__ = com.inq.flash.client.data.ChatCommunicationMessage;
com.inq.flash.client.data.CallCommunicationMessage = function(chat, text) {
  com.inq.flash.client.data.ChatCommunicationMessage.call(this, chat, text);
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CALL_ENABLED, com.inq.flash.messagingframework.StringUtils.encodeStringForMessage("true"));
};
$hxClasses["com.inq.flash.client.data.CallCommunicationMessage"] = com.inq.flash.client.data.CallCommunicationMessage;
com.inq.flash.client.data.CallCommunicationMessage.__name__ = ["com", "inq", "flash", "client", "data", "CallCommunicationMessage"];
com.inq.flash.client.data.CallCommunicationMessage.__super__ = com.inq.flash.client.data.ChatCommunicationMessage;
for (var k in com.inq.flash.client.data.ChatCommunicationMessage.prototype) {
  com.inq.flash.client.data.CallCommunicationMessage.prototype[k] = com.inq.flash.client.data.ChatCommunicationMessage.prototype[k];
}
com.inq.flash.client.data.CallCommunicationMessage.prototype.__class__ = com.inq.flash.client.data.CallCommunicationMessage;
com.inq.flash.client.data.Chat = function() {
  this.transcript = new Array;
  this.chatID = com.inq.flash.client.control.FlashVars.getValue("chatID");
  this.siteID = com.inq.flash.client.control.FlashVars.getValue("siteID");
  this.channelID = com.inq.flash.client.control.FlashVars.getValue("businessUnitID");
  this.agentName = com.inq.flash.client.control.FlashVars.getValue("agentName") == null || com.inq.flash.client.control.FlashVars.getValue("agentName") == "null" || StringTools.trim(com.inq.flash.client.control.FlashVars.getValue("agentName")) == "" ? "Jessica" : com.inq.flash.client.control.FlashVars.getValue("agentName");
  this.scriptID = com.inq.flash.client.control.FlashVars.getValue("scriptID");
  this.chatTitle = com.inq.flash.client.control.FlashVars.getValue("chatTitle");
  this.brID = com.inq.flash.client.control.FlashVars.getValue("brID");
  this.agId = com.inq.flash.client.control.FlashVars.getValue("agID");
  this.uniqueAgentName = com.inq.flash.client.control.FlashVars.getValue("uniqueAgentName");
  this.language = com.inq.flash.client.control.FlashVars.getValue("language");
  this.launchPageMarker = com.inq.flash.client.control.FlashVars.getValue("launchPageMarker");
  this.launchPageId = com.inq.flash.client.control.FlashVars.getValue("launchPageId");
  this.launchType = com.inq.flash.client.control.FlashVars.getValue("launchType");
  this.deviceType = com.inq.flash.client.control.FlashVars.getValue("deviceType");
  this.browserType = com.inq.flash.client.control.FlashVars.getValue("browserType");
  this.browserVersion = com.inq.flash.client.control.FlashVars.getValue("browserVersion");
  this.operatingSystemType = com.inq.flash.client.control.FlashVars.getValue("operatingSystemType");
  this.incAssignmentID = com.inq.flash.client.control.FlashVars.getValue("incAssignmentID");
  this.sessionID = com.inq.flash.client.control.FlashVars.getValue("sessionID");
  this.thisCustomerID = com.inq.flash.client.control.FlashVars.getValue("customerID");
  this.queueThreshold = com.inq.flash.client.control.FlashVars.getValue("qt");
  this.thisParticipantName = com.inq.flash.client.control.FlashVars.getCustomerName();
  if (com.inq.flash.client.control.FlashVars.getValue("agentAttributes") != null) {
    this.agentAttributes = com.inq.flash.client.control.FlashVars.getValue("agentAttributes");
  }
  if (com.inq.flash.client.control.FlashVars.getValue("visitorAttributes") != null) {
    this.visitorAttributes = com.inq.flash.client.control.FlashVars.getValue("visitorAttributes");
  }
  if (com.inq.flash.client.control.FlashVars.getValue("ruleAttributes") != null) {
    this.ruleAttributes = com.inq.flash.client.control.FlashVars.getValue("ruleAttributes");
  }
  if (com.inq.flash.client.control.FlashVars.getValue("automatonId") != null) {
    this.automatonId = com.inq.flash.client.control.FlashVars.getValue("automatonId");
    this.automatonFields = com.inq.flash.client.control.FlashVars.getValue("automatonFields");
  }
  this.hasAuthorized = false;
};
$hxClasses["com.inq.flash.client.data.Chat"] = com.inq.flash.client.data.Chat;
com.inq.flash.client.data.Chat.__name__ = ["com", "inq", "flash", "client", "data", "Chat"];
com.inq.flash.client.data.Chat.prototype.setHasAuthorized = function(flag) {
  this.hasAuthorized = flag;
};
com.inq.flash.client.data.Chat.prototype.getHasAuthorized = function() {
  return this.hasAuthorized;
};
com.inq.flash.client.data.Chat.prototype.toString = function() {
  return "Chat[" + this.chatID + "]: site-" + this.siteID + ", chID-" + this.channelID + ", agentName-" + this.agentName + ", scriptID=" + this.scriptID + ", customerID-" + this.thisCustomerID + ", chatTitle-" + this.chatTitle + ", brID-" + this.brID;
};
com.inq.flash.client.data.Chat.prototype.addTextToTranscript = function(text, sender) {
  var entry = new com.inq.flash.messagingframework.TranscriptEntry;
  if (null != sender) {
    sender = "";
  }
  entry.setData(text);
  if (sender == "") {
    entry.setType("sent.message");
  } else {
    entry.setType("received.message");
    entry.setSender(sender);
  }
  this.transcript.push(entry);
};
com.inq.flash.client.data.Chat.prototype.setAutomatonId = function(id) {
  this.automatonId = id;
};
com.inq.flash.client.data.Chat.prototype.getAutomatonFields = function() {
  return this.automatonFields;
};
com.inq.flash.client.data.Chat.prototype.setRuleAttributes = function(attributes) {
  this.ruleAttributes = attributes;
};
com.inq.flash.client.data.Chat.prototype.setVisitorAttributes = function(attributes) {
  this.visitorAttributes = attributes;
};
com.inq.flash.client.data.Chat.prototype.setAgentAttributes = function(attributes) {
  this.agentAttributes = attributes;
};
com.inq.flash.client.data.Chat.prototype.getLanguage = function() {
  return this.language;
};
com.inq.flash.client.data.Chat.prototype.getOperatingSystemType = function() {
  return this.operatingSystemType;
};
com.inq.flash.client.data.Chat.prototype.getBrowserVersion = function() {
  return this.browserVersion;
};
com.inq.flash.client.data.Chat.prototype.getBrowserType = function() {
  return this.browserType;
};
com.inq.flash.client.data.Chat.prototype.getDeviceType = function() {
  return this.deviceType;
};
com.inq.flash.client.data.Chat.prototype.getLaunchType = function() {
  return this.launchType;
};
com.inq.flash.client.data.Chat.prototype.getLaunchPageMarker = function() {
  return this.launchPageMarker;
};
com.inq.flash.client.data.Chat.prototype.getLaunchPageId = function() {
  return this.launchPageId;
};
com.inq.flash.client.data.Chat.prototype.getBrID = function() {
  return this.brID;
};
com.inq.flash.client.data.Chat.prototype.setChannelID = function(id) {
  this.channelID = id;
};
com.inq.flash.client.data.Chat.prototype.setAgentGroupID = function(agId) {
  this.agId = agId;
};
com.inq.flash.client.data.Chat.prototype.getAgentGroupID = function() {
  return this.agId;
};
com.inq.flash.client.data.Chat.prototype.setPublicUserId = function(publicUserId) {
  this.publicUserId = publicUserId;
};
com.inq.flash.client.data.Chat.prototype.getPublicUserId = function() {
  return this.publicUserId;
};
com.inq.flash.client.data.Chat.prototype.getUniqueAgentName = function() {
  return this.uniqueAgentName;
};
com.inq.flash.client.data.Chat.prototype.getAutomatonId = function() {
  return this.automatonId;
};
com.inq.flash.client.data.Chat.prototype.getRuleAttributes = function() {
  return this.ruleAttributes;
};
com.inq.flash.client.data.Chat.prototype.getVisitorAttributes = function() {
  return this.visitorAttributes;
};
com.inq.flash.client.data.Chat.prototype.getAgentAttributes = function() {
  return this.agentAttributes;
};
com.inq.flash.client.data.Chat.prototype.getChannelID = function() {
  return this.channelID;
};
com.inq.flash.client.data.Chat.prototype.getChatID = function() {
  return this.chatID;
};
com.inq.flash.client.data.Chat.prototype.getCustomerID = function() {
  return this.thisCustomerID;
};
com.inq.flash.client.data.Chat.prototype.getSessionId = function() {
  return this.sessionID;
};
com.inq.flash.client.data.Chat.prototype.getIncAssignmentId = function() {
  return this.incAssignmentID;
};
com.inq.flash.client.data.Chat.prototype.getAgentName = function() {
  return this.agentName;
};
com.inq.flash.client.data.Chat.prototype.getScriptID = function() {
  return this.scriptID;
};
com.inq.flash.client.data.Chat.prototype.setScriptID = function(scriptID) {
  this.scriptID = scriptID;
};
com.inq.flash.client.data.Chat.prototype.getUsername = function() {
  return com.inq.flash.client.control.FlashVars.getCustomerName();
};
com.inq.flash.client.data.Chat.prototype.setUsername = function(userName) {
  this.thisParticipantName = userName;
};
com.inq.flash.client.data.Chat.prototype.getSiteID = function() {
  return this.siteID;
};
com.inq.flash.client.data.Chat.prototype.getChatTitle = function() {
  return this.chatTitle;
};
com.inq.flash.client.data.Chat.prototype.getQueueThreshold = function() {
  return this.queueThreshold;
};
com.inq.flash.client.data.Chat.prototype.hasAuthorized = null;
com.inq.flash.client.data.Chat.prototype.automatonId = null;
com.inq.flash.client.data.Chat.prototype.automatonFields = null;
com.inq.flash.client.data.Chat.prototype.ruleAttributes = null;
com.inq.flash.client.data.Chat.prototype.visitorAttributes = null;
com.inq.flash.client.data.Chat.prototype.agentAttributes = null;
com.inq.flash.client.data.Chat.prototype.transcript = null;
com.inq.flash.client.data.Chat.prototype.thisCustomerID = null;
com.inq.flash.client.data.Chat.prototype.thisParticipantName = null;
com.inq.flash.client.data.Chat.prototype.sessionID = null;
com.inq.flash.client.data.Chat.prototype.incAssignmentID = null;
com.inq.flash.client.data.Chat.prototype.operatingSystemType = null;
com.inq.flash.client.data.Chat.prototype.browserVersion = null;
com.inq.flash.client.data.Chat.prototype.browserType = null;
com.inq.flash.client.data.Chat.prototype.deviceType = null;
com.inq.flash.client.data.Chat.prototype.launchType = null;
com.inq.flash.client.data.Chat.prototype.launchPageMarker = null;
com.inq.flash.client.data.Chat.prototype.launchPageId = null;
com.inq.flash.client.data.Chat.prototype.brID = null;
com.inq.flash.client.data.Chat.prototype.chatTitle = null;
com.inq.flash.client.data.Chat.prototype.language = null;
com.inq.flash.client.data.Chat.prototype.siteID = null;
com.inq.flash.client.data.Chat.prototype.agentName = null;
com.inq.flash.client.data.Chat.prototype.scriptID = null;
com.inq.flash.client.data.Chat.prototype.channelID = null;
com.inq.flash.client.data.Chat.prototype.chatID = null;
com.inq.flash.client.data.Chat.prototype.agId = null;
com.inq.flash.client.data.Chat.prototype.queueThreshold = null;
com.inq.flash.client.data.Chat.prototype.publicUserId = null;
com.inq.flash.client.data.Chat.prototype.uniqueAgentName = null;
com.inq.flash.client.data.Chat.prototype.__class__ = com.inq.flash.client.data.Chat;
com.inq.flash.client.data.Chat.prototype.BEACON_ACTIVATE = "ACTIVATE";
com.inq.flash.client.data.Chat.prototype.BEACON_DEACTIVATE = "DEACTIVATE";
com.inq.flash.client.data.ChatActivityMessage = function(chat, activityType, text, returnReceipt) {
  com.inq.flash.messagingframework.Message.call(this);
  this.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_ACTIVITY);
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_ID, chat.getChatID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_TYPE, activityType);
  if (text != null) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_DATA, com.inq.flash.messagingframework.StringUtils.encodeStringForMessage(text));
  }
  if (returnReceipt === undefined) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_RETURN_RECEIPT, "1");
  }
};
$hxClasses["com.inq.flash.client.data.ChatActivityMessage"] = com.inq.flash.client.data.ChatActivityMessage;
com.inq.flash.client.data.ChatActivityMessage.__name__ = ["com", "inq", "flash", "client", "data", "ChatActivityMessage"];
com.inq.flash.client.data.ChatActivityMessage.__super__ = com.inq.flash.messagingframework.Message;
for (var k in com.inq.flash.messagingframework.Message.prototype) {
  com.inq.flash.client.data.ChatActivityMessage.prototype[k] = com.inq.flash.messagingframework.Message.prototype[k];
}
com.inq.flash.client.data.ChatActivityMessage.prototype.__class__ = com.inq.flash.client.data.ChatActivityMessage;
com.inq.flash.client.data.ChatAutomatonElementSetMessage = function(chat, itemName, attributeName, state) {
  com.inq.flash.messagingframework.Message.call(this);
  this.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_AUTOMATON_SETTING);
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_RETURN_RECEIPT, "1");
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_ID, chat.getChatID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_STATE, com.inq.flash.messagingframework.StringUtils.encodeStringForMessage(state));
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_ID, com.inq.flash.messagingframework.StringUtils.encodeStringForMessage(itemName));
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_TYPE, com.inq.flash.messagingframework.StringUtils.encodeStringForMessage(attributeName));
};
$hxClasses["com.inq.flash.client.data.ChatAutomatonElementSetMessage"] = com.inq.flash.client.data.ChatAutomatonElementSetMessage;
com.inq.flash.client.data.ChatAutomatonElementSetMessage.__name__ = ["com", "inq", "flash", "client", "data", "ChatAutomatonElementSetMessage"];
com.inq.flash.client.data.ChatAutomatonElementSetMessage.__super__ = com.inq.flash.messagingframework.Message;
for (var k in com.inq.flash.messagingframework.Message.prototype) {
  com.inq.flash.client.data.ChatAutomatonElementSetMessage.prototype[k] = com.inq.flash.messagingframework.Message.prototype[k];
}
com.inq.flash.client.data.ChatAutomatonElementSetMessage.prototype.__class__ = com.inq.flash.client.data.ChatAutomatonElementSetMessage;
com.inq.flash.client.data.ChatAutomatonResponseMessage = function(chat, eventName, data) {
  com.inq.flash.messagingframework.Message.call(this);
  this.setPostSend(true);
  this.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_AUTOMATON_RESPONSE);
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_ID, chat.getChatID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_INC_ASSIGNMENT_ID, chat.getIncAssignmentId());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_SESSION_ID, chat.getSessionId());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_CUSTOMER_ID, chat.getCustomerID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_BUSINESS_UNIT_ID, chat.getChannelID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_SITE_ID, chat.getSiteID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_EVENT, com.inq.flash.messagingframework.StringUtils.encodeStringForMessage(eventName));
  if (data) {
    if (data.type) {
      this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_TYPE, data.type);
    }
    if (data.id) {
      this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_ID, data.id);
    }
    if (data.state) {
      this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_STATE, data.state);
    }
    if (data.model) {
      this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_DATA_MODEL, data.model);
    }
    if (data.loggedQuestion) {
      this.addProperty(com.inq.flash.client.data.MessageFields.KEY_DT_QUESTION, data.loggedQuestion);
    }
    if (data.answerText) {
      this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_DATA, data.answerText);
    }
  }
};
$hxClasses["com.inq.flash.client.data.ChatAutomatonResponseMessage"] = com.inq.flash.client.data.ChatAutomatonResponseMessage;
com.inq.flash.client.data.ChatAutomatonResponseMessage.__name__ = ["com", "inq", "flash", "client", "data", "ChatAutomatonResponseMessage"];
com.inq.flash.client.data.ChatAutomatonResponseMessage.__super__ = com.inq.flash.messagingframework.Message;
for (var k in com.inq.flash.messagingframework.Message.prototype) {
  com.inq.flash.client.data.ChatAutomatonResponseMessage.prototype[k] = com.inq.flash.messagingframework.Message.prototype[k];
}
com.inq.flash.client.data.ChatAutomatonResponseMessage.prototype.__class__ = com.inq.flash.client.data.ChatAutomatonResponseMessage;
com.inq.flash.client.data.ChatCommunicationCobrowseMessage = function(chat, text) {
  com.inq.flash.client.data.ChatCommunicationMessage.call(this, chat, text);
  this.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_COBROWSE);
};
$hxClasses["com.inq.flash.client.data.ChatCommunicationCobrowseMessage"] = com.inq.flash.client.data.ChatCommunicationCobrowseMessage;
com.inq.flash.client.data.ChatCommunicationCobrowseMessage.__name__ = ["com", "inq", "flash", "client", "data", "ChatCommunicationCobrowseMessage"];
com.inq.flash.client.data.ChatCommunicationCobrowseMessage.__super__ = com.inq.flash.client.data.ChatCommunicationMessage;
for (var k in com.inq.flash.client.data.ChatCommunicationMessage.prototype) {
  com.inq.flash.client.data.ChatCommunicationCobrowseMessage.prototype[k] = com.inq.flash.client.data.ChatCommunicationMessage.prototype[k];
}
com.inq.flash.client.data.ChatCommunicationCobrowseMessage.prototype.__class__ = com.inq.flash.client.data.ChatCommunicationCobrowseMessage;
com.inq.flash.client.data.ChatCommunicationOpenerMessage = function(chat, text, agentAlias) {
  com.inq.flash.client.data.ChatCommunicationMessage.call(this, chat, text);
  this.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_OPENER);
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_RETURN_RECEIPT, "0");
  if (agentAlias != null) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_ALIAS, agentAlias);
  }
};
$hxClasses["com.inq.flash.client.data.ChatCommunicationOpenerMessage"] = com.inq.flash.client.data.ChatCommunicationOpenerMessage;
com.inq.flash.client.data.ChatCommunicationOpenerMessage.__name__ = ["com", "inq", "flash", "client", "data", "ChatCommunicationOpenerMessage"];
com.inq.flash.client.data.ChatCommunicationOpenerMessage.__super__ = com.inq.flash.client.data.ChatCommunicationMessage;
for (var k in com.inq.flash.client.data.ChatCommunicationMessage.prototype) {
  com.inq.flash.client.data.ChatCommunicationOpenerMessage.prototype[k] = com.inq.flash.client.data.ChatCommunicationMessage.prototype[k];
}
com.inq.flash.client.data.ChatCommunicationOpenerMessage.prototype.__class__ = com.inq.flash.client.data.ChatCommunicationOpenerMessage;
com.inq.flash.client.data.ChatCommunicationQueueMessage = function(chat, text, alias) {
  com.inq.flash.client.data.ChatCommunicationMessage.call(this, chat, text);
  this.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_QUEUE);
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_RETURN_RECEIPT, "1");
  if (alias != null) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_ALIAS, alias);
  }
};
$hxClasses["com.inq.flash.client.data.ChatCommunicationQueueMessage"] = com.inq.flash.client.data.ChatCommunicationQueueMessage;
com.inq.flash.client.data.ChatCommunicationQueueMessage.__name__ = ["com", "inq", "flash", "client", "data", "ChatCommunicationQueueMessage"];
com.inq.flash.client.data.ChatCommunicationQueueMessage.__super__ = com.inq.flash.client.data.ChatCommunicationMessage;
for (var k in com.inq.flash.client.data.ChatCommunicationMessage.prototype) {
  com.inq.flash.client.data.ChatCommunicationQueueMessage.prototype[k] = com.inq.flash.client.data.ChatCommunicationMessage.prototype[k];
}
com.inq.flash.client.data.ChatCommunicationQueueMessage.prototype.__class__ = com.inq.flash.client.data.ChatCommunicationQueueMessage;
com.inq.flash.client.data.ChatEngageMessage = function(chat, agentOutcome, clientOutcome, agentAlias) {
  com.inq.flash.client.data.ChatCommunicationMessage.call(this, chat, agentOutcome);
  this.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_OUTCOME);
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_ID, chat.getChatID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_ALIAS, agentAlias);
  if (clientOutcome != "") {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CLIENT_OUTCOME_DATA, com.inq.flash.messagingframework.StringUtils.encodeStringForMessage(clientOutcome));
  }
};
$hxClasses["com.inq.flash.client.data.ChatEngageMessage"] = com.inq.flash.client.data.ChatEngageMessage;
com.inq.flash.client.data.ChatEngageMessage.__name__ = ["com", "inq", "flash", "client", "data", "ChatEngageMessage"];
com.inq.flash.client.data.ChatEngageMessage.__super__ = com.inq.flash.client.data.ChatCommunicationMessage;
for (var k in com.inq.flash.client.data.ChatCommunicationMessage.prototype) {
  com.inq.flash.client.data.ChatEngageMessage.prototype[k] = com.inq.flash.client.data.ChatCommunicationMessage.prototype[k];
}
com.inq.flash.client.data.ChatEngageMessage.prototype.__class__ = com.inq.flash.client.data.ChatEngageMessage;
com.inq.flash.client.data.ChatExitMessage = function(chatID) {
  com.inq.flash.messagingframework.Message.call(this);
  this.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_EXIT);
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_ID, chatID);
};
$hxClasses["com.inq.flash.client.data.ChatExitMessage"] = com.inq.flash.client.data.ChatExitMessage;
com.inq.flash.client.data.ChatExitMessage.__name__ = ["com", "inq", "flash", "client", "data", "ChatExitMessage"];
com.inq.flash.client.data.ChatExitMessage.__super__ = com.inq.flash.messagingframework.Message;
for (var k in com.inq.flash.messagingframework.Message.prototype) {
  com.inq.flash.client.data.ChatExitMessage.prototype[k] = com.inq.flash.messagingframework.Message.prototype[k];
}
com.inq.flash.client.data.ChatExitMessage.prototype.__class__ = com.inq.flash.client.data.ChatExitMessage;
com.inq.flash.client.data.ChatRequestMessage = function(chat, isPersistent, agentID, deltaTime) {
  com.inq.flash.messagingframework.Message.call(this);
  this.setMessageType(com.inq.flash.client.data.MessageFields.TYPE_CHAT_REQUEST);
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_ID, chat.getChatID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_SITE_ID, chat.getSiteID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_LANGUAGE, chat.getLanguage());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_SCRIPT_ID, chat.getScriptID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_BUSINESS_UNIT_ID, chat.getChannelID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_TITLE, chat.getChatTitle());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_BR_ID, chat.getBrID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_INC_ASSIGNMENT_ID, chat.getIncAssignmentId());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_SESSION_ID, chat.getSessionId());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_ALIAS, chat.getAgentName());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_QUEUE_THRESHOLD, chat.getQueueThreshold());
  var automatonSpecData = com.inq.flash.client.control.FlashVars.getValue("automatonSpecData");
  var automatonDataMap = automatonSpecData ? automatonSpecData : com.inq.flash.client.control.FlashPeer.getAutomatonDataMap();
  if (automatonDataMap) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_AUTOMATON_DATA_MAP, automatonDataMap);
  }
  var persistentCustomerID = com.inq.flash.client.control.FlashPeer.getPersistentCustomerID();
  if (persistentCustomerID) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_PERSISTENT_CUSTOMER_ID, persistentCustomerID);
  }
  var useAgentAlias = com.inq.utils.Util.getConfig("useAgentAlias", false);
  if (useAgentAlias == true && com.inq.flash.client.control.FlashVars.getValue("overrideAgentAlias") != "true") {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_USE_AGENT_ALIAS, com.inq.flash.client.data.MessageFields.DATA_TRUE);
    var defaultAgentAlias = com.inq.utils.Util.getConfig("defaultAgentAlias", "&nbsp;");
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_ALIAS, defaultAgentAlias);
  }
  if (chat.getLaunchPageMarker() != null && chat.getLaunchPageMarker().length > 0) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_LAUNCH_PAGE, chat.getLaunchPageMarker());
  }
  if (chat.getLaunchType() != null && chat.getLaunchType().length > 0) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_LAUNCH_TYPE, chat.getLaunchType());
  }
  if (chat.getDeviceType() != null && chat.getDeviceType().length > 0) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_DEVICE_TYPE, chat.getDeviceType());
  }
  if (chat.getBrowserType() != null && chat.getBrowserType().length > 0) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_BROWSER_TYPE, chat.getBrowserType());
  }
  if (chat.getBrowserVersion() != null && chat.getBrowserVersion().length > 0) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_BROWSER_VERSION, chat.getBrowserVersion());
  }
  if (chat.getOperatingSystemType() != null && chat.getOperatingSystemType().length > 0) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_OPERATING_SYSTEM_TYPE, chat.getOperatingSystemType());
  }
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_AGENT_ATTRIBUTE, chat.getAgentAttributes());
  var agentGroupID = chat.getAgentGroupID();
  if (agentGroupID) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_AGENT_GROUP_ID, agentGroupID);
  }
  var publicUserId = chat.getPublicUserId();
  if (publicUserId) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_PUBLIC_USER_ID, publicUserId);
  } else {
    var uniqueAgentName = chat.getUniqueAgentName();
    if (uniqueAgentName) {
      this.addProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_ID, uniqueAgentName);
    }
  }
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_VISITOR_ATTRIBUTES, chat.getVisitorAttributes());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_RULE_ATTRIBUTES, chat.getRuleAttributes());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CUSTOMER_ID, chat.getCustomerID());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_USERNAME, chat.getUsername());
  if (agentID != null && agentID.length > 0) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_ID, agentID);
  }
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_PERSISTENT_FLAG, isPersistent ? "true" : "false");
  if (chat.getAutomatonId() != null && !(com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry > 0 && com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat())) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_ID, chat.getAutomatonId());
    if (chat.getAutomatonFields() != null) {
      var automatonFields = JSON.parse(chat.getAutomatonFields());
      if (automatonFields != null) {
        var i = 0;
        for (var key in automatonFields) {
          this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_FIELD + i + ".name", key);
          this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_FIELD + i++ + ".value", automatonFields[key]);
        }
      }
    }
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_LOCATION, JSON.stringify({type:"chat"}));
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_INITIATOR, JSON.stringify({type:"br", id:chat.brID}));
  }
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_PAGE_ID, chat.getLaunchPageId());
  this.addProperty(com.inq.flash.client.data.MessageFields.KEY_TIME_DELTA, deltaTime);
  var agentAutoOpenerId = com.inq.flash.client.control.FlashVars.getValue("agentAutoOpenerId");
  if (agentAutoOpenerId != null) {
    this.addProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_AUTO_OPENER_ID, agentAutoOpenerId);
  }
};
$hxClasses["com.inq.flash.client.data.ChatRequestMessage"] = com.inq.flash.client.data.ChatRequestMessage;
com.inq.flash.client.data.ChatRequestMessage.__name__ = ["com", "inq", "flash", "client", "data", "ChatRequestMessage"];
com.inq.flash.client.data.ChatRequestMessage.__super__ = com.inq.flash.messagingframework.Message;
for (var k in com.inq.flash.messagingframework.Message.prototype) {
  com.inq.flash.client.data.ChatRequestMessage.prototype[k] = com.inq.flash.messagingframework.Message.prototype[k];
}
com.inq.flash.client.data.ChatRequestMessage.prototype.__class__ = com.inq.flash.client.data.ChatRequestMessage;
com.inq.flash.client.data.MessageFields = function() {
};
$hxClasses["com.inq.flash.client.data.MessageFields"] = com.inq.flash.client.data.MessageFields;
com.inq.flash.client.data.MessageFields.__name__ = ["com", "inq", "flash", "client", "data", "MessageFields"];
com.inq.flash.client.data.MessageFields.prototype.__class__ = com.inq.flash.client.data.MessageFields;
com.inq.flash.client.data.MessageFields.TYPE_CHAT_ACTIVITY = "chat.activity";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION = "chat.communication";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_OPENER = "chat.communication.opener";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_QUEUE = "chat.communication.queue";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_OUTCOME = "chat.communication_outcome";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_REQUEST = "chat.request";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_AUTHORIZED = "chat.authorized";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_ACCEPTED = "chat.accepted";
com.inq.flash.client.data.MessageFields.TYPE_CHATROOM_MEMBER_CONNECTED = "chatroom.member_connected";
com.inq.flash.client.data.MessageFields.TYPE_CHATROOM_MEMBER_LOST = "chatroom.member_lost";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_TRANSFER_RESPONSE = "chat.transfer_response";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_SYSTEM = "chat.system";
com.inq.flash.client.data.MessageFields.TYPE_OWNER_TRANSFER_RESPONSE = "owner.transfer_response";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_EXIT = "chat.exit";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_WAIT = "chat.wait";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_DENIED = "chat.denied";
com.inq.flash.client.data.MessageFields.TYPE_CLIENT_COMMAND = "client.command";
com.inq.flash.client.data.MessageFields.TYPE_SYSTEM_DISCONNECT = "system.disconnect";
com.inq.flash.client.data.MessageFields.TYPE_SYSTEM = "system.";
com.inq.flash.client.data.MessageFields.TYPE_ERROR = "error";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_NEED_WAIT = "chat.need_wait";
com.inq.flash.client.data.MessageFields.TYPE_PERSISTENT_TRANSITION = "chat.per_xtion";
com.inq.flash.client.data.MessageFields.TYPE_CONTINUE_TRANSITION = "chat.con_xtion";
com.inq.flash.client.data.MessageFields.TYPE_GET_PERSISTENT_DOMAIN = "chat.get_pers";
com.inq.flash.client.data.MessageFields.TYPE_SYNC = "sync";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_ACTIVE = "chat.active";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_AUTOMATON_RESPONSE = "chat.automaton_response";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_AUTOMATON_REQUEST = "chat.automaton_request";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_AUTOMATON_SETTING = "chat.setting";
com.inq.flash.client.data.MessageFields.TYPE_NULL = "null";
com.inq.flash.client.data.MessageFields.TYPE_CHAT_COBROWSE = "chat.cobrowse";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_ENABLED = "cobrowse.enabled";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_HIGHLIGHT_ENABLED = "cobrowse.highlight.enabled";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT = "cobrowse.event";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_ACCEPT = "45";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_DECLINE = "46";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_ACCEPT_SHARE = "47";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_DECLINE_SHARE = "48";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_END = "49";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_AGENT_COBROWSE_SENT_INVITE = "50";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_AGENT_COBROWSE_SENT_SHARED_INVITE = "51";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_AGENT_COBROWSE_END = "52";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_PERFORMANCE_TEST = "53";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_INIT_FAIL = "54";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_CLIENT_COBROWSE_SUPPRESSED = "55";
com.inq.flash.client.data.MessageFields.DATA_CLIENT_VIDEO_ACCEPT = "56";
com.inq.flash.client.data.MessageFields.DATA_CLIENT_VIDEO_DECLINE = "57";
com.inq.flash.client.data.MessageFields.DATA_CLIENT_VIDEO_STOP = "58";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_ISSUE_PERSIST_ACCESS_TO_MAIN = "59";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_AGENT_COBROWSE_SENT_INVITE_TEST = "60";
com.inq.flash.client.data.MessageFields.KEY_COBROWSE_EVENT_TYPE_AGENT_COBROWSE_SENT_SHARED_INVITE_TEST = "61";
com.inq.flash.client.data.MessageFields.KEY_TY_LABEL = "thank_you_image_label";
com.inq.flash.client.data.MessageFields.KEY_CHAT_WAIT_EST_ASSIGN_TIME = "waitTime";
com.inq.flash.client.data.MessageFields.KEY_CHAT_WAIT_POS = "queueDepth";
com.inq.flash.client.data.MessageFields.KEY_MESSAGE_TYPE = "messageType";
com.inq.flash.client.data.MessageFields.KEY_VERSION = "version";
com.inq.flash.client.data.MessageFields.KEY_ERROR_MSG = "error.msg";
com.inq.flash.client.data.MessageFields.KEY_CLIENT_COMMAND_PARAM = "messageText";
com.inq.flash.client.data.MessageFields.KEY_CLIENT_CMD_PARAM = "chat.cmd";
com.inq.flash.client.data.MessageFields.KEY_CHATROUTER_ADDRESS = "chatrouter.address";
com.inq.flash.client.data.MessageFields.KEY_REASON = "reason";
com.inq.flash.client.data.MessageFields.KEY_CLIENT_MESSAGE_COUNT = "clientMsgCnt";
com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_ID = "automaton.id";
com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_FIELD = "automaton.field.";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_LOCATION = "config.location";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_INITIATOR = "config.initiator";
com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_TYPE = "automaton.type";
com.inq.flash.client.data.MessageFields.KEY_DT_QUESTION = "dt.question";
com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_STATE = "dt.state";
com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_DATA_MODEL = "dt.datamodel";
com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_EVENT = "dt.event";
com.inq.flash.client.data.MessageFields.KEY_CHAT_AUTOMATON_DATA = "automaton.data";
com.inq.flash.client.data.MessageFields.KEY_CHAT_ID = "engagementID";
com.inq.flash.client.data.MessageFields.KEY_CLIENT_ID = "customerID";
com.inq.flash.client.data.MessageFields.KEY_CUSTOMER_ID = "customerID";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_PERSISTENT_CUSTOMER_ID = "config.persist_cust.id";
com.inq.flash.client.data.MessageFields.KEY_AGENT_ID = "agentID";
com.inq.flash.client.data.MessageFields.KEY_PUBLIC_USER_ID = "public_user_id";
com.inq.flash.client.data.MessageFields.KEY_INITIATOR = "initiator";
com.inq.flash.client.data.MessageFields.KEY_INITIATOR_ID = "initiator.id";
com.inq.flash.client.data.MessageFields.KEY_SITE_ID = "config.site_id";
com.inq.flash.client.data.MessageFields.KEY_LANGUAGE = "config.language";
com.inq.flash.client.data.MessageFields.KEY_SCRIPT_ID = "config.script_id";
com.inq.flash.client.data.MessageFields.KEY_AGENT_AUTO_OPENER_ID = "agent_auto_opener_id";
com.inq.flash.client.data.MessageFields.KEY_PROTODOMAIN = "pd";
com.inq.flash.client.data.MessageFields.KEY_CHANNEL_ID = "businessUnitID";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_BUSINESS_UNIT_ID = "businessUnitID";
com.inq.flash.client.data.MessageFields.KEY_CHAT_TITLE = "config.chat_title";
com.inq.flash.client.data.MessageFields.KEY_BR_ID = "businessRuleID";
com.inq.flash.client.data.MessageFields.KEY_QUEUE_THRESHOLD = "qt";
com.inq.flash.client.data.MessageFields.KEY_AGENT_ALIAS = "config.agent_alias";
com.inq.flash.client.data.MessageFields.KEY_AGENT_SITE_ATTRS = "agent.site_attrs";
com.inq.flash.client.data.MessageFields.KEY_USE_AGENT_ALIAS = "config.use_agent_alias";
com.inq.flash.client.data.MessageFields.KEY_TIME_DELTA = "time.delta";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_AGENT_ATTRIBUTE = "config.agent_attributes";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_AGENT_GROUP_ID = "config.agent_group_id";
com.inq.flash.client.data.MessageFields.KEY_MESSAGE_AGENT_ALIAS = "agent.alias";
com.inq.flash.client.data.MessageFields.KEY_MESSAGE_CUSTOMER_QUIET = "customer.quiet";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_VISITOR_ATTRIBUTES = "config.visitor_attributes";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_RULE_ATTRIBUTES = "config.rule_attributes";
com.inq.flash.client.data.MessageFields.KEY_PERSISTENT_WINDOW_REFRESHED = "persistent.window.refreshed";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_BR_ID = "businessRuleID";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_DEVICE_TYPE = "config.device_type";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_BROWSER_TYPE = "config.browser_type";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_BROWSER_VERSION = "config.browser_version";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_OPERATING_SYSTEM_TYPE = "config.operating_system_type";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_LAUNCH_PAGE = "config.launch_page";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_LAUNCH_TYPE = "config.launch_type";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_INC_ASSIGNMENT_ID = "config.inc_assignment_id";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_AUTOMATON_DATA_MAP = "config.automaton_data_map";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_SESSION_ID = "config.session_id";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_PAGE_ID = "config.page_id";
com.inq.flash.client.data.MessageFields.KEY_CONFIG_ENTRY_CUSTOMER_ID = "config.customer_id";
com.inq.flash.client.data.MessageFields.KEY_CHAT_DATA = "messageText";
com.inq.flash.client.data.MessageFields.KEY_CLIENT_OUTCOME_DATA = "client.outcome.data";
com.inq.flash.client.data.MessageFields.KEY_USERNAME = "client.name";
com.inq.flash.client.data.MessageFields.KEY_RETURN_RECEIPT = "return.receipt";
com.inq.flash.client.data.MessageFields.KEY_CLIENT_ECHO = "client.echo";
com.inq.flash.client.data.MessageFields.KEY_REPLAY = "chat.replay";
com.inq.flash.client.data.MessageFields.KEY_MSG_AGENT_ALIAS = "agent.alias";
com.inq.flash.client.data.MessageFields.KEY_EVENT_AGENT_FIRST_NAME = "event.agent_first_name";
com.inq.flash.client.data.MessageFields.KEY_EVENT_AGENT_LAST_NAME = "event.agent_last_name";
com.inq.flash.client.data.MessageFields.KEY_EVENT_INITIAL_REQUEST_ATTRIBUTES = "event.initial_request_attributes";
com.inq.flash.client.data.MessageFields.KEY_EVENT_TRANSFER_REQUEST_ATTRIBUTES = "event.transfer_request_attributes";
com.inq.flash.client.data.MessageFields.KEY_BUSINESS_UNIT_ID = "business_unit.id";
com.inq.flash.client.data.MessageFields.KEY_AGENT_GROUP_ID = "agentGroupID";
com.inq.flash.client.data.MessageFields.KEY_OPENING_SCRIPT = "chat.open_script";
com.inq.flash.client.data.MessageFields.KEY_PERSISTENT_FLAG = "chat.persistent";
com.inq.flash.client.data.MessageFields.KEY_INITIAL_CLICKSTREAM_PREFIX = "initial_data.";
com.inq.flash.client.data.MessageFields.KEY_LINE_NR = "sequenceNumber";
com.inq.flash.client.data.MessageFields.KEY_CALL_ENABLED = "call.enabled";
com.inq.flash.client.data.MessageFields.TYPE_CLICK_2_CALL = "call.event";
com.inq.flash.client.data.MessageFields.KEY_CALL_STATUS = "call.status";
com.inq.flash.client.data.MessageFields.KEY_CALL_RESULT = "call.result";
com.inq.flash.client.data.MessageFields.KEY_CALL_TERMINATED = "call.terminated_by_customer";
com.inq.flash.client.data.MessageFields.TYPE_CHATLINE = "chatLine";
com.inq.flash.client.data.MessageFields.TYPE_COMMAND = "command";
com.inq.flash.client.data.MessageFields.TYPE_STATE_CHANGE = "stateChange";
com.inq.flash.client.data.MessageFields.KEY_STATE = "state";
com.inq.flash.client.data.MessageFields.DATA_STATE_QUEUED = "queued";
com.inq.flash.client.data.MessageFields.DATA_STATE_ASSIGNED = "assigned";
com.inq.flash.client.data.MessageFields.DATA_STATE_CLOSED = "closed";
com.inq.flash.client.data.MessageFields.DATA_STATE_TRANSFER = "transfer";
com.inq.flash.client.data.MessageFields.DATA_STATE_CONFERENCE = "conference";
com.inq.flash.client.data.MessageFields.DATA_STATE_AGENT_IS_TYPING = "agentIsTyping";
com.inq.flash.client.data.MessageFields.KEY_TYPE = "type";
com.inq.flash.client.data.MessageFields.ACTIVITY_AGENT_TYPING = "2";
com.inq.flash.client.data.MessageFields.ACTIVITY_CUSTOMER_TYPING = "3";
com.inq.flash.client.data.MessageFields.ACTIVITY_CUSTOMER_STOPS_TYPING = "4";
com.inq.flash.client.data.MessageFields.ACTIVITY_CUSTOMER_MINIMIZED = "11";
com.inq.flash.client.data.MessageFields.ACTIVITY_CUSTOMER_RESTORED = "12";
com.inq.flash.client.data.MessageFields.ACTIVITY_FILE_UPLOAD_PATH = "15";
com.inq.flash.client.data.MessageFields.ACTIVITY_AGENT_STOPPED_TYPING = "16";
com.inq.flash.client.data.MessageFields.KEY_TC_MODE = "tc.mode";
com.inq.flash.client.data.MessageFields.KEY_OWNER = "owner";
com.inq.flash.client.data.MessageFields.KEY_SCREENING = "screening";
com.inq.flash.client.data.MessageFields.KEY_CHATROOM_MEMBER_ID = "chatroom.member.id";
com.inq.flash.client.data.MessageFields.KEY_CLIENT_DISPLAY_TEXT = "client.display.text";
com.inq.flash.client.data.MessageFields.KEY_DISPLAY_TEXT = "display.text";
com.inq.flash.client.data.MessageFields.KEY_IS_REASSIGNMENT_MODE = "is_reassignment_mode";
com.inq.flash.client.data.MessageFields.DATA_TRANSFER = "transfer";
com.inq.flash.client.data.MessageFields.DATA_CONFERENCE = "conference";
com.inq.flash.client.data.MessageFields.DATA_TRUE = "true";
com.inq.flash.client.data.MessageFields.DATA_FALSE = "false";
com.inq.flash.client.data.MessageFields.FORM_DATA = "form.data";
com.inq.flash.client.data.MessageFields.FORM_NAME = "form.name";
com.inq.flash.client.data.MessageFields.FORM_ID = "form.id";
com.inq.flash.client.data.MessageFields.DATA_DTID = "dtid";
com.inq.flash.client.data.MessageFields.DATA_CACHE_ID = "cacheId";
com.inq.flash.client.data.MessageFields.DATA_LAYER_ID = "layerId";
com.inq.flash.messagingframework.FlashMessagingFramework = function(applicationController) {
  haxe.Log.trace("entered", {fileName:"FlashMessagingFramework.hx", lineNumber:60, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"new"});
  this.params = [];
  this.maxConnectionRetries = 100;
  this.connectionHandlerAttemptIndex = -1;
  haxe.Log.trace("request for new MessageRouter()", {fileName:"FlashMessagingFramework.hx", lineNumber:64, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"new"});
  this.messageRouter = new com.inq.flash.messagingframework.MessageRouter;
  haxe.Log.trace("requested  new MessageRouter()", {fileName:"FlashMessagingFramework.hx", lineNumber:66, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"new"});
  if (com.inq.flash.client.control.FlashVars.getValue("commTypes") == "") {
    haxe.Log.trace("default commTypes", {fileName:"FlashMessagingFramework.hx", lineNumber:69, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"new"});
    this.preferredConnectionTypes = com.inq.flash.messagingframework.FlashMessagingFramework.CONNECTION_TYPE_SOCKET + ", " + com.inq.flash.messagingframework.FlashMessagingFramework.CONNECTION_TYPE_HTTP;
  } else {
    this.preferredConnectionTypes = com.inq.flash.client.control.FlashVars.getValue("commTypes");
  }
  haxe.Log.trace("preferredConnectionTypes=" + this.preferredConnectionTypes, {fileName:"FlashMessagingFramework.hx", lineNumber:73, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"new"});
  this.applicationConnectionEventHandler = new com.inq.flash.client.control.ClientConnectionEventHandler(applicationController);
  this.connectionHandlers = new Array;
  var connectionsAllowed = this.preferredConnectionTypes.split(",");
  haxe.Log.trace("connectionsAllowed=" + connectionsAllowed.join("\n"), {fileName:"FlashMessagingFramework.hx", lineNumber:79, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"new"});
  var _g1 = 0, _g = connectionsAllowed.length;
  while (_g1 < _g) {
    var i = _g1++;
    var maxRetries = com.inq.flash.client.control.FlashVars.getValue("maxRetries");
    if (maxRetries != null && maxRetries != "") {
      try {
        this.maxConnectionRetries = Std.parseInt(maxRetries);
      } catch (e) {
        if (js.Boot.__instanceof(e, Error)) {
        } else {
          throw e;
        }
      }
    }
    var httpHost = com.inq.flash.client.control.FlashVars.getValue("submitURL");
    var socketHosts = com.inq.flash.client.control.FlashVars.getValue("crHost");
    var socketPort = com.inq.flash.client.control.FlashVars.getValue("crPort") == null || com.inq.flash.client.control.FlashVars.getValue("crPort") == "" ? 8080 : Std.parseInt(com.inq.flash.client.control.FlashVars.getValue("crPort"));
    var connectionType = connectionsAllowed[i];
    haxe.Log.trace("connectionType=" + connectionType, {fileName:"FlashMessagingFramework.hx", lineNumber:97, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"new"});
    connectionType = connectionType.toLowerCase();
    connectionType = com.inq.utils.StringUtil.trim(connectionType);
    var connectionHandler = null;
    var keyz = Reflect.fields(this.params);
    var ix;
    var _g3 = 0, _g2 = keyz.length;
    while (_g3 < _g2) {
      var ix1 = _g3++;
      var elmt = "" + keyz[ix1];
      var val = this.params[elmt];
    }
    connectionHandler = new com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler(httpHost, com.inq.flash.client.control.FlashVars.getValue("chatID"), this.params, applicationController);
    this.setupConnection(connectionHandler, i);
  }
  haxe.Log.trace("exit", {fileName:"FlashMessagingFramework.hx", lineNumber:112, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"new"});
};
$hxClasses["com.inq.flash.messagingframework.FlashMessagingFramework"] = com.inq.flash.messagingframework.FlashMessagingFramework;
com.inq.flash.messagingframework.FlashMessagingFramework.__name__ = ["com", "inq", "flash", "messagingframework", "FlashMessagingFramework"];
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.sendMessage = function(message) {
  haxe.Log.trace("in FMF.sendMessage: " + message.toString(), {fileName:"FlashMessagingFramework.hx", lineNumber:244, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"sendMessage"});
  if (this.selectedConnectionHandler != null) {
    this.selectedConnectionHandler.sendMessage(message);
  }
  haxe.Log.trace("sent message", {fileName:"FlashMessagingFramework.hx", lineNumber:247, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"sendMessage"});
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.isConnected = function() {
  if (this.selectedConnectionHandler == null) {
    return false;
  }
  return this.selectedConnectionHandler.isConnected();
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.disconnect = function() {
  if (this.selectedConnectionHandler != null) {
    this.selectedConnectionHandler.disconnect();
  }
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.abortingConnectionAttempt = function() {
  this.applicationConnectionEventHandler.allConnectionAttemptsFailed();
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.connectionFailed = function() {
  if (this.selectedConnectionHandler != null) {
    this.connectionRetryAttempts++;
    if (this.connectionRetryAttempts < this.maxConnectionRetries) {
      return this.applicationConnectionEventHandler.connectionFailedNeedRetryRequest(this.connectionRetryAttempts, this.maxConnectionRetries);
    } else {
      this.abortingConnectionAttempt();
      return false;
    }
  } else {
    if (this.applicationConnectionEventHandler.connectionFailedNeedRetryRequest(this.connectionRetryAttempts, this.maxConnectionRetries)) {
      this.selectNextConnectionHandler();
      return false;
    }
  }
  return false;
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.connectionSuccesful = function(connectionHandler) {
  this.selectedConnectionHandler = connectionHandler;
  this.connectionRetryAttempts = 0;
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.getConnection = function() {
  return this.selectedConnectionHandler || null;
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.getConnectionType = function() {
  if (this.selectedConnectionHandler == null) {
    return null;
  }
  return this.selectedConnectionHandler.getConnectionType();
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.selectNextConnectionHandler = function() {
  this.connectionHandlerAttemptIndex++;
  if (this.connectionHandlerAttemptIndex >= this.connectionHandlers.length) {
    this.connectionHandlerAttemptIndex = 0;
  }
  this.connectionRetryAttempts++;
  if (this.connectionRetryAttempts < this.maxConnectionRetries) {
    var connectionHandler = js.Boot.__cast(this.connectionHandlers[this.connectionHandlerAttemptIndex], com.inq.flash.messagingframework.connectionhandling.ConnectionHandler);
    if (this.newHost != null && this.newHost != "") {
      connectionHandler.setHost(this.newHost);
    }
    connectionHandler.connect();
  } else {
    this.abortingConnectionAttempt();
  }
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.acknowledgePersistentActive = function(chatID, protoDomain, clientProtoDomain, needNewOpener, messageCnt) {
  if (this.selectedConnectionHandler != null) {
    this.selectedConnectionHandler.acknowledgePersistentActive(chatID, protoDomain, clientProtoDomain, needNewOpener, messageCnt);
  }
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.acknowledgeChatActive = function(chatID) {
  if (this.selectedConnectionHandler != null) {
    this.selectedConnectionHandler.acknowledgeChatActive(chatID);
  }
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.sendBrowserMessage = function(msg) {
  if (this.selectedConnectionHandler != null) {
    this.selectedConnectionHandler.sendBrowserMessage(msg);
  }
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.enable = function() {
  if (this.selectedConnectionHandler != null) {
    this.selectedConnectionHandler.enable();
  }
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.disable = function() {
  if (this.selectedConnectionHandler != null) {
    this.selectedConnectionHandler.disable();
  }
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.connect = function() {
  haxe.Log.trace("enter connect", {fileName:"FlashMessagingFramework.hx", lineNumber:146, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"connect"});
  this.connectionHandlerAttemptIndex = -1;
  haxe.Log.trace("in FMF connect()", {fileName:"FlashMessagingFramework.hx", lineNumber:148, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"connect"});
  if (this.selectedConnectionHandler == null) {
    this.selectedConnectionHandler = this.connectionHandlers[0];
  }
  if (this.selectedConnectionHandler != null) {
    haxe.Log.trace("selectedConnectionHandler.connect()", {fileName:"FlashMessagingFramework.hx", lineNumber:153, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"connect"});
    this.selectedConnectionHandler.connect();
  } else {
    haxe.Log.trace("selectNextConnectionHandler()", {fileName:"FlashMessagingFramework.hx", lineNumber:158, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"connect"});
    this.selectNextConnectionHandler();
  }
  haxe.Log.trace("exit", {fileName:"FlashMessagingFramework.hx", lineNumber:161, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"connect"});
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.registerMessageHandler = function(messageHandler) {
  this.messageRouter.registerMessageHandler(messageHandler);
  messageHandler.setMessagingFramework(this);
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.processMessage = function(message) {
  this.messageRouter.processMessage(message);
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.setupConnection = function(connectionHandler, index) {
  haxe.Log.trace("enter", {fileName:"FlashMessagingFramework.hx", lineNumber:130, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"setupConnection"});
  connectionHandler.setApplicationConnectionEventHandler(this.applicationConnectionEventHandler);
  connectionHandler.setMessageRouter(this.messageRouter);
  connectionHandler.setMessagingFramework(this);
  this.connectionHandlers[index] = connectionHandler;
  haxe.Log.trace("exit: " + this.connectionHandlers.length, {fileName:"FlashMessagingFramework.hx", lineNumber:136, className:"com.inq.flash.messagingframework.FlashMessagingFramework", methodName:"setupConnection"});
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.setChatRouterIP = function(host) {
  this.newHost = host;
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.setParam = function(field, value) {
  if (null != this.selectedConnectionHandler) {
    this.selectedConnectionHandler.setParam(field, value);
  } else {
    this.params[field] = value;
  }
};
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.preferredConnectionTypes = null;
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.selectedConnectionHandler = null;
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.connectionHandlerAttemptIndex = null;
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.connectionHandlers = null;
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.httpConnectionHandler = null;
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.newHost = null;
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.params = null;
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.maxConnectionRetries = null;
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.connectionRetryAttempts = null;
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.messageRouter = null;
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.applicationConnectionEventHandler = null;
com.inq.flash.messagingframework.FlashMessagingFramework.prototype.__class__ = com.inq.flash.messagingframework.FlashMessagingFramework;
com.inq.flash.messagingframework.FlashMessagingFramework.CONNECTION_TYPE_SOCKET = "socket";
com.inq.flash.messagingframework.FlashMessagingFramework.CONNECTION_TYPE_HTTP = "http";
com.inq.flash.messagingframework.MessageRouter = function() {
  this.handlers = new com.inq.utils.Dictionary;
};
$hxClasses["com.inq.flash.messagingframework.MessageRouter"] = com.inq.flash.messagingframework.MessageRouter;
com.inq.flash.messagingframework.MessageRouter.__name__ = ["com", "inq", "flash", "messagingframework", "MessageRouter"];
com.inq.flash.messagingframework.MessageRouter.prototype.processMessage = function(message) {
  try {
    var keyz = Reflect.fields(this.handlers);
    for (var i = 0;i < keyz.length;i++) {
      var handler = this.handlers[keyz[i]];
      var handlerMsgType = handler.getMessageType();
      if (message.getMessageType().indexOf(handlerMsgType) == 0) {
        try {
          handler.processMessage(message);
          haxe.Log.trace("handler processed " + keyz[i], {fileName:"MessageRouter.hx", lineNumber:34, className:"com.inq.flash.messagingframework.MessageRouter", methodName:"processMessage"});
        } catch (e) {
          haxe.Log.trace("handler.processMessage(message) throws " + Std.string(e), {fileName:"MessageRouter.hx", lineNumber:37, className:"com.inq.flash.messagingframework.MessageRouter", methodName:"processMessage", customParams:["error"]});
        }
        return;
      }
    }
    haxe.Log.trace("message has no handler;\n" + "messageType: " + message.getMessageType(), {fileName:"MessageRouter.hx", lineNumber:42, className:"com.inq.flash.messagingframework.MessageRouter", methodName:"processMessage", customParams:["warn"]});
  } catch (e) {
    haxe.Log.trace("Error: " + Std.string(e), {fileName:"MessageRouter.hx", lineNumber:44, className:"com.inq.flash.messagingframework.MessageRouter", methodName:"processMessage", customParams:["error"]});
  }
  haxe.Log.trace("exit", {fileName:"MessageRouter.hx", lineNumber:46, className:"com.inq.flash.messagingframework.MessageRouter", methodName:"processMessage"});
};
com.inq.flash.messagingframework.MessageRouter.prototype.registerMessageHandler = function(messageHandler) {
  this.handlers[messageHandler.getMessageType()] = messageHandler;
};
com.inq.flash.messagingframework.MessageRouter.prototype.handlers = null;
com.inq.flash.messagingframework.MessageRouter.prototype.__class__ = com.inq.flash.messagingframework.MessageRouter;
com.inq.flash.messagingframework.Participant = function(type, id, username) {
  this.participantType = type;
  this.ID = id;
  this.username = username;
};
$hxClasses["com.inq.flash.messagingframework.Participant"] = com.inq.flash.messagingframework.Participant;
com.inq.flash.messagingframework.Participant.__name__ = ["com", "inq", "flash", "messagingframework", "Participant"];
com.inq.flash.messagingframework.Participant.prototype.getType = function() {
  return this.participantType;
};
com.inq.flash.messagingframework.Participant.prototype.getUsername = function() {
  return this.username;
};
com.inq.flash.messagingframework.Participant.prototype.getID = function() {
  return this.ID;
};
com.inq.flash.messagingframework.Participant.prototype.username = null;
com.inq.flash.messagingframework.Participant.prototype.participantType = null;
com.inq.flash.messagingframework.Participant.prototype.ID = null;
com.inq.flash.messagingframework.Participant.prototype.__class__ = com.inq.flash.messagingframework.Participant;
com.inq.flash.messagingframework.StringUtils = function() {
};
$hxClasses["com.inq.flash.messagingframework.StringUtils"] = com.inq.flash.messagingframework.StringUtils;
com.inq.flash.messagingframework.StringUtils.__name__ = ["com", "inq", "flash", "messagingframework", "StringUtils"];
com.inq.flash.messagingframework.StringUtils.encodeStringForMessage = function(message) {
  if (message == null || message.length == 0) {
    return message;
  }
  return message.split("=").join("&eq;").split("\n").join("&nl;").split("\r").join("");
};
com.inq.flash.messagingframework.StringUtils.decodeStringFromMessage = function(message) {
  if (message == null || message.length == 0) {
    return message;
  }
  return message.split("&eq;").join("=").split("&nl;").join("\n");
};
com.inq.flash.messagingframework.StringUtils.htmlEncode = function(text) {
  if (text == null || text.length == 0) {
    return text;
  }
  return text.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;").split('"').join("&#034;");
};
com.inq.flash.messagingframework.StringUtils.htmlDecode = function(text) {
  if (text == null || text.length == 0) {
    return text;
  }
  return text.split("&eq;").join("=").split("&lt;").join("<").split("&gt;").join(">").split("&amp;").join("&").split("&#034;").join('"').split("&nl;").join("<br/>");
};
com.inq.flash.messagingframework.StringUtils.parseQueryString = function(str) {
  var _params = new com.inq.utils.Dictionary;
  try {
    if (str != null && str != "") {
      var params = str.split("&");
      var length = params.length;
      var i = 0;
      var index = -1;
      while (i < length) {
        var kvPair = params[i];
        i++;
        if ((index = kvPair.indexOf("=")) > 0) {
          var key = HxOverrides.substr(kvPair, 0, index);
          var value = HxOverrides.substr(kvPair, index + 1, null);
          _params[key] = value;
        }
      }
    }
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
    } else {
      throw e;
    }
  }
  return _params;
};
com.inq.flash.messagingframework.StringUtils.getBooleanValue = function(value) {
  var returnValue = false;
  var tempValue = "";
  if (value != null) {
    try {
      tempValue = StringTools.trim(Std.string(value)).toLowerCase();
      if (tempValue == "true" || tempValue == "false") {
        if (tempValue == "true") {
          returnValue = true;
        }
      } else {
        var tempValueInt = Std.parseInt(tempValue);
        if (tempValueInt != 0) {
          returnValue = true;
        }
      }
    } catch (e) {
      returnValue = false;
    }
  }
  return returnValue;
};
com.inq.flash.messagingframework.StringUtils.prototype.__class__ = com.inq.flash.messagingframework.StringUtils;
com.inq.flash.messagingframework.TranscriptEntry = function() {
  this.timestamp = Math.floor((new Date).getTime() % 1E3);
};
$hxClasses["com.inq.flash.messagingframework.TranscriptEntry"] = com.inq.flash.messagingframework.TranscriptEntry;
com.inq.flash.messagingframework.TranscriptEntry.__name__ = ["com", "inq", "flash", "messagingframework", "TranscriptEntry"];
com.inq.flash.messagingframework.TranscriptEntry.prototype.getData = function() {
  return this.data;
};
com.inq.flash.messagingframework.TranscriptEntry.prototype.getType = function() {
  return this.type;
};
com.inq.flash.messagingframework.TranscriptEntry.prototype.getSender = function() {
  return this.sender;
};
com.inq.flash.messagingframework.TranscriptEntry.prototype.getTimestamp = function() {
  return this.timestamp;
};
com.inq.flash.messagingframework.TranscriptEntry.prototype.setData = function(data) {
  this.data = data;
};
com.inq.flash.messagingframework.TranscriptEntry.prototype.setType = function(type) {
  this.type = type;
};
com.inq.flash.messagingframework.TranscriptEntry.prototype.setSender = function(sender) {
  this.sender = sender;
};
com.inq.flash.messagingframework.TranscriptEntry.prototype.data = null;
com.inq.flash.messagingframework.TranscriptEntry.prototype.type = null;
com.inq.flash.messagingframework.TranscriptEntry.prototype.sender = null;
com.inq.flash.messagingframework.TranscriptEntry.prototype.timestamp = null;
com.inq.flash.messagingframework.TranscriptEntry.prototype.__class__ = com.inq.flash.messagingframework.TranscriptEntry;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler = function() {
};
$hxClasses["com.inq.flash.messagingframework.connectionhandling.ConnectionHandler"] = com.inq.flash.messagingframework.connectionhandling.ConnectionHandler;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.__name__ = ["com", "inq", "flash", "messagingframework", "connectionhandling", "ConnectionHandler"];
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.acknowledgePersistentActive = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.acknowledgeChatActive = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.sendBrowserMessage = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.enable = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.disable = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.getConnectionType = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.sendMessage = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.isConnected = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.disconnect = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.connect = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.setParam = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.setHost = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.setApplicationConnectionEventHandler = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.setMessagingFramework = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.setMessageRouter = null;
com.inq.flash.messagingframework.connectionhandling.ConnectionHandler.prototype.__class__ = com.inq.flash.messagingframework.connectionhandling.ConnectionHandler;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler = function(host, _chatID, _params, applicationController) {
  this.msgCount = 0;
  this.params = _params;
  this.connected = false;
  this.chatRouterHosts = new Array;
  this.chatRouterHost = host;
  this.processMessageQueue = new Array;
  this.messageQueue = [];
  this.messagesInProgress = [];
  this.queueKey = 0;
  this.customerID = com.inq.flash.client.control.FlashVars.getValue("customerID");
  this.getMsgLoader = new com.inq.net.URLLoader(this.customerID, com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.GET_MSG_LOADER_TIMEOUT);
  this.getMsgPreLoader = new com.inq.net.URLLoader(this.customerID, com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.GET_MSG_LOADER_TIMEOUT);
  this.stopListening = false;
  this.forceDisconnected = false;
  this.listeningForMessages = 0;
  this.listeningForMessagesTimer = null;
  this.networkTimeoutEnabled = true;
  this.networkTimeoutId = null;
  this.applicationController = applicationController;
  this.cachingEnabled = true;
  this.cacheCount = (new Date).getTime();
  this.isIE = com.inq.utils.Util.isIE;
  this.setChatID(_chatID);
  var hosts = host.split(",");
  var i = 0;
  while (i < hosts.length) {
    this.chatRouterHosts[this.chatRouterHosts.length] = hosts[i];
    i++;
  }
  this.getMsgLoader.addEventListener(com.inq.events.IOErrorEvent.IO_ERROR, $bind(this, this.getMessageFailed));
  this.getMsgLoader.addEventListener(com.inq.events.IOErrorEvent.NETWORK_ERROR, $bind(this, this.getMessageFailed));
  this.getMsgLoader.addEventListener(com.inq.events.SecurityErrorEvent.SECURITY_ERROR, $bind(this, this.getRequestSecurityError));
  this.getMsgLoader.addEventListener(com.inq.events.HTTPStatusEvent.HTTP_STATUS, $bind(this, this.getMessageHTTPStatus));
  this.getMsgLoader.addEventListener(com.inq.events.Event.COMPLETE, $bind(this, this.getMsgComplete));
  this.useClientProtocol = com.inq.utils.Util.getConfig("useClientProtocol", false);
  this.setSelectedHost();
};
$hxClasses["com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler"] = com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.__name__ = ["com", "inq", "flash", "messagingframework", "connectionhandling", "HTTPConnectionHandler"];
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getQueueSize = function() {
  return this.messageQueue.length;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getQueueFirstItem = function() {
  return this.messageQueue[0];
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getInProgressMsgCount = function() {
  return Object.keys(this.messagesInProgress).length;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.deleteInProgressMsg = function(key) {
  var message = this.messagesInProgress[key];
  delete this.messagesInProgress[key];
  return message;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.putMessageHTTPStatus = function(event) {
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getMessageHTTPStatus = function(event) {
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.putMsgComplete = function(event) {
  var sentMessage = this.deleteInProgressMsg(event.currentTarget.key);
  if (sentMessage) {
    if (com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION == sentMessage.getMessageType()) {
      var prevMsg = this.messageQueue.shift();
      var nextMsg = this.getQueueFirstItem();
      if (nextMsg) {
        this.putMessage(nextMsg);
      }
    }
  }
  var responseStatus = event.target.responseStatus;
  if (responseStatus == 401) {
    haxe.Log.trace("in putMsgComplete, got a status response 401", {fileName:"HTTPConnectionHandler.js", lineNumber:150, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"putMsgComplete"});
    com.inq.flash.client.chatskins.SkinControl.connectionLostClosingChat();
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getMsgCompletePreload = function(event) {
  this.checkCaching(this.getMsgPreLoader);
  try {
    this.resetNetworkTimeout();
    this.iMsgRereadCnt = this.getMsgCompleteProcessing(this.getMsgPreLoader, true);
    this.routeQueuedRequests(true);
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("ERROR: " + Std.string(e), {fileName:"HTTPConnectionHandler.hx", lineNumber:907, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"getMsgCompletePreload", customParams:["error"]});
    } else {
      throw e;
    }
  }
  if (!this.forceDisconnected) {
    if (this.iMsgRereadLmt > 0 && this.iMsgRereadCnt < this.iMsgRereadLmt && this.cachingEnabled) {
      this.msgCount = this.iMsgRereadCnt;
      this.getMessages();
      return;
    }
  }
  if (this.iMsgRereadCnt > 0) {
    this.msgCount = this.iMsgRereadCnt;
  }
  this.establishConnectionRequest();
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getMsgComplete = function(event) {
  this.checkCaching(this.getMsgLoader);
  this.listeningForMessages = 0;
  if (this.listeningForMessagesTimer != null) {
    this.listeningForMessagesTimer.stop();
  }
  var newCount = this.msgCount;
  var responseStatusCode = this.getMsgLoader.responseStatus;
  try {
    this.resetNetworkTimeout();
    var emptyMessage = responseStatusCode == com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.STATUS_CODE_NO_CONTENT || responseStatusCode == com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.STATUS_CODE_AJAX_ABORTED;
    if (!emptyMessage) {
      newCount = this.getMsgCompleteProcessing(this.getMsgLoader, false);
    }
    if (emptyMessage || newCount > this.msgCount) {
      var map = {};
      map["msgcnt"] = this.msgCount = newCount;
      map["lt"] = (new Date).getTime();
      com.inq.flash.client.control.PersistenceManager.SetValues(map);
    }
    this.routeQueuedRequests(false);
  } catch (e) {
    haxe.Log.trace("ERROR: " + Std.string(e), {fileName:"HTTPConnectionHandler.hx", lineNumber:858, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"getMsgComplete", customParams:["error"]});
  }
  if (!this.forceDisconnected) {
    if (newCount > this.msgCount) {
      this.msgCount = newCount;
    }
    haxe.Log.trace("msgCount = " + this.msgCount, {fileName:"HTTPConnectionHandler.js", lineNumber:236, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"getMsgComplete"});
    this.listenForMessages();
  } else {
    haxe.Log.trace("forceDisconnect", {fileName:"HTTPConnectionHandler.js", lineNumber:243, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"getMsgComplete"});
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getMsgCompleteProcessing = function(loader, replay) {
  var newCount = 0;
  try {
    var msgData = loader.data;
    var responseStatus = loader.responseStatus;
    if (responseStatus == 401) {
      haxe.Log.trace("in getMsgCompleteProcessing, got a status response 401", {fileName:"HTTPConnectionHandler.js", lineNumber:292, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"getMsgCompleteProcessing"});
      com.inq.flash.client.chatskins.SkinControl.connectionLostClosingChat();
    }
    var success = msgData != null && typeof msgData == "object";
    if (success) {
      var messages = msgData["messages"];
      var mix;
      newCount = msgData["count"];
      var _g1 = 0, _g = messages.length;
      while (_g1 < _g) {
        var mix1 = _g1++;
        if (messages[mix1] == null) {
          continue;
        }
        var message = new com.inq.flash.messagingframework.Message;
        message.setData(messages[mix1]);
        message.addProperty(com.inq.flash.client.data.MessageFields.KEY_CLIENT_MESSAGE_COUNT, "" + newCount);
        try {
          if (!replay || this.isMsgReplayable(message)) {
            this.processMessageQueue.push(message);
          }
        } catch (e) {
          if (js.Boot.__instanceof(e, Error)) {
            haxe.Log.trace("FAILED messageRouter.processMessage: " + message.toString(), {fileName:"HTTPConnectionHandler.hx", lineNumber:814, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"getMsgCompleteProcessing", customParams:["error"]});
          } else {
            throw e;
          }
        }
      }
    }
  } catch (e) {
    haxe.Log.trace("Error: " + Std.string(e), {fileName:"HTTPConnectionHandler.js", lineNumber:322, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"getMsgCompleteProcessing", customParams:["error"]});
  }
  return newCount;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.isMsgReplayable = function(message) {
  var msgType = message.getMessageType();
  var cid = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_CHAT_ID);
  var isThisChatSession = (msgType == com.inq.flash.client.data.MessageFields.TYPE_CHATLINE || msgType == com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION || msgType == com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_QUEUE || msgType == com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION_OUTCOME) && cid == this.chatIDForGetMsg;
  var replayable = isThisChatSession || msgType == com.inq.flash.client.data.MessageFields.TYPE_CHATROOM_MEMBER_CONNECTED || msgType == com.inq.flash.client.data.MessageFields.TYPE_OWNER_TRANSFER_RESPONSE || msgType == com.inq.flash.client.data.MessageFields.TYPE_CHAT_COBROWSE || msgType == com.inq.flash.client.data.MessageFields.TYPE_CHAT_TRANSFER_RESPONSE || msgType == com.inq.flash.client.data.MessageFields.TYPE_CHAT_AUTOMATON_SETTING || msgType == com.inq.flash.client.data.MessageFields.TYPE_CLIENT_COMMAND || 
  msgType == com.inq.flash.client.data.MessageFields.TYPE_CHAT_AUTOMATON_REQUEST || msgType == com.inq.flash.client.data.MessageFields.TYPE_STATE_CHANGE && (message.getProperty(com.inq.flash.client.data.MessageFields.KEY_STATE) == com.inq.flash.client.data.MessageFields.DATA_CONFERENCE || message.getProperty(com.inq.flash.client.data.MessageFields.KEY_STATE) == com.inq.flash.client.data.MessageFields.DATA_TRANSFER);
  return replayable;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.routeQueuedRequests = function(replay) {
  var msg;
  while (this.processMessageQueue.length > 0) {
    msg = this.processMessageQueue.shift();
    if (replay) {
      msg.addProperty(com.inq.flash.client.data.MessageFields.KEY_REPLAY, "1");
    }
    this.messageRouter.processMessage(msg);
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.putRequestSecurityError = function(event) {
  this.putMessageFailed(event);
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getRequestSecurityError = function(event) {
  this.getMessageFailed(event);
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.putMessageRetry = function(key) {
  var firstMsg = this.getQueueFirstItem();
  if (firstMsg) {
    this.putMessage(firstMsg, key);
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.putMessageFailed = function(event) {
  var sentMessage = this.messagesInProgress[event.currentTarget.key];
  if (sentMessage) {
    if (com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION == sentMessage.getMessageType()) {
      window.setTimeout($bind(this, this.putMessageRetry), com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.RETRY_DELAY, event.currentTarget.key);
    }
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getMessageFailed = function(event) {
  this.listeningForMessages = 0;
  this.resetNetworkTimeout();
  window.setTimeout($bind(this, this.listenForMessages), com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.RETRY_DELAY);
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getConnectionType = function() {
  return com.inq.flash.messagingframework.FlashMessagingFramework.CONNECTION_TYPE_HTTP;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.abortGetMessage = function() {
  this.getMsgPreLoader.cancelLoad();
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.putMessage = function(message, retryKey) {
  var chatID = this.chatIDForGetMsg;
  if (chatID != null && chatID != "") {
    this.chatIDForGetMsg = chatID;
  }
  var host = this.getSelectedHost();
  var putMsgURL = host + com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.MESSAGE_BASE_URL + "?" + message.serializeToURL();
  var putMsgRequest = new com.inq.net.URLRequest(putMsgURL);
  try {
    var isPost = false;
    isPost = message.isPostSend();
    var putMsgLoader = new com.inq.net.URLLoader(this.customerID);
    putMsgLoader.addEventListener(com.inq.events.HTTPStatusEvent.HTTP_STATUS, $bind(this, this.putMessageHTTPStatus));
    putMsgLoader.addEventListener(com.inq.events.SecurityErrorEvent.SECURITY_ERROR, $bind(this, this.putRequestSecurityError));
    putMsgLoader.addEventListener(com.inq.events.IOErrorEvent.IO_ERROR, $bind(this, this.putMessageFailed));
    putMsgLoader.addEventListener(com.inq.events.IOErrorEvent.NETWORK_ERROR, $bind(this, this.putMessageFailed));
    if (message.getMessageType() != com.inq.flash.client.data.MessageFields.TYPE_CHAT_EXIT) {
      putMsgLoader.addEventListener(com.inq.events.Event.COMPLETE, $bind(this, this.putMsgComplete));
    }
    if (isPost) {
      putMsgLoader.post(putMsgRequest, host);
    } else {
      var key = retryKey ? retryKey : "send" + ++this.queueKey;
      this.messagesInProgress[key] = message;
      putMsgLoader.load(putMsgRequest, key, true);
    }
  } catch (e) {
    haxe.Log.trace("" + Std.string(e), {fileName:"HTTPConnectionHandler.hx", lineNumber:645, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"putMessage", customParams:["error"]});
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.sendMessage = function(message) {
  if (com.inq.flash.client.data.MessageFields.TYPE_CHAT_COMMUNICATION == message.getMessageType()) {
    this.messageQueue.push(message);
    if (this.getQueueSize() == 1) {
      this.putMessage(message);
    }
  } else {
    if (com.inq.flash.client.data.MessageFields.TYPE_CHAT_EXIT == message.getMessageType()) {
      this.abortGetMessage();
    }
    this.putMessage(message);
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.putChatExitMsgComplete = function(event) {
  this.disable();
  var message = new com.inq.flash.client.data.ChatExitMessage("");
  this.messageRouter.processMessage(message);
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.listenForMessagesTimeout = function() {
  this.listeningForMessagesTimer.stop();
  this.listeningForMessagesTimer = null;
  if (this.getMsgLoader.bytesLoaded == 0) {
    this.getMsgLoader.close();
    this.listeningForMessages = 0;
    this.listenForMessages();
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.networkTimeoutHandler = function() {
  if (this.networkTimeoutEnabled) {
    haxe.Log.trace("INFO (networkTimeoutHandler) timeoutClosesChat() is called due to getmessage timed out. ", {fileName:"HTTPConnectionHandler.hx", lineNumber:524, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"networkTimeoutHandler"});
    com.inq.flash.client.chatskins.SkinControl.timeoutClosesChat();
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.disableNetworkTimeout = function() {
  this.networkTimeoutEnabled = false;
  if (this.networkTimeoutId != null) {
    window.clearTimeout(this.networkTimeoutId);
    this.networkTimeoutId = null;
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.resetNetworkTimeout = function() {
  if (this.networkTimeoutEnabled) {
    if (this.networkTimeoutId != null) {
      window.clearTimeout(this.networkTimeoutId);
    }
    this.networkTimeoutId = window.setTimeout($bind(this, this.networkTimeoutHandler), 12E4);
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.setNetworkTimeout = function() {
  if (this.networkTimeoutEnabled && this.networkTimeoutId == null) {
    this.networkTimeoutId = window.setTimeout($bind(this, this.networkTimeoutHandler), 12E4);
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.listenForMessages = function() {
  if (this.listeningForMessages != 0) {
    var timeElapsed = (new Date).getTime() - this.listeningForMessages;
    if (timeElapsed < com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.LISTEN_FOR_MESSAGES_TIMEOUT) {
      return;
    }
    this.listeningForMessages = 0;
    this.getMsgLoader.close();
  }
  if (!this.forceDisconnected && !this.stopListening) {
    var urlGetMsg = this.generateGetMessageURL(this.msgCount, "lm");
    this.setNetworkTimeout();
    this.getMsgLoader.load(new com.inq.net.URLRequest(urlGetMsg));
    if (this.isAutomaton()) {
      this.listeningForMessages = (new Date).getTime();
      this.listeningForMessagesTimer = new com.inq.utils.Timer(com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.LISTEN_FOR_MESSAGES_TIMEOUT);
      this.listeningForMessagesTimer.run = $bind(this, this.listenForMessagesTimeout);
    }
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.isAutomaton = function() {
  var b = com.inq.flash.client.control.FlashVars.getValue("automatonId");
  return b != null;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.setChatID = function(chatID) {
  this.chatIDForGetMsg = chatID;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.connectionComplete = function(event) {
  if (event == null) {
    if (!this.isConnected() && !this.forceDisconnected) {
      this.connected = true;
      this.framework.connectionSuccesful(this);
      this.applicationConnectionEventHandler.connectionSuccessful();
    }
    return;
  }
  var responseStatus = event.target.responseStatus;
  if (responseStatus == 401) {
    haxe.Log.trace("in connectionComplete, got a status response 401", {fileName:"HTTPConnectionHandler.js", lineNumber:860, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"connectionComplete"});
    com.inq.flash.client.chatskins.SkinControl.connectionLostClosingChat();
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.establishConnectionRequest = function() {
  this.listenForMessages();
  if (!this.isConnected() && !this.forceDisconnected) {
    this.getMsgPreLoader.removeEventListener(com.inq.events.Event.COMPLETE, $bind(this, this.getMsgCompletePreload));
    this.connected = true;
    this.framework.connectionSuccesful(this);
    this.applicationConnectionEventHandler.connectionSuccessful();
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.connect = function() {
  this.iMsgRereadLmt = com.inq.flash.client.control.PersistenceManager.GetValue("msgcnt", 0);
  if (com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
    if (this.iMsgRereadLmt < com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry) {
      this.iMsgRereadLmt = com.inq.flash.client.chatskins.SkinControl.msgcntAtEntry;
    }
  }
  this.iMsgRereadCnt = 0;
  if (this.iMsgRereadLmt > 0) {
    this.getMessages();
  } else {
    this.establishConnectionRequest();
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.setSelectedHost = function() {
  var protocol = this.useClientProtocol ? window.location.protocol : "https:";
  if (this.chatRouterHost.toLowerCase().indexOf("http") != 0) {
    this.selectedHost = protocol + "//" + this.chatRouterHost;
  } else {
    this.selectedHost = this.chatRouterHost.replace("http:", protocol);
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getSelectedHost = function() {
  return this.selectedHost;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.disconnect = function() {
  if (this.forceDisconnected) {
    return;
  }
  this.connected = false;
  this.forceDisconnected = true;
  var putMsgLoader = new com.inq.net.URLLoader(this.customerID);
  putMsgLoader.addEventListener(com.inq.events.Event.COMPLETE, $bind(this, this.putMsgComplete));
  var endChatURL = this.getSelectedHost() + "/chatrouter/chat/closeChat?rand=" + Math.random();
  if (this.chatIDForGetMsg != null && this.chatIDForGetMsg != "") {
    endChatURL += "&" + com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.ENGAGEMENT_ID_PARAM + this.chatIDForGetMsg;
  }
  var endChatRequest = new com.inq.net.URLRequest(endChatURL);
  putMsgLoader.load(endChatRequest);
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getMessagingFramework = function() {
  return this.framework;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.setMessagingFramework = function(framework) {
  this.framework = framework;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.setMessageRouter = function(messageRouter) {
  this.messageRouter = messageRouter;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.isConnected = function() {
  return this.connected;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.setApplicationConnectionEventHandler = function(applicationConnectionEventHandler) {
  this.applicationConnectionEventHandler = applicationConnectionEventHandler;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.setHost = function(host) {
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.setParam = function(name, valu) {
  this[name] = valu;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getMessages = function() {
  var urlGetMsg = this.generateGetMessageURL(this.iMsgRereadCnt, "gm");
  this.getMsgPreLoader.addEventListener(com.inq.events.Event.COMPLETE, $bind(this, this.getMsgCompletePreload));
  if (!this.stopListening) {
    this.getMsgPreLoader.load(new com.inq.net.URLRequest(urlGetMsg));
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getParams = function(keyName) {
  return this.params[keyName];
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.sendBrowserMessage = function(message) {
  var chatID = this.chatIDForGetMsg;
  if (chatID != null && chatID != "") {
    this.chatIDForGetMsg = chatID;
  }
  var putMsgURL = this.getSelectedHost() + "/chatrouter/chat/sendBrowserMsg?" + message.serializeToURL();
  var putMsgRequest = new com.inq.net.URLRequest(putMsgURL);
  try {
    var putMsgLoader = new com.inq.net.URLLoader(this.customerID);
    putMsgLoader.addEventListener(com.inq.events.Event.COMPLETE, $bind(this, this.putMsgComplete));
    putMsgLoader.load(putMsgRequest);
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("" + Std.string(e), {fileName:"HTTPConnectionHandler.hx", lineNumber:228, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"sendBrowserMessage", customParams:["error"]});
    } else {
      throw e;
    }
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.acknowledgePersistentActive = function(chatID, protoDomain, clientProtoDomain, needNewOpener, messageCount) {
  var newLoc = "";
  var putMsgURL = this.getSelectedHost() + "/chatrouter/chat/ackPersistentActive.js?engagementID=" + this.chatIDForGetMsg + "&op=" + Std.string(needNewOpener) + "&pd=" + protoDomain + "&r=" + Math.round(123456789 * Math.random());
  if (protoDomain != clientProtoDomain) {
    com.inq.flash.client.chatskins.SkinControl.noUnload();
    newLoc = window.parent.location.href;
    newLoc = newLoc.split(protoDomain).join(clientProtoDomain);
    newLoc = newLoc.split("#")[0];
    newLoc += "#msgCnt=" + Std.parseInt(messageCount);
    putMsgURL += "&xfr=" + StringTools.urlEncode(newLoc);
  }
  var ackPersistentRequest = new com.inq.net.URLRequest(putMsgURL);
  try {
    this.ackPersistentLoader = new com.inq.net.URLLoader(this.customerID);
    this.ackPersistentLoader.addEventListener(com.inq.events.Event.COMPLETE, function(event) {
    });
    this.ackPersistentLoader.load(ackPersistentRequest);
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("" + Std.string(e), {fileName:"HTTPConnectionHandler.hx", lineNumber:205, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"acknowledgePersistentActive", customParams:["error"]});
    } else {
      throw e;
    }
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.sendChatHTML = function() {
  var chatHTML = StringTools.urlEncode(document.getElementById("me").innerHTML);
  var sendHtmlURL = this.getSelectedHost() + "/chatrouter/chat/sendHTML.js?engagementID=" + this.chatIDForGetMsg + "&r=" + this.rand() + "&h=";
  var limit = 2E3 - sendHtmlURL.length;
  if (limit > chatHTML.length) {
    limit = chatHTML.length;
  }
  while (chatHTML.length > 0) {
    var url = sendHtmlURL + HxOverrides.substr(chatHTML, 0, limit);
    var sendHtmlLoader;
    var sendHtmlRequest = new com.inq.net.URLRequest(url);
    sendHtmlLoader = new com.inq.net.URLLoader(this.customerID);
    sendHtmlLoader.addEventListener(com.inq.events.Event.COMPLETE, function(event) {
    });
    sendHtmlLoader.load(sendHtmlRequest);
    chatHTML = HxOverrides.substr(chatHTML, limit + 1, null);
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.rand = function() {
  return Math.round(123456789 * Math.random());
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.acknowledgeChatActive = function(chatID) {
  var putMsgURL = this.getSelectedHost() + "/chatrouter/chat/ackChatActive" + "?engagementID=" + this.chatIDForGetMsg + "&rand=" + Math.random();
  var putMsgRequest = new com.inq.net.URLRequest(putMsgURL);
  try {
    var putMsgLoader = new com.inq.net.URLLoader(this.customerID);
    putMsgLoader.load(putMsgRequest);
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("" + Std.string(e), {fileName:"HTTPConnectionHandler.hx", lineNumber:145, className:"com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler", methodName:"acknowledgeChatActive", customParams:["error"]});
    } else {
      throw e;
    }
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.enable = function() {
  this.forceDisconnected = false;
  this.stopListening = false;
  this.listenForMessages();
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.disable = function() {
  this.disableNetworkTimeout();
  this.forceDisconnected = true;
  this.stopListening = true;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.checkCaching = function(loader) {
  if (typeof loader.data == "object") {
    this.cachingEnabled = loader.responseHeaderCacheControl.indexOf("no-cache") < 0;
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.generateGetMessageURL = function(cnt, source) {
  var cacheBuster = "";
  if (!this.cachingEnabled) {
    cacheBuster = "&im=" + source + "&cacheBuster=true";
    if (this.isIE) {
      cacheBuster += "&rnd=" + this.cacheCount++;
    }
  }
  var url = this.getSelectedHost() + com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.MESSAGE_BASE_URL + "/" + cnt + "?" + com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.ENGAGEMENT_ID_PARAM + this.chatIDForGetMsg + cacheBuster;
  return url;
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.ciPrepareUrlForBeacon = function() {
  var connection = Application.application.applicationController.getMessagingFramework().getConnection();
  if (connection) {
    return connection.prepareUrlForBeacon.call(connection);
  } else {
    return "";
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.prepareUrlForBeacon = function() {
  if (this.isConnected() && !this.forceDisconnected) {
    if (!this.isIE) {
      this.disable();
    }
    var url = this.getSelectedHost() + this.MESSAGE_PAGE_UNLOAD;
    url += "?" + this.ENGAGEMENT_ID_PARAM + this.chatIDForGetMsg;
    url += "&" + this.CUSTOMER_ID_PARAM + com.inq.flash.client.control.FlashVars.getValue("customerID");
    return url;
  }
};
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.networkTimeoutEnabled = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.networkTimeoutId = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.listeningForMessagesTimer = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.listeningForMessages = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.chatIDForGetMsg = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.ackPersistentLoader = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.putMsgLoader = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.stopListening = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.forceDisconnected = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.connected = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.messageQueue = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.queueKey = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.processMessageQueue = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getMsgCntLoader = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getMsgPreLoader = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.getMsgLoader = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.iMsgRereadLmt = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.iMsgRereadCnt = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.msgCount = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.params = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.framework = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.messageRouter = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.applicationConnectionEventHandler = null;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.__class__ = com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.__interfaces__ = [com.inq.flash.messagingframework.connectionhandling.ConnectionHandler];
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.LISTEN_FOR_MESSAGES_TIMEOUT = 4E4;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.NETWORK_TIMEOUT = 12E4;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.ENGAGEMENT_ID_PARAM = "engagementID=";
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.ENGAGEMENT_ID_PARAM = "engagementID=";
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.MESSAGE_BASE_URL = "/chatrouter/chat/message";
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.MESSAGE_PAGE_UNLOAD = "/chatrouter/chat/pageUnload";
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.RETRY_DELAY = 1E3;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.STATUS_CODE_NO_CONTENT = 204;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.STATUS_CODE_AJAX_ABORTED = 0;
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.CUSTOMER_ID_PARAM = "customerID=";
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.prototype.CUSTOMER_ID_PARAM = "customerID=";
com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.GET_MSG_LOADER_TIMEOUT = 45E3;
if (!com.inq.flash.messagingframework.util) {
  com.inq.flash.messagingframework.util = {};
}
;com.inq.flash.messagingframework.util.XTrace = function() {
};
$hxClasses["com.inq.flash.messagingframework.util.XTrace"] = com.inq.flash.messagingframework.util.XTrace;
com.inq.flash.messagingframework.util.XTrace.__name__ = ["com", "inq", "flash", "messagingframework", "util", "XTrace"];
com.inq.flash.messagingframework.util.XTrace.redirection = function() {
  haxe.Log.trace = com.inq.flash.messagingframework.util.XTrace.sysTrace;
  return true;
};
com.inq.flash.messagingframework.util.XTrace.setRedirection = function() {
  haxe.Log.trace = com.inq.flash.messagingframework.util.XTrace.sysTrace;
  haxe.Log.trace("", {fileName:"XTrace.hx", lineNumber:34, className:"com.inq.flash.messagingframework.util.XTrace", methodName:"setRedirection"});
};
com.inq.flash.messagingframework.util.XTrace.sysTrace = function(v, inf) {
  var txt = "[" + inf.fileName + ":" + inf.lineNumber + " " + inf.methodName + "] " + Std.string(v);
};
com.inq.flash.messagingframework.util.XTrace.StackTrace = function(err, hdr) {
  if (hdr == null) {
    hdr = "WARNING:";
  }
  var st = err.getStackTrace();
  var erMsg = err.message;
  var errString = err.toString();
  haxe.Log.trace(hdr + " " + st, {fileName:"XTrace.hx", lineNumber:133, className:"com.inq.flash.messagingframework.util.XTrace", methodName:"StackTrace"});
};
com.inq.flash.messagingframework.util.XTrace.prototype.__class__ = com.inq.flash.messagingframework.util.XTrace;
com.inq.utils.Util = function() {
};
$hxClasses["com.inq.utils.Util"] = com.inq.utils.Util;
com.inq.utils.Util.__name__ = ["com", "inq", "utils", "Util"];
com.inq.utils.Util.publish = function(path, object) {
  var parts = path.split(".");
  var point = window;
  var lastItemIndex = parts.length - 1;
  var _g1 = 0, _g = parts.length;
  while (_g1 < _g) {
    var i = _g1++;
    var partName = parts[i];
    if (null == point[partName]) {
      if (i == lastItemIndex) {
        point[partName] = object;
      } else {
        point[partName] = {};
      }
    }
    point = point[partName];
  }
};
com.inq.utils.Util.getConfig = function(attrib, def) {
  var configMap = null;
  try {
    configMap = Application.application[com.inq.utils.Util.configArea];
    if (configMap != null) {
      return configMap[attrib] != null ? configMap[attrib] : def;
    }
  } catch (e) {
    haxe.Log.trace("error accessing configuration attribute: " + attrib + "\n" + Std.string(e), {fileName:"Util.hx", lineNumber:61, className:"com.inq.utils.Util", methodName:"getConfig"});
  }
  return def;
};
com.inq.utils.Util.getIEMajorVer = function(compatibility) {
  return com.inq.flash.client.control.FlashPeer.getBrowserMajorVer(compatibility);
};
com.inq.utils.Util.getHostFromUrl = function(url) {
  return url.indexOf("/") > -1 ? url.split("/", 3)[2] : url;
};
com.inq.utils.Util.prototype.__class__ = com.inq.utils.Util;
com.inq.utils.Util.isIE = window.navigator.appName == "Microsoft Internet Explorer" || window.navigator.userAgent.indexOf("Trident") != -1;
com.inq.utils.Util.configArea = "skinConfig";
com.inq.utils.Util.xformsCloseEventFlag = "sendEventChatCloseToAutomatons";
com.inq.net.URLLoader = function(customerID, timeout) {
  com.inq.events.EventDispatcher.call(this);
  this.index = 0;
  this.storageKey = "";
  this.data = "";
  this.responseStatus = 0;
  this.responseHeaderCacheControl = "";
  this.bytesLoaded = 0;
  this.timeout = timeout || 0;
  this.customerIDAsFirstParamExpression = customerID ? "?" + com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.CUSTOMER_ID_PARAM + customerID : "";
};
$hxClasses.extend(com.inq.events.EventDispatcher, com.inq.net.URLLoader, "com.inq.net.URLLoader");
com.inq.net.URLLoader.getContext = function(UrlIndex) {
  var idxContext = com.inq.net.URLLoader.indexOfContext(UrlIndex);
  if (idxContext != -1) {
    return com.inq.net.URLLoader.loadingArray.splice(idxContext, 1)[0].Context;
  } else {
    return null;
  }
};
com.inq.net.URLLoader._httpRequestHandler = function(id, data, status, responseHeaderCacheControl) {
  var instance = com.inq.net.URLLoader.getContext(id);
  if (null == instance) {
    return;
  }
  if (window["postMessage"] == null) {
    com.inq.flash.client.control.FlashPeer.updateFrameName(id, instance.storageKey);
  }
  instance.responseStatus = status;
  instance.responseHeaderCacheControl = responseHeaderCacheControl;
  instance.data = data;
  instance.bytesLoaded = data && data.length ? data.length : 0;
  if (status == 0) {
    instance.fireEvent(com.inq.events.IOErrorEvent.NETWORK_ERROR);
  } else {
    instance.fireEvent(com.inq.events.Event.COMPLETE);
  }
};
com.inq.net.URLLoader.loadComplete = function(context) {
  if (context) {
    if (context.eval) {
      eval(context.data);
    } else {
      com.inq.net.URLLoader._httpRequestHandler(context.id, context.data, context["responseStatus"], context["responseHeaderCacheControl"]);
    }
  }
};
com.inq.net.URLLoader.prototype.cancelLoad = function() {
  if (com.inq.net.URLLoader.lastGetMsg) {
    com.inq.flash.client.control.FlashPeer.postRequestToIframeProxy(com.inq.net.URLLoader.lastGetMsg.url, ["ABORT", com.inq.net.URLLoader.lastGetMsg.id]);
  }
};
com.inq.net.URLLoader.prototype.close = function() {
  com.inq.net.URLLoader.getContext(this.key);
};
com.inq.net.URLLoader.prototype.loadByPosting = function(reqUrl, id, sendPost) {
  com.inq.net.URLLoader._hostedFile = window.location.protocol + "//" + (window.location.host + window.location.pathname);
  var parts = reqUrl.split("?");
  var dest = parts[0];
  var destURL;
  var data;
  if (sendPost || reqUrl.length > com.inq.net.URLLoader.MAXIMUM_IE_URL_LENGTH) {
    destURL = dest + this.customerIDAsFirstParamExpression;
    data = encodeURIComponent(parts[1]);
  } else {
    if (this.customerIDAsFirstParamExpression) {
      destURL = dest + this.customerIDAsFirstParamExpression;
      if (parts[1]) {
        destURL += "&" + parts[1];
      }
    } else {
      destURL = reqUrl;
    }
    data = "";
    if (destURL.indexOf(com.inq.flash.messagingframework.connectionhandling.HTTPConnectionHandler.MESSAGE_BASE_URL) > -1) {
      com.inq.net.URLLoader.lastGetMsg = {id:id, url:destURL};
    }
  }
  this.storageKey = destURL;
  var context = {};
  context["callbackFun"] = com.inq.net.URLLoader.loadComplete;
  com.inq.flash.client.control.FlashPeer.postRequestToIframeProxy(destURL, ["POSTCHAT", id, "", com.inq.net.URLLoader._hostedFile, destURL, data, this.timeout], id, context);
};
com.inq.net.URLLoader.prototype.post = function(request, baseURL) {
  com.inq.flash.client.control.FlashPeer.postRequestToIframeProxy(baseURL, request.url);
};
com.inq.net.URLLoader.prototype.load = function(request, sendKey, sendPost) {
  this.data = "";
  this.index = ++com.inq.net.URLLoader.seq;
  this.key = (sendKey ? sendKey : this.index) + "";
  this.registerContext(this.key);
  this.loadByPosting(request.url, this.key, sendPost);
};
com.inq.net.URLLoader.prototype.fireEvent = function(eventName) {
  var fun = this.eventListeners[eventName];
  var ev = new com.inq.events.Event(eventName);
  if (null == fun) {
    haxe.Log.trace("function is not defined for Event.COMPLETE", {fileName:"URLLoader.hx", lineNumber:309, className:"com.inq.net.URLLoader", methodName:"fireEvent"});
  } else {
    try {
      ev.currentTarget = this;
      ev.target = this;
      fun(ev);
    } catch (e) {
      var keyz = Reflect.fields(e);
      var errMsg = "";
      if (js.Boot.__instanceof(e, String)) {
        errMsg = e;
      } else {
        var s;
        if (keyz.length == 0) {
          errMsg = e;
        } else {
          var _g1 = 0, _g = keyz.length;
          while (_g1 < _g) {
            var s1 = _g1++;
            if (errMsg != "") {
              errMsg += "\n";
            }
            var key = keyz[s1];
            var type = e[key];
            errMsg += key + ": " + type;
          }
        }
      }
      var modName = "" + this.constructor.name;
      var stack;
      var excpt;
      var stackTrace, exceptionTrace;
      try {
        stack = haxe.Stack.callStack();
        stackTrace = haxe.Stack.toString(stack);
      } catch (x) {
        stackTrace = "unavailable";
      }
      try {
        excpt = haxe.Stack.exceptionStack();
        exceptionTrace = haxe.Stack.toString(excpt);
      } catch (x) {
        exceptionTrace = "unavailable";
      }
      haxe.Log.trace("Could not fire event in " + modName + ", reason: " + errMsg + "\nStackTrace:" + stackTrace + "\nExceptionTrace:" + exceptionTrace, {fileName:"URLLoader.hx", lineNumber:345, className:"com.inq.net.URLLoader", methodName:"fireEvent", customParams:[e]});
      com.inq.flash.client.control.FlashPeer.logError("URLLoader.fireEvent could not fire " + eventName + " event in " + modName + ", reason: ", e);
    }
  }
  return false;
};
com.inq.net.URLLoader.prototype.registerContext = function(Url) {
  if (com.inq.net.URLLoader.indexOfContext(Url) == -1) {
    com.inq.net.URLLoader.loadingArray.push({UrlIndex:Url, Context:this});
  }
};
com.inq.net.URLLoader.indexOfContext = function(key) {
  for (var i = 0;i < com.inq.net.URLLoader.loadingArray.length;i++) {
    if (key == com.inq.net.URLLoader.loadingArray[i].UrlIndex) {
      return i;
    }
  }
  return -1;
};
com.inq.net.URLLoader.prototype.key = null;
com.inq.net.URLLoader.prototype.__class__ = com.inq.net.URLLoader;
com.inq.net.URLLoader.MAXIMUM_IE_URL_LENGTH = 2083;
com.inq.net.URLLoader.loadingArray = new Array;
com.inq.net.URLLoader.seq = 0;
com.inq.net.URLLoader.lastGetMsg = null;
com.inq.net.URLLoader._hostedFile = "";
com.inq.net.URLRequest = function(url) {
  this.url = url;
};
$hxClasses["com.inq.net.URLRequest"] = com.inq.net.URLRequest;
com.inq.net.URLRequest.__name__ = ["com", "inq", "net", "URLRequest"];
com.inq.net.URLRequest.prototype.url = null;
com.inq.net.URLRequest.prototype.method = null;
com.inq.net.URLRequest.prototype.data = null;
com.inq.net.URLRequest.prototype.contentType = null;
com.inq.net.URLRequest.prototype.__class__ = com.inq.net.URLRequest;
com.inq.stage.IDragResize = function() {
};
$hxClasses["com.inq.stage.IDragResize"] = com.inq.stage.IDragResize;
com.inq.stage.IDragResize.__name__ = ["com", "inq", "stage", "IDragResize"];
com.inq.stage.IDragResize.prototype.whenDone = null;
com.inq.stage.IDragResize.prototype.setDragBorder = null;
com.inq.stage.IDragResize.prototype.setTop = null;
com.inq.stage.IDragResize.prototype.setLeft = null;
com.inq.stage.IDragResize.prototype.getDefaultMax = null;
com.inq.stage.IDragResize.prototype.getDefaultMin = null;
com.inq.stage.IDragResize.prototype.__class__ = com.inq.stage.IDragResize;
com.inq.stage.DragResize = function() {
  this.className = "DragResize";
  this.styleSaved = "";
  this.cursor = "default";
  this.pDraggerNow = null;
  this.touchIdentifier = com.inq.stage.DragResize.TOUCH_IDENTIFER_UNUSED;
};
$hxClasses["com.inq.stage.DragResize"] = com.inq.stage.DragResize;
com.inq.stage.DragResize.__name__ = ["com", "inq", "stage", "DragResize"];
com.inq.stage.DragResize.o = null;
com.inq.stage.DragResize["typeof"] = function(v) {
  return typeof v;
};
com.inq.stage.DragResize.WhenDone = function() {
  if (com.inq.stage.DragResize.instance != null) {
    com.inq.stage.DragResize.instance.whenDone();
  }
  com.inq.stage.DragResize.instance = null;
};
com.inq.stage.DragResize.stopEvent = function(e) {
  var ev = !!e ? e : Application.application.getPanelWindow().event;
  if (ev["preventDefault"] != null) {
    ev.preventDefault();
  }
  if (ev["stopPropagation"] != null) {
    ev.stopPropagation();
  }
  return false;
};
com.inq.stage.DragResize.prototype._removeEventListener = function(object, eventName, func) {
  if (null != window["removeEventListener"]) {
    object.removeEventListener(eventName, func, false);
  } else {
    if (null != window["detachEvent"]) {
      object.detachEvent("on" + eventName, func);
    } else {
      object["on" + eventName] = null;
    }
  }
};
com.inq.stage.DragResize.prototype._attachEventListener = function(object, eventName, func) {
  if (null != window["addEventListener"]) {
    object.addEventListener(eventName, func, false);
  } else {
    if (null != window["attachEvent"]) {
      object.attachEvent("on" + eventName, func);
    } else {
      object["on" + eventName] = func;
    }
  }
};
com.inq.stage.DragResize.prototype.bindClosures = function() {
  this.uponTouchStartClosure = $bind(this, this.uponTouchStart);
  this.uponTouchCancelClosure = $bind(this, this.uponTouchCancel);
  this.uponTouchEndClosure = $bind(this, this.uponTouchEnd);
  this.uponTouchDragClosure = $bind(this, this.uponTouchDrag);
  this.uponMouseDragStartClosure = $bind(this, this.uponDragStart);
  this.uponMouseOutClosure = $bind(this, this.uponMouseOut);
  this.uponMouseDragClosure = $bind(this, this.uponDrag);
  this.uponMouseDropClosure = $bind(this, this.uponDrop);
};
com.inq.stage.DragResize.prototype.init = function(o, oRoot) {
  if (window.parent.name == "_inqPersistentChat") {
    return;
  }
  var fullPage = com.inq.utils.Util.getConfig("fullPage", false);
  if (fullPage) {
    return;
  }
  if (o == null) {
    return;
  }
  this.dragImage = this.fixDragImage(o);
  this.obj = o;
  if (o[com.inq.stage.DragResize.INSTANCE_LABEL] != null) {
    haxe.Log.trace("o already has property for " + com.inq.stage.DragResize.INSTANCE_LABEL + ": " + o[com.inq.stage.DragResize.INSTANCE_LABEL], {fileName:"DragResize.hx", lineNumber:862, className:"com.inq.stage.DragResize", methodName:"init"});
  } else {
    o[com.inq.stage.DragResize.INSTANCE_LABEL] = this;
    oRoot[com.inq.stage.DragResize.INSTANCE_LABEL] = this;
    this.root = oRoot && oRoot != null ? oRoot : o;
    this.bindClosures();
    if (this.isSupported("touchstart")) {
      this.obj[com.inq.stage.DragResize.INSTANCE_LABEL] = this;
      this._attachEventListener(this.dragImage, "touchstart", this.uponTouchStartClosure);
    }
    if (this.isSupported("mousedown")) {
      this._attachEventListener(this.dragImage, "mousedown", this.uponMouseDragStartClosure);
    }
  }
};
com.inq.stage.DragResize.prototype.fixDragImage = function(element) {
  if (element.nodeName.toUpperCase() == "IMG") {
    var par = element.parentNode;
    var div = document.createElement("DIV");
    div.id = element.id;
    div.style.cssText = "background-color:#007700; opacity:0.4; " + Std.string(element.style.cssText);
    div.title = element.title;
    par.insertBefore(div, element);
    element.style.height = element.style.width = "100%";
    element.style.position = "absolute";
    element.style.top = element.style.left = "0px";
    element.id = div.id + "_image";
    par.removeChild(element);
    return div;
  } else {
    if (element.nodeName.toUpperCase() == "DIV") {
      var images = element.getElementsByTagName("IMG");
      if (images.length > 0) {
        var i, image = null;
        var _g1 = 0, _g = images.length;
        while (_g1 < _g) {
          var i1 = _g1++;
          if (images[i1].parentNode == element) {
            image = images[i1];
            break;
          }
        }
        if (image != null) {
          var par = image.parentNode;
          if (par == element) {
            var dragSafe = document.createElement("INPUT");
            dragSafe.type = "image";
            if (image.src == null || image.src == "") {
              dragSafe.src = Application.application.getClearImage();
            } else {
              dragSafe.src = image.src;
            }
            dragSafe.style.cssText = Std.string(element.style.cssText) + "; top:0px; left:0px; height: 100%; width: 100%;display:block;padding:0;margin:0;";
            dragSafe.className = "tcChat";
            dragSafe.name = "DragSafe";
            par.replaceChild(dragSafe, image);
            return dragSafe;
          }
        }
      }
      var inputEl = null;
      var inputs = element.getElementsByTagName("INPUT");
      if (inputs.length > 0) {
        var _g1 = 0, _g = inputs.length;
        while (_g1 < _g) {
          var i = _g1++;
          if (inputs[i].parentNode == element) {
            inputEl = inputs[i];
            break;
          }
        }
        if (inputEl != null && inputEl.name != "DragSafe") {
          inputEl.name = "DragSafe";
          inputEl.style.cssText = Std.string(element.style.cssText) + "; top:0px; left:0px; height: 100%; width: 100%;display: block;padding:0;margin:0;";
          inputEl.className = "tcChat";
        }
      }
    }
  }
  return element;
};
com.inq.stage.DragResize.prototype.isLeftClick = function(e) {
  var ev = !!e ? e : Application.application.getPanelWindow().event;
  var mouseButtonState = 1;
  if (window.navigator.appName == "Netscape") {
    mouseButtonState = e.which;
  } else {
    mouseButtonState = window.parent.event.button;
  }
  if (ev.type.indexOf("touch") == 0) {
    return true;
  }
  return mouseButtonState == 1 ? true : false;
};
com.inq.stage.DragResize.prototype.fireDone = function() {
  this.whenDone();
};
com.inq.stage.DragResize.prototype.fireDoneState = function() {
  com.inq.stage.DragResize.instance = this;
  window.setTimeout(com.inq.stage.DragResize.WhenDone, 1);
};
com.inq.stage.DragResize.prototype.removeTouchEvents = function() {
  this._attachEventListener(this.dragImage, "mousedown", this.uponMouseDragStartClosure);
  this._removeEventListener(com.inq.stage.DragResize.doc, "touchcancel", this.uponTouchCancelClosure);
  this._removeEventListener(com.inq.stage.DragResize.doc, "touchend", this.uponTouchEndClosure);
  this._removeEventListener(com.inq.stage.DragResize.doc, "touchmove", this.uponTouchDragClosure);
};
com.inq.stage.DragResize.prototype.removeMouseEvents = function() {
  this._attachEventListener(this.dragImage, "touchstart", this.uponTouchStartClosure);
  this._removeEventListener(com.inq.stage.DragResize.doc, "mouseout", this.uponMouseOutClosure);
  this._removeEventListener(com.inq.stage.DragResize.doc, "mousemove", this.uponMouseDragClosure);
  this._removeEventListener(com.inq.stage.DragResize.doc, "mouseup", this.uponMouseDropClosure);
};
com.inq.stage.DragResize.prototype.addTouchEvents = function() {
  this._removeEventListener(this.dragImage, "mousedown", this.uponMouseDragStartClosure);
  this._attachEventListener(com.inq.stage.DragResize.doc, "touchcancel", this.uponTouchCancelClosure);
  this._attachEventListener(com.inq.stage.DragResize.doc, "touchend", this.uponTouchEndClosure);
  this._attachEventListener(com.inq.stage.DragResize.doc, "touchmove", this.uponTouchDragClosure);
};
com.inq.stage.DragResize.prototype.addMouseEvents = function() {
  this._removeEventListener(this.obj, "touchstart", this.uponTouchStartClosure);
  this._attachEventListener(com.inq.stage.DragResize.doc, "mouseout", this.uponMouseOutClosure);
  this._attachEventListener(com.inq.stage.DragResize.doc, "mousemove", this.uponMouseDragClosure);
  this._attachEventListener(com.inq.stage.DragResize.doc, "mouseup", this.uponMouseDropClosure);
};
com.inq.stage.DragResize.prototype.removeEvents = function() {
  this.removeMouseEvents();
  this.fireDoneState();
};
com.inq.stage.DragResize.prototype.uponTouchCancel = function(e) {
  var ev = !!e ? e : Application.application.getPanelWindow().event;
  if (ev["preventDefault"] != null) {
    ev.preventDefault();
  }
  return false;
};
com.inq.stage.DragResize.prototype.uponTouchEnd = function(e) {
  try {
    var ev = !!e ? e : Application.application.getPanelWindow().event;
    if (ev["preventDefault"] != null) {
      ev.preventDefault();
    }
    this.touch = this.getTouchByIdentifer(ev);
    if (this.touch == null) {
      return false;
    }
    this.restoreStyle();
    var pCur = {X:this.touch.pageX - this.touchOffsetX, Y:this.touch.pageY - this.touchOffsetY};
    this.repositionTouch(pCur);
    this.removeTouchEvents();
    this.done();
  } catch (e1) {
    window.alert("ERROR: uponTouchEnd: " + Std.string(e1));
  }
  return false;
};
com.inq.stage.DragResize.prototype.getTouchByIdentifer = function(ev) {
  try {
    var touchList = ev.changedTouches;
    if (touchList == null) {
      return null;
    }
    if (this.touchIdentifier == com.inq.stage.DragResize.TOUCH_IDENTIFER_UNUSED) {
      return null;
    }
    if (touchList["identifiedTouch"] == null) {
      var i;
      var _g1 = 0, _g = touchList.length;
      while (_g1 < _g) {
        var i1 = _g1++;
        if (touchList[i1].identifier == this.touchIdentifier) {
          return touchList[i1];
        }
      }
      return null;
    } else {
      return touchList.identifiedTouch(this.touchIdentifier);
    }
  } catch (e) {
    window.alert("ERROR: getTouchByIdentifer: " + Std.string(e));
  }
  return null;
};
com.inq.stage.DragResize.prototype.done = function() {
  this.touchIdentifier = com.inq.stage.DragResize.TOUCH_IDENTIFER_UNUSED;
  this.restoreStyle();
  window.setTimeout($bind(this, this.whenDone), 1);
};
com.inq.stage.DragResize.prototype.uponDrop = function(e) {
  var ev = !!e ? e : Application.application.getPanelWindow().event;
  if (ev["preventDefault"] != null) {
    ev.preventDefault();
  }
  var pCur = this.getPosition(ev);
  this.removeEvents();
  this.done();
  return this.reposition(pCur);
};
com.inq.stage.DragResize.prototype.uponMouseOut = function(e) {
  var ev = !!e ? e : Application.application.getPanelWindow().event;
  if (ev["preventDefault"] != null) {
    ev.preventDefault();
  }
  var pCur = this.getPosition(ev);
  var outOfArea = false;
  var pMax = this.getScreenMax();
  if (pCur.Y < 0) {
    pCur.Y = 0;
    outOfArea = true;
  }
  if (pCur.X < 0) {
    pCur.X = 0;
    outOfArea = true;
  }
  if (pCur.Y >= pMax.Y) {
    pCur.Y = pMax.Y;
    outOfArea = true;
  }
  if (pCur.X >= pMax.X) {
    pCur.X = pMax.X;
    outOfArea = true;
  }
  if (outOfArea) {
    this.removeEvents();
    this.restoreStyle();
    this.reposition(pCur);
    this.fireDoneState();
    return false;
  }
  return this.uponDrag(ev);
};
com.inq.stage.DragResize.prototype.getScreenMax = function() {
  return {X:com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft() + com.inq.flash.client.chatskins.ScrollMonitor.getScrollWidth(), Y:com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop() + com.inq.flash.client.chatskins.ScrollMonitor.getScrollHeight()};
};
com.inq.stage.DragResize.prototype.repositionTouch = function(pCur) {
  try {
    if (this.pLast != null && pCur.X == this.pLast.X && pCur.Y == this.pLast.Y) {
      return false;
    }
    var top, left;
    left = pCur.X;
    if (pCur.X != this.pLast.X && left >= this.pMin.X && left < this.pMax.X) {
      this.setLeft(left);
    } else {
      if (left >= this.pMax.X) {
        this.setLeft(left = this.pMax.X);
      } else {
        if (left < this.pMin.X) {
          this.setLeft(left = this.pMin.X);
        }
      }
    }
    top = pCur.Y;
    if (pCur.Y != this.pLast.Y && top >= this.pMin.Y && top < this.pMax.Y) {
      this.setTop(top);
    } else {
      if (top >= this.pMax.Y) {
        this.setTop(top = this.pMax.Y);
      } else {
        if (top < this.pMin.Y) {
          this.setTop(top = this.pMin.Y);
        }
      }
    }
    this.pDraggerNow = {X:left, Y:top};
    this.pLast = pCur;
  } catch (e) {
    window.alert("ERROR: repositionTouch: " + Std.string(e));
  }
  return false;
};
com.inq.stage.DragResize.prototype.reposition = function(pCur) {
  var top;
  var left;
  left = pCur.X - this.deltaX;
  if (left >= this.pMin.X && left < this.pMax.X) {
    this.setLeft(this.pDraggerNow.X = left);
  } else {
    if (left >= this.pMax.X) {
      this.setLeft(this.pDraggerNow.X = this.pMax.X);
    } else {
      if (left < this.pMin.X) {
        this.setLeft(this.pDraggerNow.X = this.pMin.X);
      }
    }
  }
  top = pCur.Y - this.deltaY;
  if (top >= this.pMin.Y && top < this.pMax.Y) {
    this.pDraggerNow.Y = top;
    this.setTop(this.pDraggerNow.Y = top);
  } else {
    if (top >= this.pMax.Y) {
      this.setTop(this.pDraggerNow.Y = this.pMax.Y);
    } else {
      if (top < this.pMin.Y) {
        this.setTop(this.pDraggerNow.Y = this.pMin.Y);
      }
    }
  }
  this.pLast = pCur;
  return false;
};
com.inq.stage.DragResize.prototype.uponTouchDrag = function(e) {
  var ev = !!e ? e : Application.application.getPanelWindow().event;
  if (ev["preventDefault"] != null) {
    ev.preventDefault();
  }
  try {
    this.touch = this.getTouchByIdentifer(ev);
    if (this.touch == null) {
      return false;
    }
    var pCur = {X:this.touch.pageX - this.touchOffsetX, Y:this.touch.pageY - this.touchOffsetY};
    this.repositionTouch(pCur);
  } catch (e1) {
    window.alert("uponTouchDrag ERROR: " + Std.string(e1));
  }
  return false;
};
com.inq.stage.DragResize.prototype.uponDrag = function(e) {
  var ev = !!e ? e : Application.application.getPanelWindow().event;
  if (!!this.obj.dragging) {
    return false;
  }
  this.obj["dragging"] = true;
  if (ev["preventDefault"] != null) {
    ev.preventDefault();
  }
  var pCur = this.getPosition(ev);
  this.reposition(pCur);
  this.obj["dragging"] = false;
  return false;
};
com.inq.stage.DragResize.prototype.uponDragOverFromStage = function(e) {
  var ev = !!e ? e : Application.application.getPanelWindow().event;
  if (ev["preventDefault"] != null) {
    ev.preventDefault();
  }
  var pCur = this.getAbsolutePosition(ev);
  this.reposition(pCur);
  return false;
};
com.inq.stage.DragResize.prototype.uponDragEndFromStage = function(e) {
  var ev = !!e ? e : Application.application.getPanelWindow().event;
  if (ev["preventDefault"] != null) {
    ev.preventDefault();
  }
  var pCur = this.getAbsolutePosition(ev);
  this.removeEvents();
  this.restoreStyle();
  this.reposition(pCur);
  this.fireDoneState();
  return false;
};
com.inq.stage.DragResize.prototype.uponTouchStart = function(e) {
  var ev = !!e ? e : Application.application.getPanelWindow().event;
  var evType = ev.type;
  if (ev["preventDefault"] != null) {
    ev.preventDefault();
  }
  var o = this.obj;
  this.pStart = {X:Std.parseInt(this.root.style["left"]), Y:Std.parseInt(this.root.style["top"])};
  var style = o.style;
  if (this.touchIdentifier != com.inq.stage.DragResize.TOUCH_IDENTIFER_UNUSED) {
    return false;
  }
  this.touch = ev.changedTouches[0];
  this.touchOffsetX = Math.round(this.touch.pageX) - Std.parseInt(style.left);
  this.touchOffsetY = Math.round(this.touch.pageY) - Std.parseInt(style.top);
  this.touchIdentifier = this.touch.identifier;
  this.pMin = this.getDefaultMin();
  this.pMax = this.getDefaultMax();
  this.saveStyle();
  o.style["cursor"] = this.cursor;
  this.addTouchEvents();
  this.setDragBorder();
  this.pLast = {X:this.touch.pageX - this.clickOffsetX, Y:this.touch.pageY - this.clickOffsetY};
  return false;
};
com.inq.stage.DragResize.prototype.uponDragStart = function(e) {
  var ev = !!e ? e : Application.application.getPanelWindow().event;
  var evType = ev.type;
  if (ev["preventDefault"] != null) {
    ev.preventDefault();
  }
  var o = this.obj;
  if (!this.isLeftClick(ev)) {
    return false;
  }
  this.pStart = {X:Std.parseInt(this.root.style["left"]), Y:Std.parseInt(this.root.style["top"])};
  this.rootHeight = Std.parseInt(this.root.style.height);
  this.rootWidth = Std.parseInt(this.root.style.width);
  this.pDraggerStart = {X:Std.parseInt(o.style["left"]), Y:Std.parseInt(o.style["top"])};
  this.draggerHeight = Std.parseInt(o.style.height);
  this.draggerWidth = Std.parseInt(o.style.width);
  this.pDraggerNow = {X:this.pDraggerStart.X, Y:this.pDraggerStart.Y};
  this.pLast = this.getPosition(ev);
  this.deltaX = this.pLast.X - this.pDraggerStart.X;
  this.deltaY = this.pLast.Y - this.pDraggerStart.Y;
  this.pMin = this.getDefaultMin();
  this.pMax = this.getDefaultMax();
  this.saveStyle();
  o.style["cursor"] = this.cursor;
  this.setDragBorder();
  com.inq.stage.DragResize.instance = this;
  this.addMouseEvents();
  return false;
};
com.inq.stage.DragResize.prototype.setDragBorder = function() {
};
com.inq.stage.DragResize.prototype.getDefaultMax = function() {
  return {X:1E4, Y:1E4};
};
com.inq.stage.DragResize.prototype.getDefaultMin = function() {
  return {X:0, Y:0};
};
com.inq.stage.DragResize.prototype.setLeft = function(top) {
  window.alert("setLeft override failed");
};
com.inq.stage.DragResize.prototype.setTop = function(top) {
  window.alert("setTop override failed");
};
com.inq.stage.DragResize.prototype.whenDone = function() {
};
com.inq.stage.DragResize.prototype.getAbsolutePosition = function(e) {
  var loc = this.getPosition(e);
  var p = window.frameElement;
  while (p != null) {
    loc.X += p.offsetLeft;
    loc.Y += p.offsetTop;
    p = p.offsetParent;
    if (p.tagName == "BODY") {
      break;
    }
  }
  return loc;
};
com.inq.stage.DragResize.prototype.getTarget = function(e) {
  var t = null;
  if (!e) {
    e = Application.application.getPanelWindow().event;
  }
  if (e.target) {
    t = e.target;
  } else {
    if (e.srcElement) {
      t = e.srcElement;
    }
  }
  if (t.nodeType == 3) {
    t = t.parentNode;
  }
  return t;
};
com.inq.stage.DragResize.prototype.isSupported = function(eventType) {
  var el = window.document.createElement("img");
  el.setAttribute("on" + eventType, "return true;");
  var fun = el["on" + eventType];
  var type = typeof fun;
  if ("function" == type) {
    return true;
  } else {
    if ("string" == type) {
      return true;
    } else {
      return false;
    }
  }
};
com.inq.stage.DragResize.prototype.restoreStyle = function() {
  this.obj.style.cssText = this.styleSaved;
};
com.inq.stage.DragResize.prototype.saveStyle = function() {
  this.styleSaved = this.obj.style.cssText;
};
com.inq.stage.DragResize.prototype.getPositionIE = function(e) {
  return {X:window.parent.event.clientX, Y:window.parent.event.clientY};
};
com.inq.stage.DragResize.prototype.getPositionGecko = function(e) {
  return {X:e.clientX, Y:e.clientY};
};
com.inq.stage.DragResize.prototype.getPosition = function(e) {
  return {X:e.clientX, Y:e.clientY};
};
com.inq.stage.DragResize.prototype.uponMouseDropClosure = null;
com.inq.stage.DragResize.prototype.uponMouseDragClosure = null;
com.inq.stage.DragResize.prototype.uponMouseOutClosure = null;
com.inq.stage.DragResize.prototype.uponMouseDragStartClosure = null;
com.inq.stage.DragResize.prototype.uponTouchDragClosure = null;
com.inq.stage.DragResize.prototype.uponTouchEndClosure = null;
com.inq.stage.DragResize.prototype.uponTouchCancelClosure = null;
com.inq.stage.DragResize.prototype.uponTouchStartClosure = null;
com.inq.stage.DragResize.prototype.deltaY = null;
com.inq.stage.DragResize.prototype.deltaX = null;
com.inq.stage.DragResize.prototype.pMax = null;
com.inq.stage.DragResize.prototype.pMin = null;
com.inq.stage.DragResize.prototype.rootWidth = null;
com.inq.stage.DragResize.prototype.rootHeight = null;
com.inq.stage.DragResize.prototype.draggerHeight = null;
com.inq.stage.DragResize.prototype.draggerWidth = null;
com.inq.stage.DragResize.prototype.pDraggerNow = null;
com.inq.stage.DragResize.prototype.pDraggerStart = null;
com.inq.stage.DragResize.prototype.pStart = null;
com.inq.stage.DragResize.prototype.pLast = null;
com.inq.stage.DragResize.prototype.touchIdentifier = null;
com.inq.stage.DragResize.prototype.touchOffsetY = null;
com.inq.stage.DragResize.prototype.touchOffsetX = null;
com.inq.stage.DragResize.prototype.clickOffsetY = null;
com.inq.stage.DragResize.prototype.clickOffsetX = null;
com.inq.stage.DragResize.prototype.touch = null;
com.inq.stage.DragResize.prototype.styleSaved = null;
com.inq.stage.DragResize.prototype.cursor = null;
com.inq.stage.DragResize.prototype.root = null;
com.inq.stage.DragResize.prototype.dragImage = null;
com.inq.stage.DragResize.prototype.obj = null;
com.inq.stage.DragResize.prototype.className = null;
com.inq.stage.DragResize.prototype.__class__ = com.inq.stage.DragResize;
com.inq.stage.DragResize.__interfaces__ = [com.inq.stage.IDragResize];
com.inq.stage.DragResize.TOUCH_IDENTIFER_UNUSED = -1;
com.inq.stage.DragResize.INSTANCE_LABEL = "instDragResize";
com.inq.stage.DragResize.doc = window.parent.document;
com.inq.stage.DragResize.instance = null;
com.inq.stage.DragResize.DEFAULT_BORDER_COLOR = "SlateGray";
com.inq.stage.Immovable = function() {
  com.inq.stage.DragResize.call(this);
  this.className = "Immovable";
  this.cursor = "";
};
$hxClasses["com.inq.stage.Immovable"] = com.inq.stage.Immovable;
com.inq.stage.Immovable.__name__ = ["com", "inq", "stage", "Immovable"];
com.inq.stage.Immovable.__super__ = com.inq.stage.DragResize;
for (var k in com.inq.stage.DragResize.prototype) {
  com.inq.stage.Immovable.prototype[k] = com.inq.stage.DragResize.prototype[k];
}
com.inq.stage.Immovable.MakeImmovable = function() {
  var instance = new com.inq.stage.Immovable;
  var cntr = window.parent.document.getElementById("inqChatStage");
  var dragHandleElem = window.parent.document.getElementById("inqTitleBar");
  instance.init(dragHandleElem, cntr);
  return instance;
};
com.inq.stage.Immovable.immobilize = function(node) {
  com.inq.utils.Capabilities.BindListener(node, "touchmove", com.inq.stage.DragResize.stopEvent);
};
com.inq.stage.Immovable.prototype.whenDone = function() {
};
com.inq.stage.Immovable.prototype.uponDragStart = function(e) {
  return com.inq.stage.DragResize.stopEvent(e);
};
com.inq.stage.Immovable.prototype.uponTouchEnd = function(e) {
  return com.inq.stage.DragResize.stopEvent(e);
};
com.inq.stage.Immovable.prototype.uponDrop = function(e) {
  return com.inq.stage.DragResize.stopEvent(e);
};
com.inq.stage.Immovable.prototype.uponMouseOut = function(e) {
  return com.inq.stage.DragResize.stopEvent(e);
};
com.inq.stage.Immovable.prototype.uponTouchCancel = function(e) {
  return com.inq.stage.DragResize.stopEvent(e);
};
com.inq.stage.Immovable.prototype.uponTouchDrag = function(e) {
  return com.inq.stage.DragResize.stopEvent(e);
};
com.inq.stage.Immovable.prototype.uponDrag = function(e) {
  return com.inq.stage.DragResize.stopEvent(e);
};
com.inq.stage.Immovable.prototype.uponTouchStart = function(e) {
  return com.inq.stage.DragResize.stopEvent(e);
};
com.inq.stage.Immovable.prototype.__class__ = com.inq.stage.Immovable;
com.inq.stage.Immovable.__interfaces__ = [com.inq.stage.IDragResize];
com.inq.stage.Move = function() {
  com.inq.stage.DragResize.call(this);
  this.className = "Move";
  this.cursor = "move";
};
$hxClasses["com.inq.stage.Move"] = com.inq.stage.Move;
com.inq.stage.Move.__name__ = ["com", "inq", "stage", "Move"];
com.inq.stage.Move.__super__ = com.inq.stage.DragResize;
for (var k in com.inq.stage.DragResize.prototype) {
  com.inq.stage.Move.prototype[k] = com.inq.stage.DragResize.prototype[k];
}
com.inq.stage.Move.setDragable = function() {
  if (window.parent.name == "_inqPersistentChat") {
    return;
  }
  var instance = new com.inq.stage.Move;
  var cntr = window.parent.document.getElementById("inqChatStage");
  var dragHandleElem = window.parent.document.getElementById("inqTitleBar");
  instance.init(dragHandleElem, cntr);
};
com.inq.stage.Move.prototype.setTop = function(top) {
  var o = this.obj;
  o.style.top = top + "px";
};
com.inq.stage.Move.prototype.setLeft = function(left) {
  this.obj.style.left = left + "px";
};
com.inq.stage.Move.prototype.setDragBorder = function() {
  var rootHeight = Std.parseInt(this.root.style.height);
  var rootWidth = Std.parseInt(this.root.style.width);
  var borderWidth = 7;
  this.obj.style.cursor = this.cursor;
  this.obj.style.borderStyle = "solid";
  this.obj.style.borderWidth = borderWidth + "px";
  this.obj.style.borderColor = com.inq.utils.Util.getConfig("dragBorderColor", com.inq.stage.DragResize.DEFAULT_BORDER_COLOR);
  this.obj.style.height = rootHeight - borderWidth + "px";
  this.obj.style.width = rootWidth - borderWidth + "px";
};
com.inq.stage.Move.prototype.whenDone = function() {
  this.root.style.left = Std.string(this.pDraggerNow.X) + "px";
  this.root.style.top = Std.string(this.pDraggerNow.Y) + "px";
  var position = {X:this.pDraggerNow.X, Y:this.pDraggerNow.Y};
  Application.MoveStage(position.X, position.Y);
  var vp = com.inq.utils.Capabilities.getViewport();
  Application.initialXPos = position.X - vp.x;
  Application.initialYPos = position.Y - vp.y;
};
com.inq.stage.Move.prototype.getDefaultMax = function() {
  var width = Std.parseInt(this.root.style.width);
  var height = Std.parseInt(this.root.style.height);
  return {X:com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft() + com.inq.flash.client.chatskins.ScrollMonitor.getScrollWidth() - width, Y:com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop() + com.inq.flash.client.chatskins.ScrollMonitor.getScrollHeight() - height};
};
com.inq.stage.Move.prototype.getDefaultMin = function() {
  return {X:com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft(), Y:com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop()};
};
com.inq.stage.Move.prototype.__class__ = com.inq.stage.Move;
com.inq.stage.Move.__interfaces__ = [com.inq.stage.IDragResize];
com.inq.stage.Resize = function() {
  com.inq.stage.DragResize.call(this);
  this.className = "Resize";
  this.cursor = "se-resize";
};
$hxClasses["com.inq.stage.Resize"] = com.inq.stage.Resize;
com.inq.stage.Resize.__name__ = ["com", "inq", "stage", "Resize"];
com.inq.stage.Resize.__super__ = com.inq.stage.DragResize;
for (var k in com.inq.stage.DragResize.prototype) {
  com.inq.stage.Resize.prototype[k] = com.inq.stage.DragResize.prototype[k];
}
com.inq.stage.Resize.setResizable = function() {
  if (window.parent.name == "_inqPersistentChat") {
    return;
  }
  var instance = new com.inq.stage.Resize;
  var cntr = window.parent.document.getElementById("inqChatStage");
  var dragHandleElem = window.parent.document.getElementById("inqDivResizeCorner");
  var allDragSafeEl = window.parent.document.getElementsByName("DragSafe");
  for (var i = 0;i < dragHandleElem.length;i++) {
    dragHandleElem[i].setAttribute("aria-hidden", "true");
    dragHandleElem[i].setAttribute("alt", "");
    dragHandleElem[i].setAttribute("tabindex", "-1");
  }
  for (var j = 0;j < allDragSafeEl.length;j++) {
    allDragSafeEl[j].setAttribute("aria-hidden", "true");
    allDragSafeEl[j].setAttribute("alt", "");
    allDragSafeEl[j].setAttribute("tabindex", "-1");
  }
  instance.init(dragHandleElem, cntr);
};
com.inq.stage.Resize.prototype.whenDone = function() {
  this.titlebar.style.cssText = this.titlebarStyle;
  Application.ResizeStage(this.newWidth, this.newHeight);
};
com.inq.stage.Resize.prototype.setDragBorder = function() {
  this.stageLeft = this.root.style.left;
  this.stageTop = this.root.style.top;
  var height = Std.parseInt(this.root.style.height);
  var width = Std.parseInt(this.root.style.width);
  var borderWidth = 3;
  this.obj.style.cursor = "se-resize";
  this.titlebar = window.parent.document.getElementById("inqTitleBar");
  if (null == this.titlebarStyle) {
    this.titlebarStyle = this.titlebar.style.cssText;
  }
  this.titlebar.style.top = this.root.style.top;
  this.titlebar.style.left = this.root.style.left;
  this.titlebar.style.borderStyle = "dashed";
  this.titlebar.style.cursor = "se-resize";
  this.titlebar.style.borderWidth = borderWidth + "px";
  this.titlebar.style.borderColor = com.inq.utils.Util.getConfig("dragBorderColor", com.inq.stage.DragResize.DEFAULT_BORDER_COLOR);
  this.titlebar.style.height = height - borderWidth + "px";
  this.titlebar.style.width = width - borderWidth + "px";
};
com.inq.stage.Resize.prototype.setTop = function(top) {
  this.newHeight = top - this.pStart.Y + this.draggerHeight;
  this.titlebar.style.height = this.newHeight + "px";
  this.obj.style.top = top + "px";
};
com.inq.stage.Resize.prototype.setLeft = function(left) {
  this.newWidth = left - this.pStart.X + this.draggerWidth;
  this.titlebar.style.width = this.newWidth + "px";
  this.obj.style.left = left + "px";
};
com.inq.stage.Resize.prototype.getDefaultMax = function() {
  var width = Std.parseInt(this.obj.style.width);
  var height = Std.parseInt(this.obj.style.height);
  return {X:com.inq.flash.client.chatskins.ScrollMonitor.getScrollLeft() + com.inq.flash.client.chatskins.ScrollMonitor.getScrollWidth() - width, Y:com.inq.flash.client.chatskins.ScrollMonitor.getScrollTop() + com.inq.flash.client.chatskins.ScrollMonitor.getScrollHeight() - height};
};
com.inq.stage.Resize.prototype.getDefaultMin = function() {
  return {X:this.pStart.X + Application.getMinWidth(), Y:this.pStart.Y + Application.getMinHeight()};
};
com.inq.stage.Resize.prototype.uponDrop = function(e) {
  this.titlebar.style.cssText = this.titlebarStyle;
  return com.inq.stage.DragResize.prototype.uponDrop.call(this, e);
};
com.inq.stage.Resize.prototype.newHeight = null;
com.inq.stage.Resize.prototype.newWidth = null;
com.inq.stage.Resize.prototype.titlebarStyle = null;
com.inq.stage.Resize.prototype.titlebar = null;
com.inq.stage.Resize.prototype.stageLeft = null;
com.inq.stage.Resize.prototype.stageTop = null;
com.inq.stage.Resize.prototype.__class__ = com.inq.stage.Resize;
com.inq.stage.Resize.__interfaces__ = [com.inq.stage.IDragResize];
com.inq.stage.ViewportMgr = function() {
};
$hxClasses.registerClass(com.inq.stage.ViewportMgr, "com.inq.stage.ViewportMgr");
com.inq.stage.ViewportMgr.VIEWPORT_ID = "tcChat_viewport";
com.inq.stage.ViewportMgr.impl = null;
com.inq.stage.ViewportMgr.init = function() {
  if (com.inq.stage.ViewportMgr.impl == null) {
    com.inq.stage.ViewportMgr.impl = com.inq.stage.ViewportMgr.getImplementation();
  }
};
com.inq.stage.ViewportMgr.close = function() {
  if (com.inq.stage.ViewportMgr.impl != null) {
    com.inq.stage.ViewportMgr.hide();
  }
  com.inq.stage.ViewportMgr.impl = null;
};
com.inq.stage.ViewportMgr.visible = function(_vis) {
  if (_vis) {
    com.inq.stage.ViewportMgr.show();
  } else {
    com.inq.stage.ViewportMgr.hide();
  }
};
com.inq.stage.ViewportMgr.show = function() {
  if (com.inq.flash.client.control.MinimizeManager.isMinimized()) {
    return;
  }
  if (com.inq.stage.ViewportMgr.impl == null) {
    com.inq.stage.ViewportMgr.init();
  }
  com.inq.stage.ViewportMgr.impl && com.inq.stage.ViewportMgr.impl.show();
  if ((com.inq.utils.Capabilities.isSafariVersion9() || com.inq.utils.Capabilities.getUserAgent().toLowerCase().indexOf("crios") > -1) && com.inq.utils.Capabilities.isPhone() && (typeof com.inq.flash.client.chatskins.ChatTextFocusMonitor.closing !== "undefined" && com.inq.flash.client.chatskins.ChatTextFocusMonitor.closing === false)) {
    com.inq.utils.Timer.delay($bind(com.inq.stage.ViewportMgr.impl, com.inq.stage.ViewportMgr.impl.resizeChat), 50);
  }
};
com.inq.stage.ViewportMgr.hide = function() {
  if (com.inq.stage.ViewportMgr.impl == null) {
    com.inq.stage.ViewportMgr.init();
  }
  com.inq.stage.ViewportMgr.impl && com.inq.stage.ViewportMgr.impl.hide();
};
com.inq.stage.ViewportMgr.uponResize = function() {
  if (com.inq.stage.ViewportMgr.impl == null) {
    com.inq.stage.ViewportMgr.init();
  }
  com.inq.stage.ViewportMgr.impl && com.inq.stage.ViewportMgr.impl.uponResize();
};
com.inq.stage.ViewportMgr.getChatZoomLevel = function() {
  if (com.inq.stage.ViewportMgr.impl == null) {
    com.inq.stage.ViewportMgr.init();
  }
  com.inq.stage.ViewportMgr.impl && com.inq.stage.ViewportMgr.impl.getChatZoomLevel();
};
com.inq.stage.ViewportMgr.getImplementation = function() {
  if (com.inq.utils.Capabilities.isPhone()) {
    if (com.inq.utils.Capabilities.isWindowsPhone()) {
      return new com.inq.stage.ViewportMgrImplPhoneWindows;
    } else {
      if (com.inq.utils.Capabilities.isAndroid()) {
        if (com.inq.utils.Capabilities.isAndroid("Android 2")) {
          return new com.inq.stage.ViewportMgrImplPhoneAndroid_2;
        } else {
          return new com.inq.stage.ViewportMgrImplPhoneAndroid;
        }
      }
    }
    return new com.inq.stage.ViewportMgrImplPhone;
  } else {
    if (com.inq.utils.Capabilities.isTablet()) {
      return new com.inq.stage.ViewportMgrImplTablet;
    } else {
      return new com.inq.stage.ViewportMgrImplBase;
    }
  }
};
com.inq.stage.ViewportMgr.prototype.__class__ = com.inq.stage.ViewportMgr;
com.inq.stage.ViewportMgrImplBase = function() {
  this.isShown = false;
};
$hxClasses.registerClass(com.inq.stage.ViewportMgrImplBase, "com.inq.stage.ViewportMgrImplBase");
com.inq.stage.ViewportMgrImplBase.prototype.isShown = false;
com.inq.stage.ViewportMgrImplBase.prototype.hide = function() {
  if (!this.isShown) {
    return;
  }
  this.isShown = false;
};
com.inq.stage.ViewportMgrImplBase.prototype.show = function() {
  if (this.isShown) {
    return;
  }
  this.isShown = true;
};
com.inq.stage.ViewportMgrImplBase.prototype.uponResize = function() {
};
com.inq.stage.ViewportMgrImplBase.prototype.getChatZoomLevel = function() {
  return window.top.innerWidth / window.top.document.documentElement.offsetWidth;
};
com.inq.stage.ViewportMgrImplBase.prototype.__class__ = com.inq.stage.ViewportMgrImplBase;
com.inq.stage.ViewportMgrImplMobile = function() {
  com.inq.stage.ViewportMgrImplBase.call(this);
  this.clientWindow = window.parent;
  this.clientDocument = this.clientWindow.document;
  this.headHtml = null;
  this.clientViewportElement = null;
  this.clientViewportContent = null;
  this.chatViewportElement = null;
  this.chatViewportClient = null;
  this.getViewportElement();
  this.isShown = false;
  this.phoneWidth = 0;
  this.restoreWidth = window.top.innerWidth;
  this.touchListener = $bind(this, this.uponTouch);
  this.resizeListener = $bind(this, this.uponResize);
  this.orientationListener = $bind(this, this.uponOrientationChange);
  var viewportList = window.top.document.getElementsByName("viewport");
  if (viewportList == null || viewportList.length == 0) {
    if (com.inq.utils.Capabilities.isAndroid() && com.inq.utils.Capabilities.isTablet()) {
      this.restoreWidth = window.top.document.body.clientWidth;
    } else {
      this.restoreWidth = window.top.document.documentElement.offsetWidth;
    }
    this.createViewportElement("width=device-width");
    if (com.inq.utils.Capabilities.isAndroid() && com.inq.utils.Capabilities.isTablet()) {
      this.phoneWidth = window.top.document.documentElement.clientWidth;
    } else {
      this.phoneWidth = window.top.document.documentElement.offsetWidth;
    }
    this.adjustViewport();
    this.restoreContent = null;
    this.clientViewportContent = null;
  } else {
    this.chatViewportClient = viewportList[0];
    this.clientViewportContent = this.chatViewportClient.content;
  }
};
$hxClasses.extend(com.inq.stage.ViewportMgrImplBase, com.inq.stage.ViewportMgrImplMobile, "com.inq.stage.ViewportMgrImplMobile");
com.inq.stage.ViewportMgrImplMobile.prototype.createViewportElement = function(content) {
  if (this.chatViewportElement != null) {
    return;
  }
  var headCollection = this.clientDocument.getElementsByTagName("head");
  if (headCollection == null || headCollection.length < 1) {
    return;
  }
  this.headHtml = headCollection[0];
  if (this.chatViewportElement == null) {
    this.chatViewportElement = this.clientDocument.createElement("META");
    this.chatViewportElement.name = "viewport";
    this.chatViewportElement.id = com.inq.stage.ViewportMgr.VIEWPORT_ID;
    this.chatViewportElement.content = content;
    this.chatViewportElement.setAttribute("id", com.inq.stage.ViewportMgr.VIEWPORT_ID);
    this.chatViewportElement.setAttribute("name", "viewport");
    this.chatViewportElement.setAttribute("content", content);
    this.headHtml.appendChild(this.chatViewportElement);
  }
};
com.inq.stage.ViewportMgrImplMobile.prototype.modifyViewport = function(content) {
  if (this.chatViewportElement != null) {
    this.chatViewportElement.name = "viewport";
    this.chatViewportElement.content = content;
    this.chatViewportElement.setAttribute("name", "viewport");
    this.chatViewportElement.setAttribute("content", content);
  } else {
    if (this.chatViewportClient != null) {
      this.chatViewportClient.content = content;
    }
  }
};
com.inq.stage.ViewportMgrImplMobile.prototype.RestoreViewport = function() {
  try {
    var zoomLevel = 1;
    try {
      zoomLevel = this.phoneWidth / this.restoreWidth;
    } catch (e) {
      haxe.Log.trace("error: " + Std.string(e), {fileName:"ViewportMgrImplMobile.hx", lineNumber:248, className:"com.inq.stage.ViewportMgrImplMobile", methodName:"RestoreViewport"});
      zoomLevel = 1;
    }
    if (this.chatViewportClient != null && this.clientViewportContent != null) {
      this.modifyViewport(this.clientViewportContent);
    } else {
      if (zoomLevel >= .25 && zoomLevel <= 5) {
        this.modifyViewport("width=device-width, initial-scale=" + zoomLevel + ", minimum-scale=0.25, maximum-scale=5, user-scalable=yes");
      } else {
        this.modifyViewport("width=" + this.restoreWidth + ", minimum-scale=0.25, maximum-scale=5, user-scalable=yes");
      }
    }
  } catch (er) {
    haxe.Log.trace("RestoreViewport ERROR: " + er);
  }
};
com.inq.stage.ViewportMgrImplMobile.prototype.getViewportElement = function() {
  var ix;
  this.clientViewportElement = null;
  var viewports = this.clientDocument.getElementsByName("viewport");
  if (viewports != null && viewports.length > 0) {
    var _g1 = 0;
    var _g = viewports.length;
    while (_g1 < _g) {
      var ix1 = _g1++;
      var el = viewports[ix1];
      if (("" + el.tagName).toLowerCase() == "meta") {
        if (el.id == com.inq.stage.ViewportMgr.VIEWPORT_ID) {
          this.chatViewportElement = el;
        } else {
          this.clientViewportElement = el;
        }
      }
    }
  }
};
com.inq.stage.ViewportMgrImplMobile.prototype.getDeviceWidth = function() {
  return this.clientWindow.innerWidth;
};
com.inq.stage.ViewportMgrImplMobile.prototype.getInitialWidth = function() {
  return this.clientWindow.innerWidth;
};
com.inq.stage.ViewportMgrImplMobile.prototype.fixPositioning = function() {
  com.inq.flash.client.chatskins.ScrollMonitor.ScrollToNearTop();
  Application.application.setStyle("zoom", "" + Application.initialZoom);
  this.resizeToViewport();
};
com.inq.stage.ViewportMgrImplMobile.prototype.resizeToViewport = function() {
  com.inq.flash.client.chatskins.ChatTextFocusMonitor.resizeToViewport("ViewportMgr: fixPositioning");
};
com.inq.stage.ViewportMgrImplMobile.prototype.hide = function() {
  if (this.isShown === true) {
    try {
      com.inq.utils.Capabilities.UnbindListener(this.clientDocument, "touchmove", this.touchListener);
      com.inq.utils.Capabilities.UnbindListener(this.clientWindow, "orientationchange", this.orientationListener);
      com.inq.utils.Capabilities.UnbindListener(this.clientWindow, "resize", this.resizeListener);
      this.clientDocument.body.style.minHeight = "";
      if (this.restoreWidth == this.clientWidth && this.clientViewportContent && (com.inq.flash.client.chatskins.ChatTextFocusMonitor.closing || com.inq.flash.client.control.MinimizeManager.minimized)) {
        com.inq.utils.Timer.delay($bind(this, function() {
          this.RestoreViewport();
        }), 100);
      } else {
        this.RestoreViewport();
      }
      this.clientWindow.scrollTo(this.clientLeftOffset, this.clientTopOffset);
      this.isShown = false;
    } catch (er) {
      haxe.Log.trace("ViewportMgrImpStd._hide: ERROR:" + Std.string(er));
    }
  }
};
com.inq.stage.ViewportMgrImplMobile.prototype.calcPhoneWidth = function() {
  if (this.phoneWidth == 0) {
    this.modifyViewport("width=device-width");
    this.phoneWidth = window.top.document.documentElement.offsetWidth;
    this.adjustViewport();
  }
};
com.inq.stage.ViewportMgrImplMobile.prototype.show = function() {
  if (this.isShown == false) {
    try {
      this.clientLeftOffset = this.clientWindow.pageXOffset;
      this.clientTopOffset = this.clientWindow.pageYOffset;
      this.clientDocument.body.style.minHeight = this.clientDocument.documentElement.offsetHeight + 1 + "px";
      com.inq.utils.Capabilities.BindListener(this.clientWindow, "resize", this.resizeListener);
      com.inq.utils.Capabilities.BindListener(this.clientWindow, "orientationchange", this.orientationListener);
      com.inq.utils.Capabilities.BindListener(this.clientDocument, "touchmove", this.touchListener);
      this.clientWidth = this.getInitialWidth();
      this.calcPhoneWidth();
      this.fixedWidthViewport();
      Application.initialZoom = this.clientWindow.innerWidth / this.phoneWidth;
      this.fixPositioning();
      this.isShown = true;
    } catch (e) {
      com.inq.utils.Capabilities.UnbindListener(this.clientWindow, "resize", this.resizeListener);
      com.inq.utils.Capabilities.UnbindListener(this.clientWindow, "orientationchange", this.orientationListener);
      com.inq.utils.Capabilities.UnbindListener(this.clientDocument, "touchmove", this.touchListener);
      this.isShown = false;
    }
  }
};
com.inq.stage.ViewportMgrImplMobile.prototype.resizeChat = function() {
  this.hide();
  this.phoneWidth = 0;
  this.show();
};
com.inq.stage.ViewportMgrImplMobile.prototype.adjustViewport = function() {
  var zoomLevel = 1;
  try {
    zoomLevel = this.phoneWidth / this.restoreWidth;
  } catch (e) {
    haxe.Log.trace("error: " + Std.string(e), {fileName:"ViewportMgrImplMobile.hx", lineNumber:87, className:"com.inq.stage.ViewportMgrImplMobile", methodName:"adjustViewport"});
  }
  if (zoomLevel >= .25 && zoomLevel <= 5) {
    this.modifyViewport("width=device-width, initial-scale=" + zoomLevel + ", minimum-scale=0.25, maximum-scale=5, user-scalable=yes");
  } else {
    this.modifyViewport("width=" + this.restoreWidth + ", minimum-scale=0.25, maximum-scale=5, user-scalable=yes");
  }
};
com.inq.stage.ViewportMgrImplMobile.prototype.fixedWidthViewport = function() {
  if (com.inq.utils.Capabilities.isSafariVersion9() && com.inq.utils.Capabilities.isPhone()) {
    this.modifyViewport(com.inq.stage.ViewportMgrImplMobile.FIXED_CONTENT_IOS);
  } else {
    this.modifyViewport(com.inq.stage.ViewportMgrImplMobile.FIXED_CONTENT);
  }
};
com.inq.stage.ViewportMgrImplMobile.prototype.uponTouch = function(event) {
  if (com.inq.utils.Capabilities.isPhone()) {
    event.preventDefault();
  } else {
    if (event.touches.length == 2) {
      event.preventDefault();
    }
  }
};
com.inq.stage.ViewportMgrImplMobile.prototype.uponOrientationChange = function(event) {
  if (com.inq.ui.Stage.getInstance().getVisible()) {
    com.inq.utils.Timer.delay($bind(this, this.resizeChat), 50);
    var xframes = Application.application.getXFrameItems();
    for (var i = 0;i < xframes.length;i++) {
      xframes[i].resetScrolling();
    }
  }
};
com.inq.stage.ViewportMgrImplMobile.prototype.uponFocus = function(event) {
  if (this.clientWindow.innerWidth != this.restoreWidth) {
  }
};
com.inq.stage.ViewportMgrImplMobile.prototype.orientationListener = null;
com.inq.stage.ViewportMgrImplMobile.prototype.resizeListener = null;
com.inq.stage.ViewportMgrImplMobile.prototype.touchListener = null;
com.inq.stage.ViewportMgrImplMobile.prototype.restoreWidth = null;
com.inq.stage.ViewportMgrImplMobile.prototype.phoneWidth = null;
com.inq.stage.ViewportMgrImplMobile.prototype.clientTopOffset = null;
com.inq.stage.ViewportMgrImplMobile.prototype.clientLeftOffset = null;
com.inq.stage.ViewportMgrImplMobile.prototype.clientWidth = null;
com.inq.stage.ViewportMgrImplMobile.prototype.clientDocument = null;
com.inq.stage.ViewportMgrImplMobile.prototype.clientWindow = null;
com.inq.stage.ViewportMgrImplMobile.prototype.chatViewportClient = null;
com.inq.stage.ViewportMgrImplMobile.prototype.chatViewportElement = null;
com.inq.stage.ViewportMgrImplMobile.prototype.clientViewportContent = null;
com.inq.stage.ViewportMgrImplMobile.prototype.clientViewportElement = null;
com.inq.stage.ViewportMgrImplMobile.prototype.headHtml = null;
com.inq.stage.ViewportMgrImplMobile.DEFAULT_CONTENT = "width=device-width, minimum-scale=1, maximum-scale=1, user-scalable=yes";
com.inq.stage.ViewportMgrImplMobile.FIXED_CONTENT = "width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes";
com.inq.stage.ViewportMgrImplMobile.FIXED_CONTENT_IOS = "width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes, shrink-to-fit=no";
com.inq.stage.ViewportMgrImplMobile.prototype.__class__ = com.inq.stage.ViewportMgrImplMobile;
com.inq.stage.ViewportMgrImplPhone = function() {
  com.inq.stage.ViewportMgrImplMobile.call(this);
};
$hxClasses.extend(com.inq.stage.ViewportMgrImplMobile, com.inq.stage.ViewportMgrImplPhone, "com.inq.stage.ViewportMgrImplPhone");
com.inq.stage.ViewportMgrImplPhone.prototype.fixPositioning = function() {
  com.inq.stage.ViewportMgrImplMobile.prototype.fixPositioning.call(this);
  if (this.clientDocument.documentElement.offsetHeight < window.top.innerHeight) {
    this.clientDocument.body.style.minHeight = this.clientWindow.document.documentElement.offsetHeight + window.top.innerHeight + "px";
  }
  if (this.clientWindow.pageYOffset == 0) {
    this.clientWindow.scrollTo(this.clientWindow.pageXOffset, 1);
  }
  if (window.top.innerWidth < window.parent.screen.width && !com.inq.utils.Capabilities.isAndroidWebView() && !com.inq.utils.Capabilities.isIOSWebView()) {
    if (com.inq.ui.Stage.getInstance().getVisible()) {
      com.inq.utils.Timer.delay($bind(this, this.resizeChat), 50);
    }
  }
};
com.inq.stage.ViewportMgrImplPhone.prototype.__class__ = com.inq.stage.ViewportMgrImplPhone;
com.inq.stage.ViewportMgrImplPhoneAndroid = function() {
  com.inq.stage.ViewportMgrImplPhone.call(this);
};
$hxClasses.extend(com.inq.stage.ViewportMgrImplPhone, com.inq.stage.ViewportMgrImplPhoneAndroid, "com.inq.stage.ViewportMgrImplPhoneAndroid");
com.inq.stage.ViewportMgrImplPhoneAndroid.prototype.uponResizeId = 0;
com.inq.stage.ViewportMgrImplPhoneAndroid.FIXED_CONTENT = "width=device-width, initial-scale=1.0, maximum-scale=1.0";
com.inq.stage.ViewportMgrImplPhoneAndroid.chatWindowZoomLevel = 1;
com.inq.stage.ViewportMgrImplPhoneAndroid.prototype.calcPhoneWidth = function() {
  if (this.phoneWidth == 0) {
    this.modifyViewport("width=device-width");
    var stage = com.inq.ui.Stage.getInstance();
    var stageElement = com.inq.ui.Stage.getStageElement();
    Application.application.applyStyle();
    this.phoneWidth = stageElement.offsetWidth;
  }
};
com.inq.stage.ViewportMgrImplPhoneAndroid.prototype.fixedWidthViewport = function() {
  this.modifyViewport("width=device-width, user-scalable=no");
  try {
    top.document.getElementById("inqDivResizeCorner").style.display = "";
  } catch (ex) {
  }
};
com.inq.stage.ViewportMgrImplPhoneAndroid.prototype.uponResizeAction = function() {
  this.uponResizeId = 0;
  if (com.inq.ui.Stage.getInstance().getVisible()) {
    Application.SetArea(com.inq.utils.Capabilities.getViewport());
  }
};
com.inq.stage.ViewportMgrImplPhoneAndroid.prototype.uponResize = function(event) {
  if (this.uponResizeId != 0) {
    window.clearTimeout(this.uponResizeId);
  }
  this.uponResizeId = com.inq.utils.Capabilities.waitFor(com.inq.utils.Capabilities.viewportStopsMoving(300), 100, this.uponResizeAction);
};
com.inq.stage.ViewportMgrImplPhoneAndroid.prototype.resizeToViewport = function() {
  com.inq.flash.client.chatskins.ScrollMonitor.unbindAll();
  if (com.inq.stage.ViewportMgrImplPhoneAndroid.chatWindowZoomLevel != Application.initialZoom) {
    Application.initialZoom = com.inq.stage.ViewportMgrImplPhoneAndroid.chatWindowZoomLevel;
    Application.application.setStyle("zoom", "" + Application.initialZoom);
  }
  try {
    Application.SetArea(com.inq.utils.Capabilities.getViewport());
    Application.Resize();
  } catch (err) {
    haxe.Log.trace("Error: " + err, {fileName:"ViewportMgrImplPhoneAndroid.js", lineNumber:111, className:"com.inq.stage.ViewportMgrImplPhoneAndroid", methodName:"resizeToViewport"});
  }
  com.inq.flash.client.chatskins.ScrollMonitor.bindAll();
};
com.inq.stage.ViewportMgrImplPhoneAndroid.prototype.getChatWindowZoomLevel = function() {
  return com.inq.stage.ViewportMgrImplPhoneAndroid.chatWindowZoomLevel;
};
com.inq.stage.ViewportMgrImplPhoneAndroid.prototype.RestoreViewport = function() {
  com.inq.stage.ViewportMgrImplPhone.prototype.RestoreViewport.call(this);
  try {
    top.document.getElementById("inqDivResizeCorner").style.display = "none";
  } catch (ex) {
  }
};
com.inq.stage.ViewportMgrImplPhoneAndroid.prototype.fixPositioning = function() {
  com.inq.stage.ViewportMgrImplMobile.prototype.fixPositioning.call(this);
  if (this.clientWindow.pageYOffset == 0) {
    this.clientWindow.scrollTo(this.clientWindow.pageXOffset, 1);
  }
};
com.inq.stage.ViewportMgrImplPhoneAndroid_2 = function() {
  com.inq.stage.ViewportMgrImplPhoneAndroid.call(this);
};
$hxClasses.extend(com.inq.stage.ViewportMgrImplPhoneAndroid, com.inq.stage.ViewportMgrImplPhoneAndroid_2, "com.inq.stage.ViewportMgrImplPhoneAndroid_2");
com.inq.stage.ViewportMgrImplPhoneAndroid_2.prototype.getInitialWidth = function() {
  this.createViewportElement("");
  var iw = this.clientWindow.document.body.clientWidth;
  var innerWidth = this.clientWindow.innerWidth;
  var testDiv = this.clientDocument.createElement("DIV");
  testDiv.style.cssText = "position: fixed; top: 3px; left: 3px; right: 3px; bottom: 3px; background-color: red; display: block;";
  testDiv.id = "tcChat_TestDiv";
  this.clientDocument.body.appendChild(testDiv);
  var divWidth = testDiv.clientWidth;
  this.clientWindow.alert("body width is " + iw + "\n" + "div width is " + divWidth + "\n" + "inner width is " + innerWidth);
  this.clientDocument.body.removeChild(testDiv);
  return iw;
};
com.inq.stage.ViewportMgrImplPhoneAndroid_2.prototype.__class__ = com.inq.stage.ViewportMgrImplPhoneAndroid_2;
com.inq.stage.ViewportMgrImplPhoneWindows = function() {
  com.inq.stage.ViewportMgrImplPhoneAndroid.call(this);
};
$hxClasses.extend(com.inq.stage.ViewportMgrImplPhoneAndroid, com.inq.stage.ViewportMgrImplPhoneWindows, "com.inq.stage.ViewportMgrImplPhoneWindows");
com.inq.stage.ViewportMgrImplPhoneWindows.prototype.addCssChatAction = function() {
  try {
    var head = document.getElementsByTagName("head")[0];
    var metaTagEdge = document.createElement("Meta");
    metaTagEdge.setAttribute("http-equiv", "X-UA-Compatible");
    metaTagEdge.setAttribute("content", "IE=edge");
    metaTagEdge.id = "metaTagEdge";
    head.insertBefore(metaTagEdge, head.firstChild);
    var styleText = "html, * {  touch-action: pan-y pan-x !important;    -ms-touch-action: pan-y pan-x !important;}" + " body {  touch-action: none !important;    -ms-touch-action: none !important;}" + " .tcChat {\ttouch-action: pan-y pan-x !important;\t-ms-touch-action: pan-y pan-x !important;}";
    var cssAdjustChatAction = document.getElementById("tcAjustChatAction");
    if (cssAdjustChatAction != null) {
      cssAdjustChatAction.parentNode.removeChild(cssAdjustChatAction);
    }
    var msViewportStyle = document.createElement("style");
    msViewportStyle.id = "tcAjustChatAction";
    msViewportStyle.appendChild(document.createTextNode(styleText));
    head.appendChild(msViewportStyle);
    window.top.document.body.style["-ms-touch-action"] = "none";
  } catch (er) {
    alert("Error in function addCssChatAction: " + er);
  }
};
com.inq.stage.ViewportMgrImplPhoneWindows.prototype.removeCssChatAction = function() {
  var cssAdjustChatAction = document.getElementById("tcAjustChatAction");
  if (cssAdjustChatAction != null) {
    cssAdjustChatAction.parentNode.removeChild(cssAdjustChatAction);
  }
  var metaTagEdge = document.getElementById("metaTagEdge");
  if (metaTagEdge != null) {
    metaTagEdge.parentNode.removeChild(metaTagEdge);
  }
  window.top.document.body.style["-ms-touch-action"] = "";
};
com.inq.stage.ViewportMgrImplPhoneWindows.prototype.show = function() {
  com.inq.stage.ViewportMgrImplPhoneAndroid.prototype.show.call(this);
  this.addCssChatAction();
};
com.inq.stage.ViewportMgrImplPhoneWindows.prototype.hide = function() {
  com.inq.stage.ViewportMgrImplPhoneAndroid.prototype.hide.call(this);
  this.removeCssChatAction();
};
com.inq.stage.ViewportMgrImplPhoneWindows.prototype.fixPositioning = function() {
  com.inq.stage.ViewportMgrImplMobile.prototype.fixPositioning.call(this);
  if (this.clientWindow.pageYOffset == 0) {
    this.clientWindow.scrollTo(this.clientWindow.pageXOffset, 1);
  }
};
com.inq.stage.ViewportMgrImplTablet = function() {
  com.inq.stage.ViewportMgrImplMobile.call(this);
  if (this.clientViewportElement == null) {
    this.createViewportElement("");
    this.RestoreViewport();
  }
};
$hxClasses.extend(com.inq.stage.ViewportMgrImplMobile, com.inq.stage.ViewportMgrImplTablet, "com.inq.stage.ViewportMgrImplTablet");
com.inq.stage.ViewportMgrImplTablet.prototype.hide = function() {
  if (this.isShown === true) {
    this.isShown = false;
  }
};
com.inq.stage.ViewportMgrImplTablet.prototype.show = function() {
  if (this.isShown !== true) {
    this.isShown = true;
  }
};
com.inq.stage.ViewportMgrImplTablet.prototype.__class__ = com.inq.stage.ViewportMgrImplTablet;
com.inq.ui.AbstractTextInput = function(_id) {
  com.inq.ui.Container.call(this, _id);
  this.maxChars = 0;
  if ("" == window.document.body.style.fontFamily) {
    try {
      window.document.body.style.fontFamily = com.inq.utils.Util.getConfig("sFont", "Verdana, Arial, Helvetica");
      var fontsize = com.inq.utils.Util.getConfig("pointSize", null);
      if (fontsize !== null) {
        window.document.body.style.fontSize = "" + Std.string(fontsize) + "pt";
      }
    } catch (e) {
      haxe.Log.trace("could not set font family and point size", {fileName:"AbstractTextInput.hx", lineNumber:26, className:"com.inq.ui.AbstractTextInput", methodName:"new"});
    }
  }
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.AbstractTextInput, "com.inq.ui.AbstractTextInput");
com.inq.ui.AbstractTextInput._isWindowsChromeWindowsMac = /(Windows|Linux|Macintosh).*AppleWebKit?.*Chrome/i.test(navigator.userAgent);
com.inq.ui.AbstractTextInput.prototype.usePlaceholder = function() {
  return com.inq.utils.Capabilities.isIe10Phone();
};
com.inq.ui.AbstractTextInput.isViewable = function(input) {
  var p = input;
  while (p != null) {
    try {
      if (p["style"] != null && (p.style.display == "none" || p.style.visible == "false")) {
        return false;
      }
    } catch (e) {
    }
    p = p.parentNode;
  }
  return true;
};
com.inq.ui.AbstractTextInput.prototype.getCursorPosition = function() {
  if (this._input["createTextRange"] != null && (this.document["selection"] != null && this.document.selection["createRange"])) {
    var selectionRng = this.document.selection.createRange().duplicate();
    selectionRng.moveEnd("character", StringTools.trim(this._getInput()).length);
    if (selectionRng.text == "") {
      return StringTools.trim(this._getInput()).length;
    }
    return StringTools.trim(this._getInput()).lastIndexOf(selectionRng.text);
  } else {
    return this._input["selectionStart"];
  }
};
com.inq.ui.AbstractTextInput.prototype._enable = function(val) {
  if (this._div.childNodes && this._div.childNodes.length > 0) {
    var _g1 = 0, _g = this._div.childNodes.length;
    while (_g1 < _g) {
      var x = _g1++;
      try {
        this._div.childNodes[x].disabled = val;
      } catch (error) {
      }
    }
  }
};
com.inq.ui.AbstractTextInput.prototype._isDisable = function() {
  var isDisabled = true;
  if (this._div.childNodes && this._div.childNodes.length > 0) {
    var _g1 = 0, _g = this._div.childNodes.length;
    while (_g1 < _g) {
      var x = _g1++;
      try {
        isDisabled = isDisabled && !!this._div.childNodes[x].disabled;
      } catch (error) {
      }
    }
  }
  return isDisabled;
};
com.inq.ui.AbstractTextInput.prototype.select = function() {
};
com.inq.ui.AbstractTextInput.prototype._setInput = function(val) {
  if (com.inq.utils.Capabilities.isWindowsPhone()) {
    if (this.pendingTimer) {
      this.pendingValue = val;
    } else {
      var self = this;
      this.pendingValue = val;
      this.pendingTimer = com.inq.utils.Timer.delay(function() {
        self._input.value = self.pendingValue;
        self.pendingTimer = null;
        self.pendingValue = null;
      }, 1);
    }
  } else {
    this._input.value = val;
  }
};
com.inq.ui.AbstractTextInput.prototype.clear = function() {
  this._setInput("");
};
com.inq.ui.AbstractTextInput.prototype._getInput = function() {
  if (com.inq.utils.Capabilities.isWindowsPhone()) {
    if (this.pendingTimer) {
      return this.pendingValue;
    }
  }
  return this._input.value;
};
com.inq.ui.AbstractTextInput.prototype.setFocus = function(force) {
  if (com.inq.utils.Capabilities.isIphone() && !force) {
    return;
  } else {
    if (com.inq.utils.Capabilities.isIe10Phone() && !force) {
      return;
    } else {
      if (!com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.isTouched && com.inq.utils.Capabilities.isSafari() && !force) {
        return;
      } else {
        if (com.inq.flash.client.control.FlashPeer.getIsBuilder() && !com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.isTouched) {
          return;
        }
      }
    }
  }
  if (com.inq.ui.AbstractTextInput.isViewable(this._input) && !this._isDisable()) {
    try {
      var inputElement = this._input;
      if (inputElement) {
        if (com.inq.ui.AbstractTextInput._isWindowsChromeWindowsMac && !com.inq.utils.Capabilities.isAndroidWebView()) {
          var clientWin = window.top;
          var scrollTop = clientWin.scrollY;
          var scrollLeft = clientWin.scrollX;
          var _area = Application.GetArea();
          var stageStyles = Application.application._div.style.cssText;
          Application.application._div.style.cssText = "position: absolute; top: " + scrollTop + "px; right: " + scrollLeft + "px; height: 1px; width: 1px;display: block;";
          if (!com.inq.flash.client.control.MinimizeManager.isMinimized()) {
            inputElement.focus();
          }
          Application.application._div.style.cssText = stageStyles;
          Application.MoveSizeDiv2Stage(_area.w, _area.h, _area.x, _area.y);
        } else {
          inputElement.focus();
        }
        var doc = inputElement.ownerDocument;
        if (doc.activeElement !== inputElement) {
          window.setTimeout(function() {
            inputElement.focus();
          }, 1);
        }
      }
    } catch (e) {
      haxe.Log.trace("ERROR: Could not set focus", {fileName:"AbstractTextInput.js", lineNumber:200, className:"com.inq.ui.AbstractTextInput", methodName:"setFocus"});
    }
  }
};
com.inq.ui.AbstractTextInput.prototype.setID = function(val) {
  com.inq.ui.Container.prototype.setID.call(this, val);
  if (this._input != null) {
    this._input.id = Std.string(this._div.id) + "_input";
  }
};
com.inq.ui.AbstractTextInput.prototype._onKey = function(ev, kev) {
  var el = this.eventListeners[kev];
  var kbe = new com.inq.events.KeyboardEvent(kev);
  if (null != ev) {
    kbe.keyCode = ev.which;
  } else {
    kbe.keyCode = Application.application.getPanelWindow().event.keyCode;
  }
  if (null != el) {
    return el(kbe);
  }
  return true;
};
com.inq.ui.AbstractTextInput.prototype._onInput = function(ev) {
  this.dispatchEvent(ev);
};
com.inq.ui.AbstractTextInput.prototype._onKeyPress = function(evt) {
  var evtListener = this.eventListeners[com.inq.events.KeyboardEvent.KEY_PRESS];
  var keyEvt = new com.inq.events.KeyboardEvent(com.inq.events.KeyboardEvent.KEY_PRESS);
  keyEvt.keyCode = null != evt ? evt.which : Application.application.getPanelWindow().event.keyCode;
  keyEvt.charCode = null != evt ? evt.which : Application.application.getPanelWindow().event.charCode;
  keyEvt.ctrlKey = null != evt ? evt.ctrlKey : !!Application.application.getPanelWindow().event.ctrlKey;
  keyEvt.altKey = null != evt ? evt.altKey : !!Application.application.getPanelWindow().event.altKey;
  keyEvt.shiftKey = null != evt ? evt.shiftKey : !!Application.application.getPanelWindow().event.shiftKey;
  keyEvt.charCode = keyEvt.keyCode = keyEvt.charCode || keyEvt.keyCode;
  if (keyEvt.ctrlKey || keyEvt.keyCode < 32) {
    if (null != evtListener) {
      return evtListener(keyEvt);
    }
    return true;
  }
  var sMaxChars = this.getStyle("maxChars");
  this.maxChars = sMaxChars != null ? Std.parseInt(sMaxChars) : 0;
  if (this.maxChars > 0) {
    var len = this._getInput().length - this._getSelectedText().length;
    if (len >= this.maxChars) {
      return false;
    }
  }
  var sRestrict = this.getStyle("restrict");
  if (sRestrict != null) {
    var character = String.fromCharCode(keyEvt.keyCode);
    if (sRestrict.indexOf(character) < 0) {
      return false;
    }
  }
  if (null != evtListener) {
    return evtListener(keyEvt);
  }
  return true;
};
com.inq.ui.AbstractTextInput.prototype.validateAndFormat = function() {
  var text = this._getInput();
  var validate = this.getStyle("validate");
  if (validate == null) {
    return true;
  }
  var rex = new EReg(validate, "");
  if (text.length == 0) {
    return true;
  }
  text = this.applyFilter(text);
  this._setInput(text);
  if (!rex.match(text)) {
    this.setFocus();
    return false;
  }
  var format = this.getStyle("format");
  if (format != null) {
    text = rex.replace(text, format);
    this._setInput(text);
  }
  return true;
};
com.inq.ui.AbstractTextInput.prototype._isVisible = function() {
  var p = this._input;
  while (p) {
    if (p.style.display.toLowerCase() == "none") {
      return false;
    }
    p = p.parentNode;
    if (p.tagName.toUpperCase() == "BODY") {
      break;
    }
  }
  return true;
};
com.inq.ui.AbstractTextInput.prototype.applyFilter = function(text) {
  var newText = "";
  var curChar;
  var sRestrict = this.getStyle("restrict");
  if (sRestrict != null) {
    var ix;
    var _g1 = 0, _g = text.length;
    while (_g1 < _g) {
      var ix1 = _g1++;
      curChar = HxOverrides.substr(text, ix1, 1);
      if (sRestrict.indexOf(curChar) >= 0) {
        newText += curChar;
      }
    }
  } else {
    newText = text;
  }
  var sMaxChars = this.getStyle("maxChars");
  this.maxChars = sMaxChars != null ? Std.parseInt(sMaxChars) : 0;
  if (this.maxChars > 0 && this.maxChars < newText.length) {
    newText = HxOverrides.substr(newText, 0, this.maxChars);
  }
  return newText;
};
com.inq.ui.AbstractTextInput.prototype._onFocus = function(ev, kev) {
  var el = this.eventListeners[kev];
  if (null != el) {
    var kbe = new com.inq.events.KeyboardEvent(kev);
    if (null != ev) {
      kbe.keyCode = ev.which;
    } else {
      kbe.keyCode = Application.application.getPanelWindow().event.keyCode;
    }
    return el(kbe);
  }
  return true;
};
com.inq.ui.AbstractTextInput.prototype._onKeyUp = function(ev) {
  try {
    return this._onKey(ev, com.inq.events.KeyboardEvent.KEY_UP);
  } catch (e) {
  }
  return true;
};
com.inq.ui.AbstractTextInput.prototype._getSelectedText = function() {
  if (this._input["selectionStart"] != null && this._input["selectionEnd"] != null) {
    return this._getInput().substring(this._input.selectionStart, this._input.selectionEnd);
  } else {
    if (this._input["createTextRange"] != null && (this.document["selection"] != null && this.document.selection["createRange"])) {
      var selectionRng = this.document.selection.createRange();
      var inputRng = this._input.createTextRange();
      if (inputRng != null && selectionRng != null && selectionRng.text.length > 0) {
        var isInRange = inputRng.text.indexOf(selectionRng.text) >= 0;
        if (isInRange) {
          return selectionRng.text;
        }
      }
    }
  }
  return "";
};
com.inq.ui.AbstractTextInput.prototype._onKeyDown = function(evt) {
  if (!evt) {
    evt = Application.application.getPanelWindow().event;
  }
  if (evt.keyCode == com.inq.ui.Keyboard.ESCAPE && com.inq.utils.Util.getConfig("escToClose", false)) {
    return false;
  }
  try {
    return this._onKey(evt, com.inq.events.KeyboardEvent.KEY_DOWN);
  } catch (e) {
  }
  return true;
};
com.inq.ui.AbstractTextInput.prototype._onFocusOut = function(ev) {
  try {
    if (!this.validateAndFormat()) {
      return false;
    }
    return this._onFocus(ev, com.inq.events.FocusEvent.FOCUS_OUT);
  } catch (e) {
  }
  return true;
};
com.inq.ui.AbstractTextInput.prototype._onChange = function(ev) {
  return this.validateAndFormat();
};
com.inq.ui.AbstractTextInput.prototype._onFocusIn = function(ev) {
  try {
    var ret = this._onFocus(ev, com.inq.events.FocusEvent.FOCUS_IN);
    return ret;
  } catch (e) {
  }
  return true;
};
com.inq.ui.AbstractTextInput.prototype.blur = function() {
  if (this._input) {
    this._input.blur();
  }
};
com.inq.ui.AbstractTextInput.prototype._doClick = function(ev) {
  var kev = com.inq.events.MouseEvent.CLICK;
  com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.isTouched = true;
  this.setFocus();
  try {
    var el = this.eventListeners[kev];
    if (null != el) {
      var me = new com.inq.events.MouseEvent(kev);
      return el(me);
    }
    return true;
  } catch (e) {
  }
  return true;
};
com.inq.ui.AbstractTextInput.prototype.setupInput = function(input) {
  this._input = input;
  this._input.container = this;
  this._setInput("");
  this._input.oninput = $bind(this, this._onInput);
  this._input.onkeypress = $bind(this, this._onKeyPress);
  this._input.onkeyup = $bind(this, this._onKeyUp);
  this._input.onkeydown = $bind(this, this._onKeyDown);
  this._input.onblur = $bind(this, this._onFocusOut);
  this._input.onfocus = $bind(this, this._onFocusIn);
  this._input.onchange = $bind(this, this._onChange);
  this._div.onclick = $bind(this, this._doClick);
};
com.inq.ui.AbstractTextInput.prototype.setIntroduction = function(introduction) {
  if (!this._placeholder) {
    this._placeholder = new com.inq.ui.Placeholder(this._input, introduction);
  }
  this._introduction = introduction;
};
com.inq.ui.AbstractTextInput.prototype.clearPlaceholder = function() {
  if (this._placeholder) {
    this._placeholder.clear();
  }
};
com.inq.ui.AbstractTextInput.prototype.getInput = function() {
  return this._input;
};
com.inq.ui.AbstractTextInput.prototype.disabled = null;
com.inq.ui.AbstractTextInput.prototype.text = null;
com.inq.ui.AbstractTextInput.prototype.maxChars = null;
com.inq.ui.AbstractTextInput.prototype._introduction = null;
com.inq.ui.AbstractTextInput.prototype._placeholder = null;
com.inq.ui.AbstractTextInput.prototype._input = null;
com.inq.ui.AbstractTextInput.prototype.pendingValue = null;
com.inq.ui.AbstractTextInput.prototype.pendingTimer = null;
com.inq.ui.ArrayCollection = function() {
  this._collection = new Array;
};
$hxClasses.registerClass(com.inq.ui.ArrayCollection, "com.inq.ui.ArrayCollection");
com.inq.ui.ArrayCollection.prototype.getItemAt = function(indx) {
  if (indx < this._collection.length) {
    return this._collection[indx];
  }
  return null;
};
com.inq.ui.ArrayCollection.prototype.getLength = function() {
  return this._collection.length;
};
com.inq.ui.ArrayCollection.prototype.addItem = function(itm) {
  this._collection[this._collection.length] = itm;
};
com.inq.ui.ArrayCollection.prototype.length = null;
com.inq.ui.ArrayCollection.prototype._collection = null;
com.inq.ui.ArrayCollection.prototype.__class__ = com.inq.ui.ArrayCollection;
com.inq.ui.BalloonOverlaying = function(id, styleName, element, text, parent) {
  com.inq.ui.Container.call(this);
  this._element = element;
  this._parent = parent;
  this._styleName = styleName;
  this._styleDef = null;
  this._text = text;
  this._parentContainer = parent;
  this.cornerRadius = 6;
  this._style = com.inq.utils.Util.getConfig(styleName, null);
  if (this._style == null) {
    this._style = styleName == "BalloonNotify" ? ";color:white;background-color:navy;" : styleName == "BalloonWarn" ? ";color:yellow;background-color:red;" : ";color:black;background-color:white;";
  }
  this.render(this._parentContainer);
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.BalloonOverlaying, "com.inq.ui.BalloonOverlaying");
com.inq.ui.BalloonOverlaying._doClick = function(e) {
  var win = window;
  var ob = null != e ? e.target : win.event.srcElement;
  var c = ob.container;
  c.doClick();
};
com.inq.ui.BalloonOverlaying.prototype.applyStyle = function() {
  this.buildStyle();
};
com.inq.ui.BalloonOverlaying.prototype.setID = function(val) {
  com.inq.ui.Container.prototype.setID.call(this, val);
  if (this._img != null) {
    this._img.id = val + "_img";
  }
};
com.inq.ui.BalloonOverlaying.prototype.setHandCursor = function(val) {
  var value = val;
  switch(value.toLowerCase()) {
    case "true":
      this._useHandCursor = true;
      break;
    case "false":
      this._useHandCursor = false;
      break;
    default:
      this._useHandCursor = false;
  }
  this.useHandCursor = this._useHandCursor ? "true" : "false";
};
com.inq.ui.BalloonOverlaying.prototype.destroy = function() {
  if (this._div.parentNode != null) {
    try {
      this._div.parentNode.removeChild(this._div);
    } catch (e) {
      if (js.Boot.__instanceof(e, Error)) {
      } else {
        throw e;
      }
    }
  }
  return this._element;
};
com.inq.ui.BalloonOverlaying.prototype.buildStyle = function() {
  this.render(this._parentContainer);
};
com.inq.ui.BalloonOverlaying.prototype.doClick = function() {
  var action = this.eventListeners[com.inq.events.MouseEvent.CLICK];
  var ev = new com.inq.events.MouseEvent(com.inq.events.MouseEvent.CLICK);
  ev.target = ev.currentTarget = this;
  if (action != null) {
    action(ev);
  }
};
com.inq.ui.BalloonOverlaying.prototype._fixSizesAndPositions = function() {
  var els = this._div.getElementsByTagName("*");
  var blnTable = this._div.getElementsByTagName("TABLE")[0];
  var blnSpanText = null;
  var blnCellText = null;
  var blnClearOverlay = null;
  var blnSpanCornerLT = null;
  var blnSpanCornerRT = null;
  var blnSpanCornerLB = null;
  var blnSpanCornerRB = null;
  var blnBackground = null;
  var blnBackgroundEW = null;
  var blnBackgroundNS = null;
  var blnLeftArrows = null;
  var blnRightArrows = null;
  var blnTopArrows = null;
  var blnBottomArrows = null;
  var blnUpArrowLeft = null;
  var blnUpArrowRight = null;
  var blnLeftArrowTop = null;
  var blnLeftArrowBottom = null;
  var c_leadleft = 178;
  var c_leadright = 178;
  var c_width = 1237;
  var blnTd1 = null;
  var i;
  var _g1 = 0, _g = els.length;
  while (_g1 < _g) {
    var i1 = _g1++;
    var ob = els[i1];
    if (ob == null) {
      continue;
    }
    var nm = ob.getAttribute("name");
    if (nm != null && nm != "") {
      switch(nm) {
        case "blnSpanText":
          blnSpanText = ob;
          break;
        case "blnCellText":
          blnCellText = ob;
          break;
        case "blnTd1":
          blnTd1 = els[i1];
          break;
        case "blnSpanCornerLT":
          blnSpanCornerLT = ob;
          break;
        case "blnSpanCornerRT":
          blnSpanCornerRT = ob;
          break;
        case "blnSpanCornerLB":
          blnSpanCornerLB = ob;
          break;
        case "blnSpanCornerRB":
          blnSpanCornerRB = ob;
          break;
        case "blnBackground":
          blnBackground = ob;
          break;
        case "blnBackgroundEW":
          blnBackgroundEW = ob;
          break;
        case "blnBackgroundNS":
          blnBackgroundNS = ob;
          break;
        case "blnLeftArrows":
          blnLeftArrows = ob;
          break;
        case "blnRightArrows":
          blnRightArrows = ob;
          break;
        case "blnTopArrows":
          blnTopArrows = ob;
          break;
        case "blnBottomArrows":
          blnBottomArrows = ob;
          break;
        case "blnUpArrowLeft":
          blnUpArrowLeft = ob;
          break;
        case "blnUpArrowRight":
          blnUpArrowRight = ob;
          break;
        case "blnLeftArrowTop":
          blnLeftArrowTop = ob;
          break;
        case "blnClearOverlay":
          blnClearOverlay = ob;
          break;
        case "blnLeftArrowBottom":
          blnLeftArrowBottom = ob;
          break;
        default:
          haxe.Log.trace("item named " + nm + " not used", {fileName:"BalloonOverlaying.hx", lineNumber:397, className:"com.inq.ui.BalloonOverlaying", methodName:"_fixSizesAndPositions"});
      }
    }
  }
  if (com.inq.ui.BalloonOverlaying.bIE6 && blnSpanCornerLT.offsetWidth > 18) {
    var p = 25;
    blnSpanCornerLT.style.fontSize = p + "pt";
    while (blnSpanCornerLT.offsetWidth > 18) {
      --p;
      blnSpanCornerLT.style.fontSize = p + "pt";
    }
    blnSpanCornerRB.style.fontSize = blnSpanCornerLB.style.fontSize = blnSpanCornerRT.style.fontSize = p + "pt";
    blnSpanCornerLT.style.left = "0px";
    blnSpanCornerLT.style.top = "0px";
    blnSpanCornerRT.style.left = "-8px";
    blnSpanCornerRT.style.top = "0px";
    blnSpanCornerLB.style.left = "0px";
    blnSpanCornerLB.style.top = "-8px";
    blnSpanCornerRB.style.left = "-8px";
    blnSpanCornerRB.style.top = "-8px";
    blnUpArrowLeft.style.top = "0px";
    blnUpArrowLeft.style.left = "-1px";
    blnUpArrowRight.style.top = "0px";
    blnUpArrowRight.style.left = "-1px";
  }
  blnLeftArrows.style.display = "";
  blnRightArrows.style.display = "none";
  blnTopArrows.style.display = "none";
  blnBottomArrows.style.display = "none";
  blnLeftArrowTop.style.display = "";
  blnLeftArrowBottom.style.display = "none";
  var padding = Math.round(this.cornerRadius / 2);
  var paddingOverhead = 0;
  blnSpanText.parentNode.style.padding = padding + "px";
  var allArrowWidth = blnTable.offsetWidth - blnTd1.offsetWidth;
  var w = blnSpanText.offsetWidth;
  blnSpanText.parentNode.style.width = w + "px";
  var h = blnSpanText.offsetHeight;
  blnSpanText.parentNode.style.height = h + "px";
  h += padding * 2;
  w += padding * 2;
  blnTable.style.height = h + "px";
  blnTable.style.width = w + allArrowWidth + "px";
  blnBackground.style.width = w + "px";
  blnBackground.style.height = h + "px";
  blnBackgroundEW.style.left = "0px";
  blnBackgroundEW.style.right = "0px";
  blnBackgroundEW.style.top = this.cornerRadius + "px";
  blnBackgroundEW.style.bottom = "";
  blnBackgroundEW.style.height = h - 2 * this.cornerRadius + "px";
  blnBackgroundEW.style.width = w + "px";
  blnBackgroundNS.style.top = "0px";
  blnBackgroundNS.style.bottom = "";
  blnBackgroundNS.style.left = this.cornerRadius + "px";
  blnBackgroundNS.style.right = "";
  blnBackgroundNS.style.width = w - 2 * this.cornerRadius + "px";
  blnBackgroundNS.style.height = h + "px";
  blnSpanCornerRT.parentNode.style.left = w - this.cornerRadius + "px";
  blnSpanCornerRT.parentNode.style.right = "";
  blnSpanCornerRB.parentNode.style.left = w - this.cornerRadius + "px";
  blnSpanCornerRB.parentNode.style.right = "";
  blnSpanCornerRB.parentNode.style.top = h - this.cornerRadius + "px";
  blnSpanCornerRB.parentNode.style.bottom = "";
  blnSpanCornerLB.parentNode.style.top = h - this.cornerRadius + "px";
  blnSpanCornerLB.parentNode.style.bottom = "";
  this._div.style.width = blnTable.style.width;
  this._div.style.height = blnTable.style.height;
  blnClearOverlay.style.width = blnTable.style.width;
  blnClearOverlay.style.height = blnTable.style.height;
  var _g1 = 0, _g = els.length;
  while (_g1 < _g) {
    var i1 = _g1++;
    var nm = els[i1].getAttribute("name");
    if (nm != null && nm != "") {
      switch(nm) {
        case "blnArrowLeft":
          els[i1].style.height = (els[i1].tagName == "TABLE" ? h : h / 2) + "px";
          break;
        default:
          break;
      }
    }
  }
};
com.inq.ui.BalloonOverlaying.prototype.render = function(_parent) {
  var parentWidth;
  var bLeft = true;
  var elementWidth = this._element.offsetWidth;
  var elementHeight = this._element.offsetHeight;
  var elementLeft = 0;
  var elementTop = 0;
  if (_parent == null) {
    _parent = window.document.body;
  }
  var o = this._element;
  while (o != _parent) {
    elementLeft += o.offsetLeft;
    elementTop += o.offsetTop;
    o = o.offsetParent;
    if (o == null) {
      break;
    }
  }
  elementTop += _parent.offsetTop;
  elementLeft += _parent.offsetLeft;
  parentWidth = _parent.clientWidth;
  var elementRight = parentWidth - (elementLeft + elementWidth);
  var bLeft1 = true;
  var y = elementTop;
  var x = elementLeft + 3;
  var bLeft2 = true;
  var maxWidth = _parent.clientWidth;
  var pClientWidth = _parent.clientWidth;
  var blnWidth = maxWidth > 400 ? 400 : maxWidth;
  var toEdgeWidth = pClientWidth - (bLeft2 ? com.inq.ui.BalloonOverlaying.HOT_OFFSET_X + x : com.inq.ui.BalloonOverlaying.HOT_OFFSET_X + x);
  var trueLeft = x - com.inq.ui.BalloonOverlaying.HOT_OFFSET_X;
  var trueTop = y - com.inq.ui.BalloonOverlaying.HOT_OFFSET_Y;
  if (toEdgeWidth < blnWidth) {
    blnWidth = toEdgeWidth;
  }
  var defaultStyle = this._style;
  this._div.innerHTML = '<span style="' + defaultStyle + '">foo</span>';
  this._color = this._div.firstChild.style.backgroundColor;
  var _innerHTML = '<table cellpadding="0" cellspacing="0" border="0" align="left" valign="top" style="color:' + this._color + ";width:" + blnWidth + 'px;border-style:none;border-width:0px;margin:0px;padding:0px;">' + "<tbody>" + '<tr style="border-style:none;border-width:0px; margin:0px;padding:0px;">' + '<td name="blnLeftArrows" style="width:8px;border:0px; margin:0px; padding:0px">' + '<table name="blnArrowLeft" cellpadding="0" width="8" cellspacing="0" border="0" style="height:100%;width:8px;border:0px; margin:0px; padding:0px;" height="100%">' + 
  "<tbody>" + '<TR name="blnArrowLeft" width="8" style="color:' + this._color + ';height:50%;border:0px;margin:0px;padding:0px;">' + '<td width="8" align="center" valign="top" style="border:0px; height:inherit; margin:0px; width:8px; ">' + '<div style="position:relative;top:' + this.cornerRadius + 'px;left:0px;width:8px;height:9px;overflow:hidden;">' + '<SPAN name="blnLeftArrowTop" style="position:absolute;top:-3px;left:-2px;font-family:Arial;font-size:12px">&#9668;\x3c!-- left arrow --\x3e</span>' + 
  "</div>" + "</TD>" + "</tr>";
  _innerHTML += '<TR name="blnArrowLeft" width="8" style="height:50%;border:0px; margin:0px; padding:0px;">' + '<td width="8" align="right" valign="bottom" style="border:0px; height:inherit; margin:0px; width:8px; ">' + '<div style="position:relative;height:100%;width:inherit;top:0px;left:0px;">' + '<div style="position:absolute;bottom:' + this.cornerRadius + 'px;left:0px;width:8px;height:9px;overflow:hidden;">\n' + '<SPAN name="blnLeftArrowBottom" style="position:absolute;top:-3px;left:-2px;color:' + 
  this._color + ';font-family:Arial;font-size:12px">&#9668;\x3c!-- left arrow --\x3e</span>' + "</div>" + "</div>" + "</TD>" + "</tr>" + "</tbody>" + "</TABLE>" + "</td>";
  _innerHTML += '<td name="blnTd1" align="left" valign="top" style="width:100%;margin-style:none;margin-width:0px;border:0px;padding:0px;">' + '<table cellpadding="0" cellspacing="0" border="0" align="left" valign="top" width="100%" style="width:100%;margin:0px;border:0px;padding:0px">' + "<tbody>" + '<tr align="left" valign="top" style="margin:0px;border:0px;padding:0px">' + '<TD name="blnTopArrows" style="margin:0px;border:0px;padding:0px">' + '<table cellpadding="0" cellspacing="0" border="0" height="8" width="100%" style="height:8px;border-style:none; border-width:0px;; margin:0px; padding:0px">' + 
  '<tbody style="border-style:none; border-width:0px;height:8px;margin:0px;padding:0px">' + '<tr align="left" valign="top" style="border-style:none; border-width:0px;margin:0px;padding:0px">\n' + '<td  width="50%" align="left" style="border-style:none; border-width:0px;margin:0px;padding:0px">\n' + '<div style="position:relative;top:0px;left:' + this.cornerRadius + 'px;width:8px;height:8px;overflow:hidden;">' + '<span name="blnUpArrowLeft" style="position:absolute;top:-3px;left:-2px;background-color:transparent; color:' + 
  this._color + '; font-family:Arial; font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;">&#9650;\x3c!-- up arrow --\x3e</span>' + "</div>" + "</td>" + '<td  width="50%"  align="right" style="margin:0px;border:0px;padding:0px">' + '<div style="position:relative;top:0px;right:' + this.cornerRadius + 'px;width:8px;height:8px;overflow:hidden;">' + '<span name="blnUpArrowRight" style="position:absolute;top:-3px;left:-2px;background-color:transparent; color:' + this._color + ';font-family:Arial; font-size:12px; font-style:normal; font-variant:normal; font-weight:normal; ">&#9650;\x3c!-- up arrow --\x3e</span>' + 
  "</div>" + "</td>" + "</TR>" + "</tbody>" + "</table>" + "</TD>" + "</TR>";
  _innerHTML += '<tr align="left" valign="top" style="width:100%;margin:0px;border:0px;padding:0px">' + '<td width="100%" height="100%" align="left" valign="top" style="height:auto;margin:0px;border:0px;padding:0px"  name="blnCellText">' + '<div style="border-style:none; border-width:0px; height:100%; left:0px; position:relative; top:0px; width:100%;">' + '<div style="background-color:transparent;width:100%;height:100%;position:absolute;left:0px;right:0px;">' + '<div style="position:absolute;top:0px;left:0px;height:' + 
  this.cornerRadius + "px;width:" + this.cornerRadius + 'px;overflow:hidden;">' + '<span name="blnSpanCornerLT" style="color:' + this._color + '; ;position:absolute;margin:0px;left:-2px;top:-12px;font-family:Arial; font-size:28px;">&#9679;\x3c!-- UTF-25CF: Black Circle --\x3e</span>' + "</div>" + '<div  style="position:absolute;top:0px;right:0px;height:' + this.cornerRadius + "px;width:" + this.cornerRadius + 'px;overflow:hidden;">' + '<span name="blnSpanCornerRT" style="color:' + this._color + '; position:absolute;margin:0px;left:-9px;top:-12px;font-family:Arial; font-size:28px;">&#9679;\x3c!-- UTF-25CF: Black Circle --\x3e</span>' + 
  "</div>" + '<div style="position:absolute;bottom:0px;left:0px;height:' + this.cornerRadius + "px;width:" + this.cornerRadius + 'px;overflow:hidden;">' + '<span name="blnSpanCornerLB" style="color:' + this._color + ';position:absolute;margin:0px;left:-2px;top:-18px;font-family:arial; font-size:28px;">&#9679;\x3c!-- UTF-25CF: Black Circle --\x3e</span>' + "</div>" + '<div style="position:absolute;bottom:0px;right:0px;height:' + this.cornerRadius + "px;width:" + this.cornerRadius + 'px;overflow:hidden;">' + 
  '<span name="blnSpanCornerRB" style="color:' + this._color + '; position:absolute;margin:0px;left:-9px;top:-18px;font-family:arial; font-size:28px;">&#9679;\x3c!-- UTF-25CF: Black Circle --\x3e</span>' + "</div>";
  _innerHTML += '<div name="blnBackground" style="position:absolute;top:0px;bottom:0px;left:0px;right:0px;">' + '<div style="background-color:' + this._color + ';">' + '<div name="blnBackgroundEW" style="position:absolute;top:' + this.cornerRadius + "px;bottom:" + this.cornerRadius + "px;left:0px;right:0px;background-color:" + this._color + ';">' + '<div style="overflow: hidden; width:100%; height:100%;"></div>' + "</div>" + '<div name="blnBackgroundNS" style="position:absolute;top:0px;bottom:0px;left:' + 
  this.cornerRadius + "px;right:" + this.cornerRadius + "px;background-color:" + this._color + ';">' + '<div style="overflow: hidden; width:100%; height:100%;"></div>' + "</div>" + "</div>" + "</div>" + '<div style="width:100%;position:absolute;top:0px;left:0px;border-style:none;border-width:0px;">' + '<span name="blnSpanText" class="box-contents" style="background-color:transparent;font-family:Comic Sans MS; font-size:10pt; ">\n' + this._text + "</span>" + "</div>" + "</div>" + "</div>" + "</td>" + 
  "</tr>";
  _innerHTML += '<tr style="margin:0px;border:0px;padding:0px">' + '<td  name="blnBottomArrows" style="margin:0px;border:0px;padding:0px">' + '<table cellpadding="0" cellspacing="0" border="0" align="left" valign="top" width="100%" style="border-style:none;border-width:0px;padding:0px;margin:0px;">' + "<tbody>" + '<tr align="left" valign="top" style="border-color:#3d24e4; border-style:solid; border-width:0px;margin:0px;padding:0px">' + '<td width="50%" align="left" valign="top" style="border-color:#3d24e4; border-style:solid; border-width:0px;margin:0px;padding:0px">' + 
  '<div style="position:relative;top:0px;left:7px;width:8px;height:8px;overflow:hidden;">' + '<span style="position:absolute;top:-4px;left:-2px;background-color:transparent;color:' + this._color + ';font-family:Arial;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;">' + "&#9660;\x3c!-- UTF-25BC: Black Down-Pointing Triangle --\x3e" + "</span>" + "</div>" + "</td>" + '<td  width="50%" align="right" style="margin:0px;border:0px;padding:0px">' + '<div style="position:relative;top:0px;right:7px;width:8px;height:8px;overflow:hidden;">' + 
  '<span  class="box-contents" style="position:absolute;top:-4px;left:-2px;background-color:transparent;color:' + this._color + ';font-family:Arial;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal; ">' + "&#9660;" + "</span>" + "</div>" + "</td>" + "</TR>" + "</tbody>" + "</table>" + "</td>" + "</tr>" + "</tbody>" + "</table>" + "</td>";
  _innerHTML += '<td name="blnRightArrows" width="8" style="border:0px; margin:0px; padding:0px;">' + '<table name="blnArrowLeft" cellpadding="0" cellspacing="0" border="0" align="left" valign="top" width="8" style="width:8px;border:0px; margin:0px; padding:0px;">' + "<tbody>" + '<TR name="blnArrowLeft" style="height:50%;width:8px;border:0px; margin:0px; padding:0px;">' + '<td width="8" align="center" valign="top" style="border:0px; height:inherit; margin:0px; max-width:8px; width:8px;">' + '<div style="position:relative;top:' + 
  this.cornerRadius + 'px;left:0px;width:8px;height:9px;overflow:hidden;">' + '<SPAN style="position:relative;top:-3px;left:-2px;color:' + this._color + ';font-family:Arial;font-size:12px">' + "&#9658;\x3c!-- right pointer --\x3e" + "</span>" + "</div>" + "</TD>" + "</TR>" + '<TR name="blnArrowLeft" width="8" style="height:50%;width:8px;border:0px; margin:0px; padding:0px;">' + '<td width="8" align="center" valign="bottom" style="border:0px; height:inherit; margin:0px; max-width:8px; width:8px; ">' + 
  '<div style="position:relative;height:100%;width:inherit;top:0px;left:0px;">' + '<div style="position:absolute;bottom:' + this.cornerRadius + 'px;left:0px;width:8px;height:9px;overflow:hidden;">' + '<SPAN style="position:relative;top:-3px;left:-2px;color:' + this._color + ';font-family:Arial;font-size:12px">' + "&#9658;\x3c!-- right pointer --\x3e" + "</span>" + "</div>" + "</div>" + "</TD>" + "</TR>" + "</tbody>" + "</TABLE>" + "</td>" + "</tr>" + "</tbody>" + "</TABLE>";
  _innerHTML += '<div name="blnClearOverlay" style="position:absolute;top:0px;left:0px;width:100%;height:100%;cursor:pointer;">' + '<input type="image"  style="width:100%;height:100%;opacity:0.01;filter:alpha(opacity=1)" />' + "</div>\n";
  this._div.innerHTML = _innerHTML;
  this._div.style.cssText = "z-index: 102;position:absolute;top: " + trueTop + "px;left: " + trueLeft + "px;color: " + this._color + ";background-color: transparent;width: " + blnWidth + "px;margin: 0px;";
  this._img = this._div.getElementsByTagName("input")[0];
  this._div.container = this;
  this._img.container = this;
  this._img.src = Application.application.getClearImage();
  this._img.onclick = com.inq.ui.BalloonOverlaying._doClick;
  if (this._div.parentNode == null) {
    _parent.appendChild(this._div);
  } else {
    if (this._div.parentNode != _parent) {
      this._div.parentNode.removeChild(this._div);
      _parent.appendChild(this._div);
    }
  }
  var contents = this._div.getElementsByTagName("SPAN");
  var ix;
  var _g1 = 0, _g = contents.length;
  while (_g1 < _g) {
    var ix1 = _g1++;
    if (contents[ix1].className == "box-contents") {
      contents[ix1].className = this._styleName;
      contents[ix1].style.cssText = defaultStyle + ";background-color:tranparent";
    }
  }
  this._fixSizesAndPositions();
  this._div.style.left = trueLeft + "px";
  this._div.style.top = trueTop + "px";
};
com.inq.ui.BalloonOverlaying.prototype.fixIERendering = function(div, color) {
  var h = div.childNodes[1].clientHeight;
  var w = div.childNodes[1].clientWidth;
  div.style.height = h + 13 + "px";
  var bg1 = div.getElementsByTagName("DIV");
  var ix;
  var _g1 = 0, _g = bg1.length;
  while (_g1 < _g) {
    var ix1 = _g1++;
    if (bg1[ix1].name == "balloon_background1") {
      bg1[ix1].style.height = (h - 40 < 0 ? 0 : h - 40) + "px";
      bg1[ix1].style.width = w + "px";
      if (color != null) {
        bg1[ix1].style.backgroundColor = color;
      }
      bg1[ix1].style.bottom = "";
      bg1[ix1].style.right = "";
    } else {
      if (bg1[ix1].name == "balloon_background2") {
        bg1[ix1].style.height = h + "px";
        bg1[ix1].style.width = (w - 40 < 0 ? 0 : w - 40) + "px";
        if (color != null) {
          bg1[ix1].style.backgroundColor = color;
        }
        bg1[ix1].style.bottom = "";
        bg1[ix1].style.right = "";
      }
    }
  }
};
com.inq.ui.BalloonOverlaying.prototype.cornerRadius = null;
com.inq.ui.BalloonOverlaying.prototype._parentContainer = null;
com.inq.ui.BalloonOverlaying.prototype._styleDef = null;
com.inq.ui.BalloonOverlaying.prototype._styleName = null;
com.inq.ui.BalloonOverlaying.prototype._color = null;
com.inq.ui.BalloonOverlaying.prototype._text = null;
com.inq.ui.BalloonOverlaying.prototype._element = null;
com.inq.ui.BalloonOverlaying.prototype._img = null;
com.inq.ui.BalloonOverlaying.prototype._useHandCursor = null;
com.inq.ui.BalloonOverlaying.prototype.useHandCursor = null;
com.inq.ui.BalloonOverlaying.prototype.__class__ = com.inq.ui.BalloonOverlaying;
com.inq.ui.BalloonOverlaying.HOT_OFFSET_X = 0;
com.inq.ui.BalloonOverlaying.HOT_OFFSET_Y = 0;
com.inq.ui.BalloonOverlaying.CLASS_STYLE = 'z-index:102;font-family:"Comic Sans MS";font-size:10pt;background-color:red; color:yellow;';
com.inq.ui.BalloonOverlaying.bIE6 = window.navigator.appName == "Microsoft Internet Explorer" && (window.navigator.appVersion.indexOf("MSIE 6.0") >= 0 || window.navigator.appVersion.indexOf("MSIE 5.") >= 0);
com.inq.ui.Button = function(_id, sources) {
  com.inq.ui.Container.call(this, _id);
  this._useHandCursor = false;
  if (this._div["initialInnerHTML"] == null) {
    this._div["initialInnerHTML"] = this._div.innerHTML;
  }
  if (sources) {
    for (var si = 0;si < sources.length;si++) {
      this.setUpSkin(sources[si]);
    }
  }
  if (com.inq.utils.Capabilities.isIpad() || com.inq.utils.Capabilities.isIphone()) {
    this._div.innerHTML = '<img aria-hidden="true" style="display:none;"/>' + '<table aria-hidden="true"  style="position: absolute;left:0px;top:0px;height:100%;width:100%;margin-top: auto;margin-bottom: auto;margin-left: auto;margin-right: auto;">' + "<tr><td>" + "<div></div>" + "</td/</tr>" + "</table>" + '<input type="image" src="' + Application.application.getClearImage() + '" role="button" style="position: absolute;left:0px;top:0px;width:100%;height:100%;background-color:transparent" />' + ""
    ;
  } else {
    if (com.inq.utils.Capabilities.isAndroid()) {
      this._div.innerHTML = '<img aria-hidden="true" style="display:none;"/>' + '<table aria-hidden="true"  style="position: absolute;left:0px;top:0px;height:100%;width:100%;margin-top: auto;margin-bottom: auto;margin-left: auto;margin-right: auto;">' + "<tr><td>" + "<div></div>" + "</td/</tr>" + "</table>" + '<input type="image" src="' + Application.application.getClearImage() + '" role="button" style="position: absolute;left:0px;top:0px;width:100%;height:100%;background-color:transparent" />' + 
      "";
    } else {
      this._div.innerHTML = '<img style="display:none;"/>' + '<table style="position: absolute;left:0px;top:0px;height:100%;width:100%;margin-top: auto;margin-bottom: auto;margin-left: auto;margin-right: auto;">' + "<tr><td>" + "<div></div>" + "</td/</tr>" + "</table>" + '<input type="image" role="button" src="' + Application.application.getClearImage() + '" style="position: absolute;left:0px;top:0px;width:100%;height:100%;background-color:transparent" />';
    }
  }
  this._skin = this._div.getElementsByTagName("img")[0];
  this._img = this._div.getElementsByTagName("input")[0];
  this._span = this._div.getElementsByTagName("td")[0];
  this._table = this._div.getElementsByTagName("table")[0];
  this._div.container = this;
  this._img.container = this;
  this._table.container = this;
  this._skin.container = this;
  this._span.container = this;
  if (com.inq.utils.Capabilities.isIpad() || com.inq.utils.Capabilities.isIphone()) {
    if (_id.indexOf("btnCloseChat") != -1) {
      this._img.addEventListener("click", $bind(this, this.doClick));
    }
    this._img.ontouchend = $bind(this, this.iPhoneHandleButtonPress);
  } else {
    this._img.onmouseover = $bind(this, this.doMouseOver);
    this._img.onmouseout = $bind(this, this.doMouseOut);
    this._img.onclick = $bind(this, this.doClick);
    this._table.onclick = $bind(this, this.doClick);
  }
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.Button, "com.inq.ui.Button");
com.inq.ui.Button.prototype.softClick = function() {
  var doc = this._div.ownerDocument;
  var win = doc.defaultView;
  var evnt = doc.createEvent("MouseEvents");
  evnt.initMouseEvent("click", true, true, win, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
  this._img.dispatchEvent(evnt);
};
com.inq.ui.Button.prototype.applyStyle = function() {
  com.inq.ui.Container.prototype.applyStyle.call(this);
  var fontstyles;
  if (this.styles.label != null) {
    this.setLabel(this.styles.label);
  }
  fontstyles = "background-color:transparent;width:100%;height:100%;";
  if (this.getStyle("color") != null) {
    fontstyles += "color: " + Std.string(this.getStyle("color")) + ";";
  }
  if (this.getStyle("fontFamily") != null) {
    fontstyles += " font-family: " + Std.string(this.getStyle("fontFamily")) + ";";
  }
  if (this.getStyle("fontSize") != null) {
    fontstyles += " font-size: " + Std.string(this.getStyle("fontSize")) + "pt;";
  }
  if (this.getStyle("textAlign") != null) {
    fontstyles += "text-align:" + Std.string(this.getStyle("textAlign")) + ";";
  }
  if (this.getStyle("verticalAlign") != null) {
    fontstyles += "vertical-align:" + Std.string(this.getStyle("verticalAlign")) + ";";
  } else {
    fontstyles += "vertical-align:middle;";
  }
  this._span.style.cssText = fontstyles;
  if (this._div.id.indexOf("btnPopOut") != -1 && com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
    this._div.style.display = "none";
  }
  if (this._div.id.indexOf("btnMinimize") != -1 && com.inq.flash.client.chatskins.SkinControl.getIsPersistentChat()) {
    this._div.style.display = "none";
  }
};
com.inq.ui.Button.prototype.setUpSkin = function(val) {
  this.loadImage("upSkin", val, "width:100%;height:100%");
};
com.inq.ui.Button.prototype.loadImage = function(styleName, val, elementStyle) {
  if (this._div != null) {
    if (val == null || val == "") {
      return;
    }
    this.setStyle(styleName, val);
    this._newim = this.getNewImage();
    this._newim.setAttribute("style", elementStyle);
    this._newim.onload = $bind(this, this.whenLoaded);
    this._newim.src = val;
    if (com.inq.utils.Capabilities.isIpad() || com.inq.utils.Capabilities.isIphone()) {
      var toolTip = this.styles["toolTip"];
      toolTip = !toolTip ? "" : toolTip;
      this._newim.alt = toolTip + " new image";
      this._newim.setAttribute("aria-hidden", "true");
    } else {
      if (com.inq.utils.Capabilities.isAndroid() || navigator.platform.toUpperCase().indexOf("MAC") >= 0) {
        this._newim.setAttribute("aria-hidden", "true");
      } else {
        this._newim.alt = "";
      }
    }
    this._newim.setAttribute("tabindex", "-1");
  }
};
com.inq.ui.Button.prototype.onLoadImage = function(element) {
  var __w, __h;
  try {
    var imageElement = element;
    var div = this._div;
    this._loadWidth = imageElement.width;
    this._loadHeight = imageElement.height;
    imageElement.style.height = "100%";
    imageElement.style.width = "100%";
    if (this.styles.height == null && (this.styles.top == null || this.styles.bottom == null)) {
      this.styles.height = "" + Std.string(this._loadHeight);
    }
    if (this.styles.width == null && (this.styles.left == null || this.styles.right == null)) {
      this.styles.width = "" + Std.string(this._loadWidth);
    }
    if (element.elementStyle != null) {
      element.style.cssText = element.elementStyle;
    }
    if (div.firstChild != null && div.firstChild.tagName == "IMAGE") {
      div.removeChild(div.firstChild);
    }
    div.insertBefore(element, div.firstChild);
    this.resize();
  } catch (e) {
    if (js.Boot.__instanceof(e, Error)) {
      haxe.Log.trace("ERROR: " + Std.string(e), {fileName:"Button.hx", lineNumber:195, className:"com.inq.ui.Button", methodName:"onLoadImage"});
    } else {
      throw e;
    }
  }
};
com.inq.ui.Button.prototype.setID = function(val) {
  com.inq.ui.Container.prototype.setID.call(this, val);
  if (this._skin != null) {
    this._skin.id = Std.string(this._div.id) + "_skin";
  }
  if (this._img != null) {
    this._img.id = Std.string(this._div.id) + "_img";
  }
  if (this._span != null) {
    this._span.id = Std.string(this._div.id) + "_span";
  }
  if (this._table != null) {
    this._table.id = Std.string(this._div.id) + "_table";
  }
};
com.inq.ui.Button.prototype.setHandCursor = function(val) {
  var value = val;
  switch(value.toLowerCase()) {
    case "true":
      this._useHandCursor = true;
      break;
    case "false":
      this._useHandCursor = false;
      break;
    default:
      this._useHandCursor = false;
  }
  this.useHandCursor = this._useHandCursor ? "true" : "false";
};
com.inq.ui.Button.prototype.setLabel = function(val) {
  this.label = val;
  this._span.innerHTML = val;
  this._span.setAttribute("aria-hidden", "true");
  var anchors = this._span.getElementsByTagName("A");
  var ix;
  if (anchors != null && anchors.length > 0) {
    if (this._div.parentNode != null) {
      this._div.insertBefore(this._img, this._table);
    }
    var _g1 = 0, _g = anchors.length;
    while (_g1 < _g) {
      var ix1 = _g1++;
      var anchor = anchors[ix1];
      var href = [anchor["href"]];
      var target = [anchor["target"] != null ? anchor.target : "_self"];
      anchor.href = "javascript:void(0);";
      anchor.target = "_top";
      anchor.container = this;
      anchor.onclick = function(target, href) {
        return function() {
          com.inq.flash.client.control.FlashPeer.PushToFrameset(href[0], target[0], true);
          return true;
        };
      }(target, href);
    }
  }
};
com.inq.ui.Button.prototype.applyAttributeMap = function() {
  for (var aKey in this.attributeMap) {
    if (this.attributeMap.hasOwnProperty(aKey)) {
      switch(aKey) {
        case "aria-live":
        ;
        case "aria-hidden":
          this._div.setAttribute(aKey, this.attributeMap[aKey]);
          break;
        case "tooltip":
          this._img.setAttribute("title", this.attributeMap[aKey]);
          this._table.setAttribute("title", this.attributeMap[aKey]);
          break;
        default:
          this.getPrimaryObject().setAttribute(aKey, this.attributeMap[aKey]);
      }
    }
  }
};
com.inq.ui.Button.prototype.getPrimaryObject = function() {
  return this._img;
};
com.inq.ui.Button.prototype.buildStyle = function() {
  com.inq.ui.Container.prototype.buildStyle.call(this);
  var cursor = this.getStyle("useHandCursor") == "true" ? "pointer" : "default";
  this._style += "cursor: " + cursor + ";";
  this._span.style["cursor"] = cursor;
  this._table.style["cursor"] = cursor;
  this._img.style["cursor"] = cursor;
};
com.inq.ui.Button.prototype.doMouseOut = function() {
  var curskin = this._skin.src;
  if (this.upSkin != null && curskin != this.upSkin) {
    this._skin.src = this.upSkin;
    this._skin.style.height = this._div.style.height;
    this._skin.style.width = this._div.style.width;
  }
};
com.inq.ui.Button.prototype.doMouseOver = function() {
  var curskin = this._skin.src;
  if (this.overSkin != null && curskin != this.overSkin) {
    this._skin.src = this.overSkin;
    this._skin.style.height = this._div.style.height;
    this._skin.style.width = this._div.style.width;
  }
};
com.inq.ui.Button.prototype.iPhoneHandleButtonPress = function(e) {
  try {
    if (this.eventListeners[com.inq.events.MouseEvent.CLICK] != null) {
      this.doClick(e);
    } else {
      this.onClick();
    }
    return false;
  } catch (e) {
    console.log("[ MOB-777 ] ERROR in Button.iPhoneHandleButtonPress! " + e);
    return true;
  }
};
com.inq.ui.Button.prototype.doClick = function(evt) {
  var action = this.eventListeners[com.inq.events.MouseEvent.CLICK];
  var ev = new com.inq.events.MouseEvent(com.inq.events.MouseEvent.CLICK);
  if (action != null) {
    action(ev);
  }
};
com.inq.ui.Button.prototype.setOnClick = function(whenClicked) {
  this._img.onclick = whenClicked;
  this._table.onclick = whenClicked;
};
com.inq.ui.Button.prototype.getHtmlLabelObject = function() {
  var labelObjet = null;
  if (typeof this._img != "undefined") {
    labelObjet = this._img;
  } else {
    if (typeof this._div != "undefined") {
      labelObjet = this._div.firstChild;
    }
  }
  return labelObjet;
};
com.inq.ui.Button.prototype.setImageFocus = function() {
  if (this._img) {
    this._img.focus();
  }
};
com.inq.ui.Button.prototype.whenLoaded = function() {
  com.inq.ui.Container.prototype.whenLoaded.call(this);
  if (this.styles.id === "btnSend" && (com.inq.utils.Capabilities.isSafari() || com.inq.utils.Capabilities.isIOSWebView()) && com.inq.utils.Capabilities.isMobile()) {
    window.setTimeout(function() {
      com.inq.flash.client.chatskins.SkinControl.accessibilityHelp.addHelpOnBtnSend();
      com.inq.flash.client.chatskins.SkinControl.accessibilityHelp.isButtonHasFirstFocus = true;
    }, 500);
  }
  if (com.inq.flash.client.control.FlashPeer.getIsBuilder()) {
    window.parent.EventManager.calculateButtonContainer(this.styles.id);
  }
};
com.inq.ui.Button.prototype._table = null;
com.inq.ui.Button.prototype._skin = null;
com.inq.ui.Button.prototype._span = null;
com.inq.ui.Button.prototype._img = null;
com.inq.ui.Button.prototype._useHandCursor = null;
com.inq.ui.Button.prototype.label = null;
com.inq.ui.Button.prototype.useHandCursor = null;
com.inq.ui.Button.prototype.overSkin = null;
com.inq.ui.Button.prototype.upSkin = null;
com.inq.ui.Button.prototype.__class__ = com.inq.ui.Button;
com.inq.ui.Canvas = function(_id) {
  com.inq.ui.Container.call(this, _id);
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.Canvas, "com.inq.ui.Canvas");
com.inq.ui.Canvas.prototype.resize = function() {
  com.inq.ui.Container.prototype.resize.call(this);
};
com.inq.ui.Canvas.prototype.applySkinAttribute = function() {
  var accesskey = this.getStyle("accesskey");
  if (null != accesskey) {
    this._div.setAttribute("accesskey", accesskey);
  }
  var tabindex = this.getStyle("tabindex");
  if (null != tabindex) {
    this._div.setAttribute("tabindex", tabindex);
  }
};
com.inq.ui.Canvas.prototype.removeAttribute = function(attr) {
  if (this._div) {
    this._div.removeAttribute(attr);
  }
};
com.inq.ui.Canvas.prototype.__class__ = com.inq.ui.Canvas;
com.inq.ui.ClientBody = function() {
  var doc = window.parent.document;
  var body = doc.body;
  com.inq.ui.Container.call(this, body, null, doc);
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.ClientBody, "com.inq.ui.ClientBody");
com.inq.ui.ClientBody.closeAll = function() {
  var keyz = Reflect.fields(com.inq.ui.ClientBody._collection);
  var _g1 = 0, _g = keyz.length;
  while (_g1 < _g) {
    var ix = _g1++;
    var k = "" + keyz[ix];
    var element = com.inq.ui.ClientBody._collection[k];
    if (element._div.id != null && element._div.id.indexOf("tcChat_") == 0) {
      element.removeFromBody();
    }
  }
};
com.inq.ui.ClientBody.registerElement = function(element) {
  var id = element.getID();
  if (id == null) {
    id = "inq_" + Math.round(Math.random() * 3141593);
    element.setID(id);
  }
  if (element != null) {
    com.inq.ui.ClientBody._collection[id] = element;
  }
};
com.inq.ui.ClientBody.getElement = function(id) {
  return com.inq.ui.ClientBody._collection[id];
};
com.inq.ui.ClientBody.prototype.resize = function() {
};
com.inq.ui.ClientBody.prototype.__class__ = com.inq.ui.ClientBody;
com.inq.ui.ClientBody._collection = new com.inq.utils.Dictionary;
com.inq.ui.CommandParser = function() {
  com.inq.ui.Container.call(this);
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.CommandParser, "com.inq.ui.CommandParser");
com.inq.ui.CommandParser.evaluateSymbolicReference = function(value) {
  var a = value.split(".");
  var nameContainer = a.shift();
  var clientWindow = window.parent;
  var clientDocument = clientWindow.document;
  var key = a.join(".");
  if (nameContainer == "FlashVars") {
    return com.inq.flash.client.control.FlashVars.get(key);
  } else {
    if (nameContainer == "Window") {
      var val = "";
      var obj = clientWindow;
      try {
        key = a.shift();
        while (key != null) {
          if (obj[key] != null) {
            obj = obj[key];
            if (obj == window) {
              throw "Cannot access IJSF internals: " + value;
            }
            key = a.shift();
          } else {
            throw "Item " + key + " not found in " + value;
          }
        }
      } catch (e) {
        throw "Window item not accessible: " + Std.string(e);
      }
      return "" + Std.string(obj);
    } else {
      if (nameContainer == "InputField") {
        try {
          var el = clientDocument.getElementById(key);
          if (el != null) {
            if (el.value != null) {
              return el.value;
            }
          }
        } catch (e) {
          haxe.Log.trace("Window item not accessible: " + Std.string(e), {fileName:"CommandParser.hx", lineNumber:75, className:"com.inq.ui.CommandParser", methodName:"evaluateSymbolicReference"});
        }
        return "";
      } else {
        var c = Application.application.getMxmlItem(nameContainer);
        var iVal = 0;
        if (c != null) {
          switch(key) {
            case "top":
              iVal = c.getY();
              break;
            case "left":
              iVal = c.getX();
              break;
            case "right":
              iVal = c.getX() + c.getWidth();
              break;
            case "bottom":
              iVal = c.getY() + c.getHeight();
              break;
            case "width":
              iVal = c.getWidth();
              break;
            case "height":
              iVal = c.getHeight();
              break;
            case "visible":
              iVal = c.getVisible();
              break;
            default:
              iVal = 0;
          }
          return "" + iVal;
        }
      }
    }
  }
  return "0";
};
com.inq.ui.CommandParser.InitializeKeywordMap = function() {
  var keywordMap = {};
  keywordMap["IF"] = "if(";
  keywordMap["THEN"] = "){";
  keywordMap["ELSE"] = "}else{";
  keywordMap["END"] = "}";
  keywordMap["TRUE"] = "(true)";
  keywordMap["FALSE"] = "(false)";
  keywordMap["AND"] = "&&";
  keywordMap["OR"] = "||";
  keywordMap["EQ"] = "==";
  keywordMap["NE"] = "!=";
  keywordMap["NOT"] = "!";
  return keywordMap;
};
com.inq.ui.CommandParser.getNextToken = function(commandString, offset) {
  if (offset == null) {
    offset = 0;
  }
  var token;
  var s = HxOverrides.substr(commandString, offset, null);
  var regStringLiteral = new EReg("^([\"'])(?:(?=(\\\\?))\\2.)*?\\1", "m");
  var regNumber = new EReg("^([-+]?\\d+(\\.\\d+)?)", "m");
  var regKeyword = new EReg("^\\b(IF|THEN|ELSE|END|TRUE|FALSE|AND|OR|EQ|NE|NOT)\\b", "m");
  var regOperators = new EReg("^([+]|[-])", "m");
  var regProperties = new EReg("^\\b((\\w*)(\\.(\\w*)\\b)+)\\b", "m");
  var regFuncs = new EReg("^(email|hide|show|hideLayer|showLayer|shrink|grow|fire|popout|close|send|call|minimize|restore|resizeChatWindow)\\b", "m");
  var regTwoParam = new EReg("^\\b((resizeChatWindow)\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\))\\s*", "m");
  var regOneParam = new EReg("^\\b((hide|show|hideLayer|showLayer|shrink|grow|fire)\\s*\\(\\s*(\\w+)\\s*\\))\\s*", "m");
  var regNoParams = new EReg("^(\\b(close|popout|send|call|minimize|email|restore)\\(\\s*\\))\\s*", "m");
  var token1 = null;
  var firstChar = s.charAt(0);
  while (" \t\r\n".indexOf(firstChar) != -1) {
    ++offset;
    s = HxOverrides.substr(s, 1, null);
    firstChar = s.charAt(0);
  }
  if (s == "") {
    token1 = "";
  } else {
    if (firstChar == "'" || firstChar == '"') {
      if (regStringLiteral.match(s)) {
        token1 = regStringLiteral.matched(0);
        offset += token1.length;
      } else {
        com.inq.ui.CommandParser.showErrorLocation(commandString, offset);
        throw "invalid literal at offset " + offset + " token in: " + commandString;
      }
    } else {
      if (regNumber.match(s)) {
        token1 = regNumber.matched(0);
        offset += token1.length;
      } else {
        if (regKeyword.match(s)) {
          token1 = regKeyword.matched(0);
          offset += token1.length;
          token1 = com.inq.ui.CommandParser.KEYWORD_MAP[token1];
        } else {
          if (regProperties.match(s)) {
            token1 = regProperties.matched(0);
            offset += token1.length;
            var valu = com.inq.ui.CommandParser.evaluateSymbolicReference(token1);
            if (valu == true || valu == false || valu == "true" || valu == "false") {
              token1 = "" + Std.string(valu);
            } else {
              if (regNumber.match("" + Std.string(valu))) {
                token1 = "" + Std.string(valu);
              } else {
                token1 = com.inq.utils.StringUtil.toJsonString("" + Std.string(valu));
              }
            }
          } else {
            if (regFuncs.match(s)) {
              var funcName = regFuncs.matched(0);
              if (regOneParam.match(s)) {
                token1 = regOneParam.matched(0);
                offset += token1.length;
                token1 = "exposedCmds." + funcName + "(" + com.inq.utils.StringUtil.toJsonString(regOneParam.matched(3)) + ");";
              } else {
                if (regTwoParam.match(s)) {
                  token1 = regTwoParam.matched(0);
                  offset += token1.length;
                  token1 = "exposedCmds." + funcName + "(" + regTwoParam.matched(3) + "," + regTwoParam.matched(4) + ");";
                } else {
                  if (regNoParams.match(s)) {
                    token1 = regNoParams.matched(0);
                    offset += token1.length;
                    token1 = "exposedCmds." + funcName + "();";
                  } else {
                    com.inq.ui.CommandParser.showErrorLocation(commandString, offset + funcName.length);
                    throw "Invalid parameter for function " + funcName + " at offset " + offset + funcName.length + " token in: " + commandString;
                  }
                }
              }
            } else {
              com.inq.ui.CommandParser.showErrorLocation(commandString, offset);
              throw "Invalid token at offset " + offset + " token in: " + commandString;
            }
          }
        }
      }
    }
  }
  var remainder = HxOverrides.substr(commandString, offset, null);
  return {token:token1, remainder:remainder, offset:offset};
};
com.inq.ui.CommandParser.showErrorLocation = function(logicString, offset) {
  var position = "";
  var regNotWhiteSpace = new EReg("\\S", "gm");
  position = regNotWhiteSpace.replace(logicString, " ");
  position = HxOverrides.substr(position, 0, offset) + "^";
  haxe.Log.trace("Error in logic string:\n" + logicString + "\n" + position, {fileName:"CommandParser.hx", lineNumber:231, className:"com.inq.ui.CommandParser", methodName:"showErrorLocation"});
};
com.inq.ui.CommandParser.executeLogic = function(logicString, test, container) {
  if (test == null) {
    test = false;
  }
  if (logicString == null || logicString == "") {
    return true;
  }
  var command = "";
  var off = 0;
  var ob;
  try {
    do {
      ob = com.inq.ui.CommandParser.getNextToken(logicString, off);
      command += Std.string(ob.token);
      off = ob.offset;
    } while (ob.remainder != "");
    var noop = function() {
    };
    var exposedCmds = {};
    if (test) {
      exposedCmds["hide"] = exposedCmds["show"] = exposedCmds["hideLayer"] = exposedCmds["showLayer"] = exposedCmds["grow"] = exposedCmds["shrink"] = exposedCmds["close"] = exposedCmds["popout"] = exposedCmds["send"] = exposedCmds["call"] = exposedCmds["fire"] = exposedCmds["minimize"] = exposedCmds["restore"] = exposedCmds["resizeChatWindow"] = exposedCmds["email"] = noop;
    } else {
      exposedCmds["hide"] = com.inq.ui.Container.hide;
      exposedCmds["show"] = com.inq.ui.Container.show;
      exposedCmds["hideLayer"] = com.inq.flash.client.control.XFrameWorker.hideLayer;
      exposedCmds["showLayer"] = com.inq.flash.client.control.XFrameWorker.showLayer;
      exposedCmds["grow"] = com.inq.flash.client.control.XFrameWorker.grow;
      exposedCmds["shrink"] = com.inq.flash.client.control.XFrameWorker.shrink;
      exposedCmds["close"] = com.inq.flash.client.chatskins.SkinControl.actionBtnCloseChat;
      exposedCmds["popout"] = com.inq.flash.client.chatskins.SkinControl.actionBtnPopOut;
      exposedCmds["send"] = com.inq.flash.client.chatskins.SkinControl.actionBtnSend;
      exposedCmds["call"] = com.inq.flash.client.chatskins.SkinControl.actionBtnCall;
      exposedCmds["fire"] = com.inq.flash.client.control.FlashPeer.fireCustomEvent;
      exposedCmds["minimize"] = com.inq.flash.client.control.MinimizeManager.actionMinimize;
      exposedCmds["restore"] = com.inq.flash.client.control.MinimizeManager.actionRestore;
      exposedCmds["resizeChatWindow"] = Application.ResizeStage;
      exposedCmds["email"] = com.inq.flash.client.chatskins.EmailMgr.actionBtnSendEmail;
    }
    window["exposedCmds"] = exposedCmds;
    window.eval(command);
  } catch (e) {
    haxe.Log.trace("Could not run event on compenent " + container.getID() + "\nfor: " + logicString + "\nError:" + Std.string(e) + "\nJS: " + command, {fileName:"CommandParser.hx", lineNumber:286, className:"com.inq.ui.CommandParser", methodName:"executeLogic"});
    return false;
  }
  return true;
};
com.inq.ui.CommandParser.addListeners = function() {
  var cntrKeys = Application.keySet();
  var cntr;
  var key;
  var ix;
  while (cntrKeys.length > 0) {
    key = cntrKeys.pop();
    cntr = Application.getContainer(key);
    if (cntr != null) {
      cntr.addMxmlListeners();
    }
  }
};
com.inq.ui.CommandParser.prototype.__class__ = com.inq.ui.CommandParser;
com.inq.ui.CommandParser.WHITESPACE = " \t\r\n";
com.inq.ui.CommandParser.KEYWORD_MAP = com.inq.ui.CommandParser.InitializeKeywordMap();
com.inq.ui.Html = function(tagName, _id, parentNode) {
  var tag = "";
  if (com.inq.flash.client.control.FlashPeer.getIsBuilder()) {
    tag = tagName;
  } else {
    tag = tagName.toUpperCase();
    tag = tag.split(":")[1];
  }
  var doc = parentNode.document;
  var element = null;
  element = com.inq.ui.Container.getElementById(_id);
  if (element == null) {
    element = doc.createElement(tag);
  }
  com.inq.ui.Container.call(this, element, null, doc);
  com.inq.ui.ClientBody.registerElement(this);
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.Html, "com.inq.ui.Html");
com.inq.ui.Html.prototype.buildStyle = function() {
  if (this._div.id == com.inq.ui.Container.SC_TITLEBAR || this._div.id == com.inq.ui.Container.SC_RESIZE) {
    this.buildNewStyle();
  } else {
    this.buildClientElementStyle();
  }
};
com.inq.ui.Html.prototype.setVisible = function(val) {
  try {
    var isVisible = !("false" == val || null == val || false == val);
    this._div.style.display = isVisible ? "" : "none";
    this.styles.visible = isVisible ? "true" : "false";
    this._visible = isVisible;
  } catch (e) {
  }
};
com.inq.ui.Html.prototype.setID = function(val) {
  var alreadyPrepended = val.indexOf("tcChat_") == 0 || val.indexOf("inq") == 0;
  var safeID = "tcChat_" + val;
  if (!alreadyPrepended) {
    this._div.id = safeID;
  }
  this.styles["id"] = val;
  com.inq.ui.ClientBody.registerElement(this);
};
com.inq.ui.Html.prototype.applyStyles = function() {
  com.inq.ui.Container.prototype.applyStyle.call(this);
};
com.inq.ui.Html.prototype._getText = function() {
  return this._div.innerHTML;
};
com.inq.ui.Html.prototype._setText = function(text) {
  this._div.innerHTML = text;
  return text;
};
com.inq.ui.Html.prototype._setStyle = function(style) {
  this._style = style;
  return this._style;
};
com.inq.ui.Html.prototype.removeFromBody = function() {
  var p = this._div.parentNode;
  if (p != null) {
    p.removeChild(this._div);
  }
};
com.inq.ui.Html.prototype.text = null;
com.inq.ui.Html.prototype.style = null;
com.inq.ui.Html.prototype.__class__ = com.inq.ui.Html;
com.inq.ui.Literal = function(_id) {
  com.inq.ui.Container.call(this, _id);
  this.styles = {};
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.Literal, "com.inq.ui.Literal ");
com.inq.ui.Literal.prototype.buildStyle = function() {
  var styleString = "";
  for (var prop in this.styles) {
    switch(prop) {
      case "id":
        this._div.setAttribute("id", this.styles[prop]);
        this._id = this.styles[prop];
        break;
      case "class":
        this._div.setAttribute("class", this.styles[prop]);
        break;
      case "src":
        this._div.setAttribute("src", this.styles[prop]);
        break;
      case "type":
        this._div.setAttribute("type", this.styles[prop]);
        break;
      case "tabindex":
        this._div.setAttribute("tabindex", this.styles[prop]);
        break;
      case "role":
        this._div.setAttribute("role", this.styles[prop]);
        break;
      case "innerHTML":
        this._div.innerHTML = this.styles[prop];
        break;
      case "innerText":
        this._div.innerText = this.styles[prop];
      default:
        styleString = styleString + prop + ":" + this.styles[prop] + ";";
    }
  }
  this._style = styleString;
};
com.inq.ui.Literal.prototype.applyStyle = function() {
  this.buildStyle();
  this._div.style.cssText = this._style;
};
com.inq.ui.Literal.prototype.__class__ = com.inq.ui.Literal;
com.inq.ui.IFrame = function(_id) {
  com.inq.ui.Container.call(this, _id);
  this.initStyle("id", _id);
  this._div.innerHTML = '<IFRAME width="100%" height="100%" scrolling="NO" frameborder="0"></IFRAME>';
  this._iframe = this._div.getElementsByTagName("IFRAME")[0];
  this.setScrolling("no");
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.IFrame, "com.inq.ui.IFrame");
com.inq.ui.IFrame.prototype.setScrolling = function(val) {
  if (this._div != null) {
    this.scrolling = val;
    this._iframe.scrolling = val;
    this._iframe.setAttribute("scrolling", val);
  }
};
com.inq.ui.IFrame.prototype.setSrc = function(val) {
  if (this._div != null) {
    this.src = val;
    if (this.src == null || this.src == "") {
      return;
    }
    this._iframe.src = this.evaluateString(this.src);
  }
};
com.inq.ui.IFrame.prototype.setHandCursor = function(val) {
  var value = val;
  switch(value.toLowerCase()) {
    case "true":
      this._useHandCursor = true;
      break;
    case "false":
      this._useHandCursor = false;
      break;
    default:
      this._useHandCursor = false;
  }
  this.useHandCursor = this._useHandCursor ? "true" : "false";
};
com.inq.ui.IFrame.prototype.resize = function() {
  this.applyStyle();
};
com.inq.ui.IFrame.prototype.setLabel = function(val) {
  this.label = val;
};
com.inq.ui.IFrame.prototype.buildStyle = function() {
  com.inq.ui.Container.prototype.buildStyle.call(this);
  if (this._useHandCursor) {
    this._style += "cursor: pointer;";
  }
  var accesskey = this.getStyle("accesskey");
  if (null != accesskey) {
    this._div.setAttribute("accesskey", accesskey);
  }
  var tabindex = this.getStyle("tabindex");
  if (null != tabindex) {
    this._div.setAttribute("tabindex", tabindex);
  }
};
com.inq.ui.IFrame.prototype._iframe = null;
com.inq.ui.IFrame.prototype._anchor = null;
com.inq.ui.IFrame.prototype._img = null;
com.inq.ui.IFrame.prototype._useHandCursor = null;
com.inq.ui.IFrame.prototype.label = null;
com.inq.ui.IFrame.prototype.useHandCursor = null;
com.inq.ui.IFrame.prototype.__class__ = com.inq.ui.IFrame;
com.inq.ui.Image = function(_id) {
  com.inq.ui.Container.call(this, _id);
  if (this._div != null) {
    this._div.alt = "";
    this._div.setAttribute("aria-hidden", "true");
  }
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.Image, "com.inq.ui.Image");
com.inq.ui.Image.prototype.setSrc = function(val) {
  haxe.Log.trace("Image.setSrc: " + Std.string(val), {fileName:"Image.hx", lineNumber:19, className:"com.inq.ui.Image", methodName:"setSrc"});
  if (this._div != null) {
    this.src = val;
    if (this.src == null || this.src == "") {
      return;
    }
    this._newim = this.getNewImage();
    this._newim.onload = $bind(this, this.whenLoaded);
    this._newim.src = this.src;
    this._newim.alt = "";
    this._newim.setAttribute("aria-hidden", "true");
    this._newim.setAttribute("tabindex", "-1");
  }
};
com.inq.ui.Image.prototype._img = null;
com.inq.ui.Image.prototype.__class__ = com.inq.ui.Image;
com.inq.ui.Keyboard = function() {
};
$hxClasses.registerClass(com.inq.ui.Keyboard, "com.inq.ui.Keyboard");
com.inq.ui.Keyboard.capsLock = null;
com.inq.ui.Keyboard.isAccessible = function() {
  return true;
};
com.inq.ui.Keyboard.numLock = null;
com.inq.ui.Keyboard.prototype.__class__ = com.inq.ui.Keyboard;
com.inq.ui.Keyboard.BACKSPACE = 8;
com.inq.ui.Keyboard.CAPS_LOCK = 20;
com.inq.ui.Keyboard.CONTROL = 17;
com.inq.ui.Keyboard.DELETE = 46;
com.inq.ui.Keyboard.DOWN = 40;
com.inq.ui.Keyboard.END = 35;
com.inq.ui.Keyboard.ENTER = 13;
com.inq.ui.Keyboard.ESCAPE = 27;
com.inq.ui.Keyboard.F1 = 112;
com.inq.ui.Keyboard.F2 = 113;
com.inq.ui.Keyboard.F3 = 114;
com.inq.ui.Keyboard.F4 = 115;
com.inq.ui.Keyboard.F5 = 116;
com.inq.ui.Keyboard.F6 = 117;
com.inq.ui.Keyboard.F7 = 118;
com.inq.ui.Keyboard.F8 = 119;
com.inq.ui.Keyboard.F9 = 120;
com.inq.ui.Keyboard.F10 = 121;
com.inq.ui.Keyboard.F11 = 122;
com.inq.ui.Keyboard.F12 = 123;
com.inq.ui.Keyboard.F13 = 124;
com.inq.ui.Keyboard.F14 = 125;
com.inq.ui.Keyboard.F15 = 126;
com.inq.ui.Keyboard.HOME = 36;
com.inq.ui.Keyboard.PAUSE = 19;
com.inq.ui.Keyboard.INSERT = 45;
com.inq.ui.Keyboard.LEFT = 37;
com.inq.ui.Keyboard.NUMPAD_0 = 96;
com.inq.ui.Keyboard.NUMPAD_1 = 97;
com.inq.ui.Keyboard.NUMPAD_2 = 98;
com.inq.ui.Keyboard.NUMPAD_3 = 99;
com.inq.ui.Keyboard.NUMPAD_4 = 100;
com.inq.ui.Keyboard.NUMPAD_5 = 101;
com.inq.ui.Keyboard.NUMPAD_6 = 102;
com.inq.ui.Keyboard.NUMPAD_7 = 103;
com.inq.ui.Keyboard.NUMPAD_8 = 104;
com.inq.ui.Keyboard.NUMPAD_9 = 105;
com.inq.ui.Keyboard.NUMPAD_ADD = 107;
com.inq.ui.Keyboard.NUMPAD_DECIMAL = 110;
com.inq.ui.Keyboard.NUMPAD_DIVIDE = 111;
com.inq.ui.Keyboard.NUMPAD_ENTER = 108;
com.inq.ui.Keyboard.NUMPAD_MULTIPLY = 106;
com.inq.ui.Keyboard.NUMPAD_SUBTRACT = 109;
com.inq.ui.Keyboard.PAGE_DOWN = 34;
com.inq.ui.Keyboard.PAGE_UP = 33;
com.inq.ui.Keyboard.RIGHT = 39;
com.inq.ui.Keyboard.SHIFT = 16;
com.inq.ui.Keyboard.SPACE = 32;
com.inq.ui.Keyboard.TAB = 9;
com.inq.ui.Keyboard.UP = 38;
com.inq.ui.TextInput = function(_id) {
  com.inq.ui.AbstractTextInput.call(this, _id);
  this._div.innerHTML = '<textarea style="height:100%;width:100%"></textarea>';
  this._text = this._div.getElementsByTagName("TEXTAREA")[0];
  this.setupInput(this._text);
  if (this._input) {
    this._input["container"] = this;
  }
};
$hxClasses.extend(com.inq.ui.AbstractTextInput, com.inq.ui.TextInput, "com.inq.ui.TextInput");
com.inq.ui.TextInput.getContainer = function(element) {
  return element["container"];
};
com.inq.ui.TextInput.prototype.buildStyle = function() {
  if (com.inq.utils.Capabilities.isAndroid()) {
    this._input.setAttribute("autocomplete", "off");
  }
  com.inq.ui.AbstractTextInput.prototype.buildStyle.call(this);
  if (this.styles.value != null) {
    this.setText(this.evaluateString(this.styles.value));
  }
  if (this.styles.text != null) {
    this.setText(this.evaluateString(this.styles.text));
  }
  var textStyle = this.getStyle("title");
  if (textStyle != null) {
    this._text.title = textStyle;
  }
};
com.inq.ui.TextInput.prototype.applyAttributeMap = function() {
  for (var aKey in this.attributeMap) {
    if (this.attributeMap.hasOwnProperty(aKey)) {
      switch(aKey) {
        case "aria-live":
        ;
        case "aria-hidden":
          this._div.setAttribute(aKey, this.attributeMap[aKey]);
          break;
        default:
          this.getPrimaryObject().setAttribute(aKey, this.attributeMap[aKey]);
      }
    }
  }
};
com.inq.ui.TextInput.prototype.getPrimaryObject = function() {
  return this._input;
};
com.inq.ui.TextInput.prototype.getOffsetTop = function() {
  if (this._offsetTop != 0) {
    return this._offsetTop;
  }
  var stageDiv = com.inq.ui.Stage.getStageElement();
  if (stageDiv && stageDiv.getBoundingClientRect) {
    this._offsetTop = Math.abs(stageDiv.getBoundingClientRect().top - this._input.getBoundingClientRect().top);
  }
  return this._offsetTop;
};
com.inq.ui.TextInput.prototype.applyStyle = function() {
  com.inq.ui.AbstractTextInput.prototype.applyStyle.call(this);
  if (com.inq.utils.Capabilities.isPhone() && com.inq.utils.Capabilities.isAndroid("Android 4.0.4;")) {
    var left = this.getStyle("left");
    var top = this.getStyle("top");
    var bottom = this.getStyle("bottom");
    var right = this.getStyle("right");
    var width = this.getStyle("width");
    var height = this.getStyle("height");
    this._input.style.top = top != null ? top + "px" : null;
    this._input.style.bottom = bottom != null ? bottom + "px" : null;
    this._input.style.right = right != null ? right + "px" : null;
    this._input.style.left = left != null ? left + "px" : null;
    this._input.style.width = width != null ? width + "px" : null;
    this._input.style.height = height != null ? height + "px" : null;
    this._input.style.position = "fixed";
  }
};
com.inq.ui.TextInput.prototype.setText = function(val) {
  this._text.value = val;
};
com.inq.ui.TextInput.prototype.getText = function() {
  return this._text.value;
};
com.inq.ui.TextInput.prototype.getHtmlLabelObject = function() {
  var labelObjet = null;
  if (typeof this._input != "undefined") {
    labelObjet = this._input;
  } else {
    if (typeof this._div != "undefined") {
      labelObjet = this._div.firstChild;
    }
  }
  return labelObjet;
};
com.inq.ui.TextInput.prototype._text = null;
com.inq.ui.TextInput.prototype._offsetTop = 0;
com.inq.ui.Label = function(text) {
  com.inq.ui.TextInput.call(this);
  this._div.innerHTML = '<input type="text" style="height:100%;width:100%"></input>';
  this._input = this._div.getElementsByTagName("input")[0];
  this._input.disabled = true;
  if (text != null) {
    this._input.value = text;
  }
};
$hxClasses.extend(com.inq.ui.TextInput, com.inq.ui.Label, "com.inq.ui.Label");
com.inq.ui.Label.prototype.__class__ = com.inq.ui.Label;
com.inq.ui.LineInput = function(_id) {
  com.inq.ui.AbstractTextInput.call(this, _id);
  this._div.innerHTML = '<input type="text" style="height:100%;width:100%"></input>';
  this.setupInput(this._div.getElementsByTagName("input")[0]);
};
$hxClasses.extend(com.inq.ui.AbstractTextInput, com.inq.ui.LineInput, "com.inq.ui.LineInput");
com.inq.ui.LineInput.prototype.buildStyle = function() {
  com.inq.ui.AbstractTextInput.prototype.buildStyle.call(this);
  if (this.styles.value != null) {
    var ln = this._div.getElementsByTagName("INPUT")[0];
    ln.value = this.evaluateString(this.styles.value);
  }
};
com.inq.ui.Screen = function() {
  com.inq.ui.Container.call(this);
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.Screen, "com.inq.ui.Screen");
com.inq.ui.Screen.prototype.__class__ = com.inq.ui.Screen;
com.inq.ui.Stage = function() {
  com.inq.ui.Container.call(this, window.frameElement);
  if (com.inq.ui.Stage.stage == null) {
    com.inq.stage.ViewportMgr.init();
    com.inq.ui.Stage.stage = this;
  } else {
    throw "Stage is not a singleton";
  }
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.Stage, "com.inq.ui.Stage");
com.inq.ui.Stage.height = null;
com.inq.ui.Stage.width = null;
com.inq.ui.Stage.stageLeft = null;
com.inq.ui.Stage.stageTop = null;
com.inq.ui.Stage.getInstance = function() {
  if (com.inq.ui.Stage.stage == null) {
    com.inq.ui.Stage.stage = new com.inq.ui.Stage;
  }
  return com.inq.ui.Stage.stage;
};
com.inq.ui.Stage.getterStageHeight = function() {
  var stageHeight;
  var style = window.frameElement.style;
  stageHeight = style.height.indexOf("%") >= 0 ? window["innerHeight"] != null ? window.innerHeight : com.inq.ui.Stage.getOffsetHeight() : Std.parseInt(style.height);
  return stageHeight;
};
com.inq.ui.Stage.getterStageWidth = function() {
  var stageWidth;
  var style = window.frameElement.style;
  stageWidth = style.width.indexOf("%") >= 0 ? window["innerWidth"] != null ? window.innerWidth : com.inq.ui.Stage.getOffsetWidth() : Std.parseInt(style.width);
  return stageWidth;
};
com.inq.ui.Stage.getOffsetHeight = function() {
  var iOffsetHeight = 0;
  var iframeWin = window;
  var iframeDoc = iframeWin.document;
  if (null == iframeWin["innerHeight"]) {
    iOffsetHeight = iframeDoc["documentElement"] != null ? 0 != iframeDoc.documentElement.offsetHeight ? iframeDoc.documentElement.offsetHeight : iframeDoc.body.offsetHeight : iframeDoc.body.offsetHeight;
    if (0 == iOffsetHeight) {
      iOffsetHeight = iframeDoc.body.offsetHeight;
    }
  } else {
    iOffsetHeight = iframeWin.innerHeight;
  }
  return iOffsetHeight;
};
com.inq.ui.Stage.getStageLeft = function() {
  return Std.parseInt(com.inq.ui.Stage.getStageElement().style.left);
};
com.inq.ui.Stage.getStageTop = function() {
  return Std.parseInt(com.inq.ui.Stage.getStageElement().style.top);
};
com.inq.ui.Stage.getOffsetWidth = function() {
  var iOffsetWidth = 0;
  var iframeWin = window;
  var iframeDoc = iframeWin.document;
  if (null == iframeWin["innerWidth"]) {
    iOffsetWidth = iframeDoc["documentElement"] != null ? 0 != iframeDoc.documentElement.offsetWidth ? iframeDoc.documentElement.offsetWidth : iframeDoc.body.offsetWidth : iframeDoc.body.offsetWidth;
    if (0 == iOffsetWidth) {
      iOffsetWidth = iframeDoc.body.offsetWidth;
    }
  } else {
    iOffsetWidth = iframeWin.innerWidth;
  }
  return iOffsetWidth;
};
com.inq.ui.Stage.getStageElement = function() {
  try {
    var skinDiv = window.parent.document.getElementById("tcChat_Skin");
    if (skinDiv != null) {
      if (com.inq.ui.Stage.stage._div != skinDiv) {
        skinDiv.style.cssText = com.inq.ui.Stage.stage._div.style.cssText;
        var width = Std.parseInt(com.inq.ui.Stage.stage._div.style.width);
        var height = Std.parseInt(com.inq.ui.Stage.stage._div.style.height);
        var iframe = window.frameElement;
        if (iframe != null) {
          iframe.style.display = "none";
        }
        com.inq.ui.Stage.stage._div = skinDiv;
        Application.MoveSizeDiv2Stage(width, height);
      }
    }
  } catch (e) {
  }
  return com.inq.ui.Stage.stage._div;
};
com.inq.ui.Stage.prototype.setObjectFocus = function(object) {
  this.focus = object;
  object.setFocus();
};
com.inq.ui.Stage.prototype.getVisible = function(_visible) {
  return this._div.style.display != "none";
};
com.inq.ui.Stage.prototype.setVisible = function(_visible) {
  try {
    com.inq.ui.Stage.getStageElement();
    com.inq.stage.ViewportMgr.visible(_visible);
    this.styles.visible = _visible ? "true" : "false";
    this._div.style.display = _visible ? "" : "none";
    if (!Application.IsPersistent()) {
      com.inq.ui.Stage._dragBar.style.display = _visible ? "" : "none";
      Application.application.setVisibleResizeCorner(_visible);
    }
  } catch (e) {
    haxe.Log.trace(e, {fileName:"Stage.hx", lineNumber:58, className:"com.inq.ui.Stage", methodName:"setVisible"});
  }
};
com.inq.ui.Stage.prototype.focus = null;
com.inq.ui.Stage.prototype.__class__ = com.inq.ui.Stage;
com.inq.ui.Stage._dragBar = window.parent.document.getElementById("inqTitleBar");
com.inq.ui.Stage.stage = null;
com.inq.ui.StyleSheet = function() {
  this.styleNames = {};
};
$hxClasses.registerClass(com.inq.ui.StyleSheet, "com.inq.ui.StyleSheet");
com.inq.ui.StyleSheet.prototype.transform = function(formatObject) {
  return null;
};
com.inq.ui.StyleSheet.prototype.setStyle = function(styleName, styleObject) {
  var s = "";
  if (!js.Boot.__instanceof(styleObject, String)) {
    var i;
    var keyz = Reflect.fields(styleObject);
    var _g1 = 0, _g = keyz.length;
    while (_g1 < _g) {
      var i1 = _g1++;
      var name = keyz[i1];
      var fixedname = name;
      switch(name.toLowerCase()) {
        case "fontfamily":
          fixedname = "font-family";
          break;
        case "fontsize":
          fixedname = "font-size";
          break;
        case "fontweight":
          fixedname = "font-weight";
          break;
        case "fontstyle":
          fixedname = "font-style";
          break;
        case "fontsizeadjust":
          fixedname = "font-size-adjust";
          break;
        case "fontstretch":
          fixedname = "font-stretch";
          break;
        case "fontvariant":
          fixedname = "font-variant";
          break;
        case "lineheight":
          fixedname = "line-height";
          break;
        case "textalign":
          fixedname = "text-align";
          break;
        case "textdecoration":
          fixedname = "text-decoration";
          break;
        case "textindent":
          fixedname = "text-indent";
          break;
        case "textshadow":
          fixedname = "text-shadow";
          break;
        case "texttransform":
          fixedname = "text-transform";
          break;
        default:
          fixedname = name;
      }
      var valuz = styleObject[name];
      s += fixedname + ":" + Std.string(valuz) + ";";
    }
  } else {
    s = styleObject;
  }
  this.styleNames[styleName] = s;
};
com.inq.ui.StyleSheet.prototype.parseCSS = function(CSSText) {
};
com.inq.ui.StyleSheet.prototype.getStyle = function(styleName) {
  var style = this.styleNames[styleName];
  return style;
};
com.inq.ui.StyleSheet.prototype.clear = function() {
  this.styleNames = {};
};
com.inq.ui.StyleSheet.prototype.styleNames = null;
com.inq.ui.StyleSheet.prototype.__class__ = com.inq.ui.StyleSheet;
com.inq.ui.Text = function(text) {
  com.inq.ui.TextInput.call(this);
  this._div.innerHTML = '<span style="height:100%;width:100%"></span>';
  this._text = this._div.getElementsByTagName("SPAN")[0];
  if (text != null) {
    this.setText(text);
  }
};
$hxClasses.extend(com.inq.ui.TextInput, com.inq.ui.Text, "com.inq.ui.Text");
com.inq.ui.Text.prototype.setText = function(val) {
  this._text.innerHTML = val;
};
com.inq.ui.Text.prototype.applyStyle = function() {
  com.inq.ui.Container.prototype.applyStyle.call(this);
  var id = this._div.id.toLowerCase();
  if (navigator.userAgent.indexOf("MSIE 7") >= 0 || id.indexOf("failedsend") >= 0 || id.indexOf("successsend") >= 0) {
    if (id.indexOf("emailtitle") >= 0 || id.indexOf("emaildescription") >= 0 || id.indexOf("failedsend") >= 0 || id.indexOf("successsend") >= 0) {
      try {
        var _s = this._div.style;
        if (this.styles.bottom) {
          _s.top = -(parseInt(this.styles.bottom) + this._text.offsetHeight) + "px";
        } else {
          _s.top = parseInt(_s.top) + this._div.clientHeight - this._text.offsetHeight + "px";
        }
      } catch (e) {
        haxe.Log.trace("com.inq.ui.Text::applyStyle:" + e, {fileName:"Text.js", lineNumber:50, className:"com.inq.ui.Text", methodName:"applyStyle"});
      }
    }
  }
};
com.inq.ui.TextArea = function(_id) {
  com.inq.ui.Container.call(this, _id);
  this._div.innerHTML = '<div id="tc_chat_box' + _id + '"><span style="background-color:transparent;overflow: hidden; overflow-x: hidden; overflow-y: hidden;"></span></div>';
  this._span = this._div.getElementsByTagName("SPAN")[0];
  this._ta = this._div.getElementsByTagName("DIV")[0];
  this._setHtmlText("");
  this.setStyle("backgroundColor", "#FFFFFF");
  this._span.innerHTML = "";
  this._ta.style.cssText = "position:absolute; top:0px; left:0px; height:100%; width:100%; overflow:auto; overflow-x:hidden; overflow-y:auto;";
  this.initTransformScrolling();
  this.keepIosScrolling();
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.TextArea, "com.inq.ui.TextArea");
com.inq.ui.TextArea.useTransformScrolling = function() {
  return com.inq.utils.Capabilities.isAndroid() || com.inq.utils.Capabilities.isWindowsPhone();
};
com.inq.ui.TextArea.clone = function(source, id) {
  var ta = new com.inq.ui.TextArea;
  ta.setID(id);
  if (source._div != null) {
    ta._div = source._div.cloneNode(true);
  }
  ta._span = ta._div.getElementsByTagName("SPAN")[0];
  ta._ta = ta._div.getElementsByTagName("DIV")[0];
  var keyz = Reflect.fields(source.styles);
  var _g1 = 0, _g = keyz.length;
  while (_g1 < _g) {
    var s = _g1++;
    var keyname = keyz[s];
    var datum = source.styles[keyname];
    ta.setStyle(keyname, datum);
  }
  ta._ta.style.cssText = source._ta.style.cssText;
  var bi = ta.getStyle("backgroundImage");
  if (bi != null && bi != "") {
    ta.setBackgroundImage(bi, true);
  }
  ta._setHtmlText(source._getHtmlText());
  ta.initTransformScrolling();
  ta.keepIosScrolling();
  return ta;
};
com.inq.ui.TextArea.prototype._getStyleSheet = function() {
  return this._styleSheet;
};
com.inq.ui.TextArea.prototype._setStyleSheet = function(val) {
  return;
};
com.inq.ui.TextArea.prototype._setHtmlText = function(val) {
  this._span.innerHTML = val.split("\n").join("<br/>");
};
com.inq.ui.TextArea.prototype._getHtmlText = function() {
  if (this._span == null) {
    return "";
  }
  return this._span.innerHTML;
};
com.inq.ui.TextArea.prototype.setID = function(val) {
  com.inq.ui.Container.prototype.setID.call(this, val);
  if (this._span != null) {
    this._span.id = Std.string(this._div.id) + "_span";
  }
};
com.inq.ui.TextArea.prototype.getLocation = function(event) {
  var t = event.touches ? event.touches[0] : event;
  var loc = new com.inq.utils.Point(t.screenX, t.screenY);
  return loc;
};
com.inq.ui.TextArea.prototype.forceRange = function(x, min, max) {
  var r = x;
  if (r > max) {
    r = max;
  }
  if (r < min) {
    r = min;
  }
  return r;
};
com.inq.ui.TextArea.prototype.getMaxScrollPosition = function() {
  var table = this._ta.getElementsByTagName("table")[0];
  var taHeight = Math.max(table.offsetHeight, this._span.offsetHeight, this._ta.offsetHeight);
  var x = this._ta.offsetWidth - this._div.offsetWidth | 0;
  var y = taHeight - this._div.offsetHeight | 0;
  if (x < 0) {
    x = 0;
  }
  if (y < 0) {
    y = 0;
  }
  return new com.inq.utils.Point(x, y);
};
com.inq.ui.TextArea.prototype.scrollToPosition = function(p) {
  if (com.inq.ui.TextArea.useTransformScrolling()) {
    var max = this.getMaxScrollPosition();
    max.y = Math.max(this._scrollPosition.y, max.y);
    p.x = this.forceRange(p.x, 0, max.x);
    p.y = this.forceRange(p.y, 0, max.y);
    this._scrollPosition = p;
    var y = p.y * -1;
    var transform = "translate(" + p.x + "px, " + y + "px)";
    this._ta.style["-webkit-transform"] = transform;
  } else {
    this._ta.scrollTop = p.y;
  }
};
com.inq.ui.TextArea.prototype.scrollToBottom = function() {
  if (com.inq.ui.TextArea.useTransformScrolling()) {
    if (com.inq.utils.Capabilities.isWindowsPhone()) {
      var m = this.getMaxScrollPosition();
      var self = this;
      com.inq.utils.Timer.delay(function() {
        self.scrollToPosition(m);
      }, 1);
    } else {
      var m = this.getMaxScrollPosition();
      this.scrollToPosition(m);
    }
  } else {
    var pos = this.getMaxScrollPosition().y;
    this.scrollToPosition(new com.inq.utils.Point(0, pos));
  }
};
com.inq.ui.TextArea.prototype.scrollToTop = function() {
  this.scrollToPosition(new com.inq.utils.Point(0, 0));
};
com.inq.ui.TextArea.prototype.onTouchMove = function(event) {
  var loc = this.getLocation(event);
  this._startPosition = this._startPosition || loc;
  this._scrollPosition = this._scrollPosition || new com.inq.utils.Point(0, 0);
  var diff = this._startPosition.diff(loc);
  if (com.inq.utils.Capabilities.isWindowsPhone()) {
    diff.y = Math.round(diff.y / 2);
  }
  var newPosition = this._scrollPosition.copy().move(diff.x, diff.y * -1);
  this.scrollToPosition(newPosition);
  this._startPosition = loc;
  event.preventDefault();
};
com.inq.ui.TextArea.prototype.onTouchStart = function(event) {
  if (event.target.tagName == "A") {
    return;
  }
  if (event.touches.length == 1) {
    this._startPosition = this.getLocation(event);
    if (!com.inq.flash.client.chatskins.ChatTextFocusMonitor.HasFocus()) {
      event.preventDefault();
    }
  }
};
com.inq.ui.TextArea.prototype.initTransformScrolling = function() {
  if (com.inq.ui.TextArea.useTransformScrolling()) {
    this._scrollPosition = new com.inq.utils.Point(0, 0);
    this._startPosition = new com.inq.utils.Point(0, 0);
    com.inq.utils.Capabilities.BindListener(this._ta, "touchstart", $bind(this, this.onTouchStart));
    com.inq.utils.Capabilities.BindListener(this._ta, "touchmove", $bind(this, this.onTouchMove));
    this._ta.style.height = "";
    this.setStyle("overflow", "hidden");
    this.applyStyle();
  }
};
com.inq.ui.TextArea.prototype.isVerticalMotion = function(event) {
  var l = this.getLocation(event);
  var dx = Math.abs(l.x - this._startPosition.x);
  var dy = Math.abs(l.y - this._startPosition.y);
  var vert = 5 * dx < dy;
  return vert;
};
com.inq.ui.TextArea.prototype.preventPageScroll = function(event) {
  try {
    var ep = this.getLocation(event);
    if (ep.y < this._startPosition.y) {
      if (this._ta.scrollTop + this._ta.clientHeight < this._ta.scrollHeight) {
        event.stopPropagation();
      }
    } else {
      if (ep.y > this._startPosition.y) {
        if (this._ta.scrollTop > 0) {
          event.stopPropagation();
        }
      } else {
      }
    }
  } catch (err) {
  }
};
com.inq.ui.TextArea.prototype.saveTouchStartPosition = function(event) {
  this._startPosition = this.getLocation(event);
};
com.inq.ui.TextArea.prototype.keepIosScrolling = function() {
  if (com.inq.utils.Capabilities.isIphone()) {
    com.inq.utils.Capabilities.BindListener(this._ta, "touchstart", $bind(this, this.saveTouchStartPosition));
    com.inq.utils.Capabilities.BindListener(this._ta, "touchmove", $bind(this, this.preventPageScroll));
  }
};
com.inq.ui.TextArea.prototype.buildStyle = function() {
  com.inq.ui.Container.prototype.buildStyle.call(this);
  var tabindex = this.getStyle("tabindex");
  if (null != tabindex) {
    this._div.setAttribute("tabindex", tabindex);
  }
};
com.inq.ui.TextArea.prototype.applyStyle = function(event) {
  com.inq.ui.Container.prototype.applyStyle.call(this);
  var alt = this.styles["alt"];
  alt = !alt ? "" : alt;
  if (this._bgi != null) {
    this._bgi.alt = alt;
  }
};
com.inq.ui.TextArea.prototype.htmlText = null;
com.inq.ui.TextArea.prototype.styleSheet = null;
com.inq.ui.TextArea.prototype._startPosition = null;
com.inq.ui.TextArea.prototype._scrollPosition = null;
com.inq.ui.TextArea.prototype._ta = null;
com.inq.ui.TextArea.prototype._span = null;
com.inq.ui.TextArea.prototype._textarea = null;
com.inq.ui.TextArea.prototype._styleSheet = null;
com.inq.ui.TextField = function() {
};
$hxClasses.registerClass(com.inq.ui.TextField, "com.inq.ui.TextField");
com.inq.ui.TextField.prototype.__class__ = com.inq.ui.TextField;
com.inq.ui.FileInput = function(id) {
  com.inq.ui.Container.call(this, id);
  this._div.innerHTML = "<input id='uploadInput' name='file' type='file' style=\"position:absolute;left:-9999px;\"/>";
  this.input = this._div.getElementsByTagName("input")[0];
};
$hxClasses.extend(com.inq.ui.Container, com.inq.ui.FileInput, "com.inq.ui.FileInput");
com.inq.ui.FileInput.prototype.buildStyle = function() {
  com.inq.ui.Container.prototype.buildStyle.call(this);
};
com.inq.ui.FileInput.prototype.applyStyle = function() {
  com.inq.ui.Container.prototype.applyStyle.call(this);
  var htmlLabel = this._htmlLabel;
  if (htmlLabel) {
    htmlLabel.style.position = "";
    htmlLabel.style.left = "";
    htmlLabel.style.display = "inline-block";
    htmlLabel.style.width = "100%";
    htmlLabel.style.height = "100%";
  }
};
com.inq.ui.FileInput.prototype.input = null;
com.inq.ui.XFrame = function(_id) {
  com.inq.ui.IFrame.call(this, _id);
  this.initStyle("id", _id);
  this.__src = null;
  this.__oldSource = null;
  this.__initOnLoad = false;
  if (com.inq.utils.Capabilities.isPhone()) {
    this.initTouchScrolling();
  } else {
    if (com.inq.utils.Capabilities.isSafari() && com.inq.utils.Capabilities.isTablet()) {
      this.initFocusOnTouch();
    }
  }
};
$hxClasses.extend(com.inq.ui.IFrame, com.inq.ui.XFrame, "com.inq.ui.XFrame");
com.inq.ui.XFrame.prototype.readPersistedURL = function(defaultVal) {
  return com.inq.flash.client.control.PersistenceManager.GetValue(com.inq.ui.XFrame.PERSISTENT_URL_COOKIE_PREFIX + this.getID(), defaultVal);
};
com.inq.ui.XFrame.prototype.cloneXFrameData = function() {
  var target = {};
  var keyz = Reflect.fields(this.__src);
  var _g1 = 0, _g = keyz.length;
  while (_g1 < _g) {
    var s = _g1++;
    var name = keyz[s];
    if (name != "cacheId") {
      target[name] = this.__src[name];
    }
  }
  return target;
};
com.inq.ui.XFrame.prototype.persistURL = function() {
  com.inq.flash.client.control.PersistenceManager.SetValue(com.inq.ui.XFrame.PERSISTENT_URL_COOKIE_PREFIX + this.getID(), this.cloneXFrameData());
};
com.inq.ui.XFrame.prototype.loadContent = function() {
  this.setInnerHTML(this.__src);
};
com.inq.ui.XFrame.prototype.setInitOnLoad = function(val) {
  if (this._div != null && val == "true") {
    if (this.__src == null) {
      this.__initOnLoad = true;
    } else {
      this.setInnerHTML(this.__src);
    }
  }
};
com.inq.ui.XFrame.prototype.getInitOnLoad = function() {
  return this.__initOnLoad;
};
com.inq.ui.XFrame.prototype.updateSrc = function(channelID, initiator) {
  if (this.__src != null) {
    if (channelID) {
      this.__src.params.channelID = channelID;
    }
    this.__src["initiator"] = initiator;
  }
};
com.inq.ui.XFrame.prototype.setSrcWithChannelID = function(urldata, channelID) {
  if (this._div != null) {
    this.__src = urldata;
    if (this.__initOnLoad) {
      this.__initOnLoad = false;
      this.setInnerHTML(this.__src, channelID);
    }
  }
};
com.inq.ui.XFrame.prototype.setSrc = function(val) {
  var urldata = com.inq.flash.client.control.FlashPeer.parseXFrameUrl(val);
  if (this.__src == null) {
    urldata = this.readPersistedURL(urldata);
  }
  return this.setSrcWithChannelID(urldata);
};
com.inq.ui.XFrame.prototype.getIJSF = function() {
  var port = "" == window.location.port ? "" : ":" + window.location.port;
  var src = window.location.protocol + "//" + (window.location.host + port + window.location.pathname);
  return src;
};
com.inq.ui.XFrame.prototype.equal = function(o1, o2) {
  if (o1 == null) {
    return o2 == null;
  }
  var fields = Reflect.fields(o1);
  if (!(fields.length == Reflect.fields(o2).length)) {
    return false;
  }
  var _g1 = 0, _g = fields.length;
  while (_g1 < _g) {
    var s = _g1++;
    if (o1[fields[s]] == o2[fields[s]]) {
      return false;
    }
  }
  return true;
};
com.inq.ui.XFrame.prototype.setInnerHTML = function(source, channelID) {
  if (this.__oldSource == null || this.__oldSource.url != source.url || !this.equal(this.__oldSource["params"], this.__oldSource["params"])) {
    this.__oldSource = source;
    var parsedSource = this.evaluateString(source.url);
    this._iframe = com.inq.flash.client.control.FlashPeer.createXFrame(this._div, parsedSource, channelID, this.scrolling, source["params"], source["initiator"], {type:"chat", id:this.getID()});
  }
};
com.inq.ui.XFrame.prototype.sendCustomEventToXForms = function(event, params) {
  if (this._iframe && this._iframe.contentWindow.TCXForm) {
    return this._iframe.contentWindow.TCXForm.sendCustomEvent(event, params);
  } else {
    return false;
  }
};
com.inq.ui.XFrame.prototype.initFocusOnTouch = function() {
  com.inq.utils.Capabilities.BindListener(this._div, "touchstart", $bind(this, this.setFocusOnTouch));
};
com.inq.ui.XFrame.prototype.setFocusOnTouch = function(event) {
  if (event.target.nodeName.toUpperCase() == "INPUT") {
    com.inq.flash.client.chatskins.ChatTextFocusMonitorImplBase.isTouched = true;
    if (!event.target.onfocus) {
      event.target.blur();
      event.target.onfocus = com.inq.flash.client.chatskins.ChatTextFocusMonitor.onFocus;
      event.target.onblur = com.inq.flash.client.chatskins.ChatTextFocusMonitor.onBlur;
    }
  }
};
com.inq.ui.XFrame.prototype.resetScrolling = function() {
  if (this.containerOrigTopPos == -1) {
    return;
  }
  this._div.style.top = this.containerOrigTopPos + "px";
  this._div.style.height = this.originalHeight + "px";
  this.containerHeight = 0;
  this.originalHeight = 0;
};
com.inq.ui.XFrame.prototype.initTouchScrolling = function() {
  com.inq.utils.Capabilities.BindListener(this._div, "touchstart", $bind(this, this.initTouchStart));
  com.inq.utils.Capabilities.BindListener(this._div, "touchmove", $bind(this, this.initTouchMove));
  com.inq.utils.Capabilities.BindListener(this._div, "touchend", $bind(this, this.initTouchEnd));
};
com.inq.ui.XFrame.prototype.initTouchStart = function(event) {
  var childEls, len, clientHeight;
  this.touchStartPos = (event.touches ? event.touches[0] : event).screenY;
  this.touchLastPos = this.touchStartPos;
  this.containerTopPos = parseInt(this._div.style.top);
  clientHeight = this._div.clientHeight;
  if (this.containerHeight == 0 || clientHeight < this.originalHeight) {
    this.originalHeight = clientHeight;
    this.containerHeight = this.originalHeight;
    this.containerOrigTopPos = parseInt(this._div.style.top);
    childEls = this._div.children;
    len = childEls.length;
    for (var i = 0;i < len;i++) {
      if (childEls[i].scrollHeight > this.containerHeight) {
        var fElement = window.getComputedStyle(childEls[i].firstElementChild);
        this.containerHeight = childEls[i].scrollHeight;
        if (fElement) {
          this.containerHeight = this.containerHeight - parseInt(fElement.marginTop) - parseInt(fElement.marginBottom);
        }
      }
    }
    this._div.style.height = this.containerHeight + "px";
  } else {
    if (this.containerHeight > clientHeight) {
      this.originalHeight = clientHeight;
      this._div.style.height = this.containerHeight + "px";
    }
  }
  if (com.inq.utils.Capabilities.isSafari() && com.inq.utils.Capabilities.isMobile() & (event.target.nodeName.toUpperCase() == "INPUT" || event.target.nodeName.toUpperCase() == "SELECT")) {
    if (!event.target.onfocus) {
      event.target.blur();
      event.target.onfocus = com.inq.flash.client.chatskins.ChatTextFocusMonitor.onFocus;
      event.target.onblur = com.inq.flash.client.chatskins.ChatTextFocusMonitor.onBlur;
    }
  }
};
com.inq.ui.XFrame.prototype.initTouchMove = function(event) {
  var t = event.touches ? event.touches[0] : event;
  this.touchLastPos = t.screenY;
  event.preventDefault();
  return false;
};
com.inq.ui.XFrame.prototype.initTouchEnd = function(event) {
  var area = Application.GetArea(), bottomBoundry;
  if (Math.abs(this.touchLastPos - this.touchStartPos) > 50) {
    if (area && this.containerTopPos + this.containerHeight > area.h || this.containerTopPos < this.containerOrigTopPos && this.touchLastPos > this.touchStartPos) {
      this.containerTopPos = this.containerTopPos + (this.touchLastPos - this.touchStartPos);
      this.containerTopPos = this.containerTopPos > this.containerOrigTopPos ? this.containerOrigTopPos : this.containerTopPos;
      bottomBoundry = this.containerHeight - (area.h - this.containerOrigTopPos);
      this.containerTopPos = this.containerOrigTopPos - this.containerTopPos > bottomBoundry ? this.containerOrigTopPos - bottomBoundry : this.containerTopPos;
      this._div.style.top = this.containerTopPos + "px";
    }
  }
};
com.inq.ui.XFrame.prototype.initOnLoad = null;
com.inq.ui.XFrame.prototype.__initOnLoad = null;
com.inq.ui.XFrame.prototype.__oldSource = null;
com.inq.ui.XFrame.prototype.__src = null;
com.inq.ui.XFrame.prototype.__class__ = com.inq.ui.XFrame;
com.inq.ui.XFrame.PERSISTENT_URL_COOKIE_PREFIX = "CX_";
com.inq.ui.XFrame.prototype.touchStartPos = 0;
com.inq.ui.XFrame.prototype.touchLastPos = 0;
com.inq.ui.XFrame.prototype.containerTopPos = 0;
com.inq.ui.XFrame.prototype.containerOrigTopPos = -1;
com.inq.ui.XFrame.prototype.containerHeight = 0;
com.inq.ui.XFrame.prototype.originalHeight = 0;
com.inq.ui.Placeholder = function(inputElement, intro) {
  this._element = inputElement;
  this._value = "";
  if (!com.inq.utils.Util.isIE && "placeholder" in this._element) {
    this._customPlaceholder = null;
  } else {
    this._customPlaceholder = new com.inq.ui.CustomPlaceholder(this);
  }
  this.setValue(intro);
};
$hxClasses.extend(com.inq.ui.Placeholder, com.inq.ui.Placeholder, "com.inq.ui.Placeholder");
com.inq.ui.Placeholder.prototype.toggle = function() {
  if (this._customPlaceholder) {
    this._customPlaceholder.toggle();
  }
};
com.inq.ui.Placeholder.prototype.getValue = function() {
  if (this._customPlaceholder) {
    return this._customPlaceholder.getValue();
  } else {
    return this._element.placeholder;
  }
};
com.inq.ui.Placeholder.prototype.setValue = function(value) {
  if (this._customPlaceholder) {
    this._customPlaceholder.setValue(value);
  } else {
    this._element.placeholder = value;
  }
};
com.inq.ui.Placeholder.prototype.clear = function() {
  this.setValue("");
};
com.inq.ui.CustomPlaceholder = function(parent) {
  this._parent = parent;
  this._element = parent._element;
  this._value = "";
  this._placeholder = null;
  this.initialize();
};
$hxClasses.extend(com.inq.ui.CustomPlaceholder, com.inq.ui.CustomPlaceholder, "com.inq.ui.CustomPlaceholder");
com.inq.ui.CustomPlaceholder.prototype.show = function() {
  this._placeholder.style.display = "block";
};
com.inq.ui.CustomPlaceholder.prototype.hide = function() {
  this._placeholder.style.display = "none";
};
com.inq.ui.CustomPlaceholder.prototype.toggle = function() {
  if (this._element.value == "") {
    this.show();
  } else {
    this.hide();
  }
};
com.inq.ui.CustomPlaceholder.prototype.getValue = function() {
  return this._value;
};
com.inq.ui.CustomPlaceholder.prototype.setValue = function(value) {
  this._value = value;
  this._placeholder.innerHTML = value;
};
com.inq.ui.CustomPlaceholder.prototype.initialize = function() {
  this._placeholder = document.createElement("span");
  if (com.inq.flash.client.control.FlashPeer.getIsBuilder()) {
    haxe.Timer.delay(this.applyStyles.bind(this), 500);
  } else {
    this.applyStyles();
  }
  this._element.parentNode.insertBefore(this._placeholder, this._element);
  this.setupListeners();
  this.toggle();
};
com.inq.ui.CustomPlaceholder.prototype.applyStyles = function(styles) {
  this._placeholder.style.position = "absolute";
  this._placeholder.style.color = "#aaa";
  this._placeholder.style.fontSize = window.getComputedStyle && window.getComputedStyle(this._element).fontSize || this._element.currentStyle && this._element.currentStyle["fontSize"];
  this._placeholder.style.fontFamily = window.getComputedStyle && window.getComputedStyle(this._element).fontFamily || this._element.currentStyle && this._element.currentStyle["fontFamily"];
};
com.inq.ui.CustomPlaceholder.prototype.setupListeners = function() {
  com.inq.utils.Capabilities.BindListener(this._element, "input", $bind(this, this.toggle));
  var ieVersion = com.inq.utils.Util.getIEMajorVer(true);
  if (0 < ieVersion && ieVersion <= 8) {
    com.inq.utils.Capabilities.BindListener(this._element, "propertychange", $bind(this, this.toggle));
  } else {
    if (ieVersion == 9) {
      com.inq.utils.Capabilities.BindListener(this._element, "keyup", $bind(this, this._onKeyup));
      com.inq.utils.Capabilities.BindListener(this._element, "cut", $bind(this, this._onCut));
    }
  }
};
com.inq.ui.CustomPlaceholder.prototype._onKeyup = function(ev) {
  if (!ev) {
    ev = Application.application.getPanelWindow().event;
  }
  if (ev.keyCode == 8 || ev.keyCode == 46) {
    this.toggle();
  }
};
com.inq.ui.CustomPlaceholder.prototype._onCut = function(ev) {
  var _this = this;
  setTimeout(function() {
    _this.toggle();
  }, 0);
};
com.inq.utils.EventDataUtils = function() {
};
$hxClasses["com.inq.utils.EventDataUtils"] = com.inq.utils.EventDataUtils;
com.inq.utils.EventDataUtils.__name__ = ["com", "inq", "utils", "EventDataUtils"];
com.inq.utils.EventDataUtils.fromMessage = function(message) {
  var eventData = new com.inq.utils.Dictionary;
  eventData["agtFirstName"] = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_EVENT_AGENT_FIRST_NAME);
  eventData["agtLastName"] = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_EVENT_AGENT_LAST_NAME);
  eventData["agtAttrs"] = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_AGENT_SITE_ATTRS);
  haxe.Log.trace("DEBUG: agtAttrs has been populated as (" + eventData["agtAttrs"] + ")", {fileName:"EventDataUtils.hx", lineNumber:27, className:"EventDataUtils", methodName:"fromMessage"});
  var agentAlias = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_MESSAGE_AGENT_ALIAS);
  if (agentAlias != null) {
    eventData["agentAlias"] = agentAlias;
  }
  var firstRequestedAttr = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_EVENT_INITIAL_REQUEST_ATTRIBUTES);
  if (firstRequestedAttr != null) {
    eventData["firstRequestedAttr"] = com.inq.flash.messagingframework.StringUtils.decodeStringFromMessage(firstRequestedAttr).split(",").join("=");
  }
  var newRequestedAttr = message.getProperty(com.inq.flash.client.data.MessageFields.KEY_EVENT_TRANSFER_REQUEST_ATTRIBUTES);
  if (newRequestedAttr != null) {
    eventData["newRequestedAttr"] = com.inq.flash.messagingframework.StringUtils.decodeStringFromMessage(newRequestedAttr);
  }
  return eventData;
};
com.inq.utils.EventDataUtils.prototype.__class__ = com.inq.utils.EventDataUtils;
com.inq.utils.StringUtil = function() {
};
$hxClasses["com.inq.utils.StringUtil"] = com.inq.utils.StringUtil;
com.inq.utils.StringUtil.__name__ = ["com", "inq", "utils", "StringUtil"];
com.inq.utils.StringUtil.__super__ = StringTools;
for (var k in StringTools.prototype) {
  com.inq.utils.StringUtil.prototype[k] = StringTools.prototype[k];
}
com.inq.utils.StringUtil.trim = function(s) {
  return StringTools.trim(s);
};
com.inq.utils.StringUtil.htmlDecode = function(s) {
  var res = StringTools.htmlUnescape(s);
  return res;
};
com.inq.utils.StringUtil.htmlAttrEscape = function(s) {
  return s.split("'").join("&#39;").split('"').join("&quot;");
};
com.inq.utils.StringUtil.escapeForJs = function(val) {
  var value = val;
  value = value.split("\\").join("\\\\");
  value = value.split('"').join('\\"');
  value = value.split("'").join("\\'");
  value = value.split("\n").join("\\n");
  value = value.split("\r").join("\\r");
  value = value.split("\t").join("\\t");
  return value;
};
com.inq.utils.StringUtil.toJsString = function(value) {
  return "'" + com.inq.utils.StringUtil.escapeForJs(value) + "'";
};
com.inq.utils.StringUtil.toJsonString = function(value) {
  return '"' + com.inq.utils.StringUtil.escapeForJs(value) + '"';
};
com.inq.utils.StringUtil.urlDecode = function(s) {
  return StringTools.urlDecode(s);
};
com.inq.utils.StringUtil.prototype.__class__ = com.inq.utils.StringUtil;
haxe.Timer = function(time_ms) {
  var me = this;
  this.id = window.setInterval(function() {
    me.run();
  }, time_ms);
};
$hxClasses["haxe.Timer"] = haxe.Timer;
haxe.Timer.__name__ = ["haxe", "Timer"];
haxe.Timer.delay = function(f, time_ms) {
  var t = new haxe.Timer(time_ms);
  t.run = function() {
    t.stop();
    f();
  };
  return t;
};
haxe.Timer.measure = function(f, pos) {
  var t0 = haxe.Timer.stamp();
  var r = f();
  haxe.Log.trace(haxe.Timer.stamp() - t0 + "s", pos);
  return r;
};
haxe.Timer.stamp = function() {
  return (new Date).getTime() / 1E3;
};
haxe.Timer.prototype.run = function() {
};
haxe.Timer.prototype.stop = function() {
  if (this.id == null) {
    return;
  }
  window.clearInterval(this.id);
  this.id = null;
};
haxe.Timer.prototype.id = null;
haxe.Timer.prototype.__class__ = haxe.Timer;
com.inq.utils.Timer = function(time_ms) {
  haxe.Timer.call(this, time_ms);
};
$hxClasses["com.inq.utils.Timer"] = com.inq.utils.Timer;
com.inq.utils.Timer.__name__ = ["com", "inq", "utils", "Timer"];
com.inq.utils.Timer.__super__ = haxe.Timer;
for (var k in haxe.Timer.prototype) {
  com.inq.utils.Timer.prototype[k] = haxe.Timer.prototype[k];
}
com.inq.utils.Timer.delay = function(f, time_ms) {
  var t = new com.inq.utils.Timer(time_ms);
  t.run = function() {
    t.stop();
    f();
  };
  return t;
};
com.inq.utils.Timer.prototype.__class__ = com.inq.utils.Timer;
haxe.Resource = function() {
};
$hxClasses["haxe.Resource"] = haxe.Resource;
haxe.Resource.__name__ = ["haxe", "Resource"];
haxe.Resource.content = null;
haxe.Resource.listNames = function() {
  var names = new Array;
  var _g = 0, _g1 = haxe.Resource.content;
  while (_g < _g1.length) {
    var x = _g1[_g];
    ++_g;
    names.push(x.name);
  }
  return names;
};
haxe.Resource.getString = function(name) {
  var _g = 0, _g1 = haxe.Resource.content;
  while (_g < _g1.length) {
    var x = _g1[_g];
    ++_g;
    if (x.name == name) {
      if (x.str != null) {
        return x.str;
      }
      var b = haxe.Unserializer.run(x.data);
      return b.toString();
    }
  }
  return null;
};
haxe.Resource.getBytes = function(name) {
  var _g = 0, _g1 = haxe.Resource.content;
  while (_g < _g1.length) {
    var x = _g1[_g];
    ++_g;
    if (x.name == name) {
      if (x.str != null) {
        return haxe.io.Bytes.ofString(x.str);
      }
      return haxe.Unserializer.run(x.data);
    }
  }
  return null;
};
haxe.Resource.prototype.__class__ = haxe.Resource;
haxe.Stack = function() {
};
$hxClasses["haxe.Stack"] = haxe.Stack;
haxe.Stack.__name__ = ["haxe", "Stack"];
haxe.Stack.callStack = function() {
  var oldValue = Error.prepareStackTrace;
  Error.prepareStackTrace = function(error, callsites) {
    var stack = [];
    var _g = 0;
    while (_g < callsites.length) {
      var site = callsites[_g];
      ++_g;
      var method = null;
      var fullName = site.getFunctionName();
      if (fullName != null) {
        var idx = fullName.lastIndexOf(".");
        if (idx >= 0) {
          var className = HxOverrides.substr(fullName, 0, idx);
          var methodName = HxOverrides.substr(fullName, idx + 1, null);
          method = haxe.StackItem.Method(className, methodName);
        }
      }
      stack.push(haxe.StackItem.FilePos(method, site.getFileName(), site.getLineNumber()));
    }
    return stack;
  };
  var a = haxe.Stack.makeStack((new Error).stack);
  a.shift();
  Error.prepareStackTrace = oldValue;
  return a;
};
haxe.Stack.exceptionStack = function() {
  return [];
};
haxe.Stack.toString = function(stack) {
  var b = new StringBuf;
  var _g = 0;
  while (_g < stack.length) {
    var s = stack[_g];
    ++_g;
    b.b += Std.string("\nCalled from ");
    haxe.Stack.itemToString(b, s);
  }
  return b.b;
};
haxe.Stack.itemToString = function(b, s) {
  switch(s) {
    case CFunction:
      b.b += Std.string("a C function");
      break;
    case Module(m):
      b.b += Std.string("module ");
      b.b += Std.string(m);
      break;
    case FilePos(s1, file, line):
      if (s1 != null) {
        haxe.Stack.itemToString(b, s1);
        b.b += Std.string(" (");
      }
      b.b += Std.string(file);
      b.b += Std.string(" line ");
      b.b += Std.string(line);
      if (s1 != null) {
        b.b += Std.string(")");
      }
      break;
    case Method(cname, meth):
      b.b += Std.string(cname);
      b.b += Std.string(".");
      b.b += Std.string(meth);
      break;
    case Lambda(n):
      b.b += Std.string("local function #");
      b.b += Std.string(n);
      break;
  }
};
haxe.Stack.makeStack = function(s) {
  if (typeof s == "string") {
    var stack = s.split("\n");
    var m = [];
    var _g = 0;
    while (_g < stack.length) {
      var line = stack[_g];
      ++_g;
      m.push(haxe.StackItem.Module(line));
    }
    return m;
  } else {
    return s;
  }
};
haxe.Stack.prototype.__class__ = haxe.Stack;
haxe.Unserializer = function(buf) {
  this.buf = buf;
  this.length = buf.length;
  this.pos = 0;
  this.scache = new Array;
  this.cache = new Array;
  var r = haxe.Unserializer.DEFAULT_RESOLVER;
  if (r == null) {
    r = Type;
    haxe.Unserializer.DEFAULT_RESOLVER = r;
  }
  this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe.Unserializer;
haxe.Unserializer.__name__ = ["haxe", "Unserializer"];
haxe.Unserializer.initCodes = function() {
  var codes = new Array;
  var _g1 = 0, _g = haxe.Unserializer.BASE64.length;
  while (_g1 < _g) {
    var i = _g1++;
    codes[haxe.Unserializer.BASE64.charCodeAt(i)] = i;
  }
  return codes;
};
haxe.Unserializer.run = function(v) {
  return (new haxe.Unserializer(v)).unserialize();
};
haxe.Unserializer.prototype.unserialize = function() {
  switch(this.buf.charCodeAt(this.pos++)) {
    case 110:
      return null;
    case 116:
      return true;
    case 102:
      return false;
    case 122:
      return 0;
    case 105:
      return this.readDigits();
    case 100:
      var p1 = this.pos;
      while (true) {
        var c = this.buf.charCodeAt(this.pos);
        if (c >= 43 && c < 58 || c == 101 || c == 69) {
          this.pos++;
        } else {
          break;
        }
      }
      return Std.parseFloat(HxOverrides.substr(this.buf, p1, this.pos - p1));
    case 121:
      var len = this.readDigits();
      if (this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
        throw "Invalid string length";
      }
      var s = HxOverrides.substr(this.buf, this.pos, len);
      this.pos += len;
      s = StringTools.urlDecode(s);
      this.scache.push(s);
      return s;
    case 107:
      return Math.NaN;
    case 109:
      return Math.NEGATIVE_INFINITY;
    case 112:
      return Math.POSITIVE_INFINITY;
    case 97:
      var buf = this.buf;
      var a = new Array;
      this.cache.push(a);
      while (true) {
        var c = this.buf.charCodeAt(this.pos);
        if (c == 104) {
          this.pos++;
          break;
        }
        if (c == 117) {
          this.pos++;
          var n = this.readDigits();
          a[a.length + n - 1] = null;
        } else {
          a.push(this.unserialize());
        }
      }
      return a;
    case 111:
      var o = {};
      this.cache.push(o);
      this.unserializeObject(o);
      return o;
    case 114:
      var n = this.readDigits();
      if (n < 0 || n >= this.cache.length) {
        throw "Invalid reference";
      }
      return this.cache[n];
    case 82:
      var n = this.readDigits();
      if (n < 0 || n >= this.scache.length) {
        throw "Invalid string reference";
      }
      return this.scache[n];
    case 120:
      throw this.unserialize();;
    case 99:
      var name = this.unserialize();
      var cl = this.resolver.resolveClass(name);
      if (cl == null) {
        throw "Class not found " + name;
      }
      var o = Type.createEmptyInstance(cl);
      this.cache.push(o);
      this.unserializeObject(o);
      return o;
    case 119:
      var name = this.unserialize();
      var edecl = this.resolver.resolveEnum(name);
      if (edecl == null) {
        throw "Enum not found " + name;
      }
      var e = this.unserializeEnum(edecl, this.unserialize());
      this.cache.push(e);
      return e;
    case 106:
      var name = this.unserialize();
      var edecl = this.resolver.resolveEnum(name);
      if (edecl == null) {
        throw "Enum not found " + name;
      }
      this.pos++;
      var index = this.readDigits();
      var tag = Type.getEnumConstructs(edecl)[index];
      if (tag == null) {
        throw "Unknown enum index " + name + "@" + index;
      }
      var e = this.unserializeEnum(edecl, tag);
      this.cache.push(e);
      return e;
    case 108:
      var l = new List;
      this.cache.push(l);
      var buf = this.buf;
      while (this.buf.charCodeAt(this.pos) != 104) {
        l.add(this.unserialize());
      }
      this.pos++;
      return l;
    case 98:
      var h = new Hash;
      this.cache.push(h);
      var buf = this.buf;
      while (this.buf.charCodeAt(this.pos) != 104) {
        var s = this.unserialize();
        h.set(s, this.unserialize());
      }
      this.pos++;
      return h;
    case 113:
      var h = new IntHash;
      this.cache.push(h);
      var buf = this.buf;
      var c = this.buf.charCodeAt(this.pos++);
      while (c == 58) {
        var i = this.readDigits();
        h.set(i, this.unserialize());
        c = this.buf.charCodeAt(this.pos++);
      }
      if (c != 104) {
        throw "Invalid IntHash format";
      }
      return h;
    case 118:
      var d = HxOverrides.strDate(HxOverrides.substr(this.buf, this.pos, 19));
      this.cache.push(d);
      this.pos += 19;
      return d;
    case 115:
      var len = this.readDigits();
      var buf = this.buf;
      if (this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
        throw "Invalid bytes length";
      }
      var codes = haxe.Unserializer.CODES;
      if (codes == null) {
        codes = haxe.Unserializer.initCodes();
        haxe.Unserializer.CODES = codes;
      }
      var i = this.pos;
      var rest = len & 3;
      var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
      var max = i + (len - rest);
      var bytes = haxe.io.Bytes.alloc(size);
      var bpos = 0;
      while (i < max) {
        var c1 = codes[buf.charCodeAt(i++)];
        var c2 = codes[buf.charCodeAt(i++)];
        bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
        var c3 = codes[buf.charCodeAt(i++)];
        bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
        var c4 = codes[buf.charCodeAt(i++)];
        bytes.b[bpos++] = (c3 << 6 | c4) & 255;
      }
      if (rest >= 2) {
        var c1 = codes[buf.charCodeAt(i++)];
        var c2 = codes[buf.charCodeAt(i++)];
        bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
        if (rest == 3) {
          var c3 = codes[buf.charCodeAt(i++)];
          bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
        }
      }
      this.pos += len;
      this.cache.push(bytes);
      return bytes;
    case 67:
      var name = this.unserialize();
      var cl = this.resolver.resolveClass(name);
      if (cl == null) {
        throw "Class not found " + name;
      }
      var o = Type.createEmptyInstance(cl);
      this.cache.push(o);
      o.hxUnserialize(this);
      if (this.buf.charCodeAt(this.pos++) != 103) {
        throw "Invalid custom data";
      }
      return o;
    default:
    ;
  }
  this.pos--;
  throw "Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos;
};
haxe.Unserializer.prototype.unserializeEnum = function(edecl, tag) {
  if (this.buf.charCodeAt(this.pos++) != 58) {
    throw "Invalid enum format";
  }
  var nargs = this.readDigits();
  if (nargs == 0) {
    return Type.createEnum(edecl, tag);
  }
  var args = new Array;
  while (nargs-- > 0) {
    args.push(this.unserialize());
  }
  return Type.createEnum(edecl, tag, args);
};
haxe.Unserializer.prototype.unserializeObject = function(o) {
  while (true) {
    if (this.pos >= this.length) {
      throw "Invalid object";
    }
    if (this.buf.charCodeAt(this.pos) == 103) {
      break;
    }
    var k = this.unserialize();
    if (!js.Boot.__instanceof(k, String)) {
      throw "Invalid object key";
    }
    var v = this.unserialize();
    o[k] = v;
  }
  this.pos++;
};
haxe.Unserializer.prototype.readDigits = function() {
  var k = 0;
  var s = false;
  var fpos = this.pos;
  while (true) {
    var c = this.buf.charCodeAt(this.pos);
    if (c != c) {
      break;
    }
    if (c == 45) {
      if (this.pos != fpos) {
        break;
      }
      s = true;
      this.pos++;
      continue;
    }
    if (c < 48 || c > 57) {
      break;
    }
    k = k * 10 + (c - 48);
    this.pos++;
  }
  if (s) {
    k *= -1;
  }
  return k;
};
haxe.Unserializer.prototype.get = function(p) {
  return this.buf.charCodeAt(p);
};
haxe.Unserializer.prototype.getResolver = function() {
  return this.resolver;
};
haxe.Unserializer.prototype.setResolver = function(r) {
  if (r == null) {
    this.resolver = {resolveClass:function(_) {
      return null;
    }, resolveEnum:function(_) {
      return null;
    }};
  } else {
    this.resolver = r;
  }
};
haxe.Unserializer.prototype.resolver = null;
haxe.Unserializer.prototype.scache = null;
haxe.Unserializer.prototype.cache = null;
haxe.Unserializer.prototype.length = null;
haxe.Unserializer.prototype.pos = null;
haxe.Unserializer.prototype.buf = null;
haxe.Unserializer.prototype.__class__ = haxe.Unserializer;
haxe.Unserializer.DEFAULT_RESOLVER = Type;
haxe.Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe.Unserializer.CODES = null;
haxe.io.Bytes = function(length, b) {
  this.length = length;
  this.b = b;
};
$hxClasses["haxe.io.Bytes"] = haxe.io.Bytes;
haxe.io.Bytes.__name__ = ["haxe", "io", "Bytes"];
haxe.io.Bytes.alloc = function(length) {
  var a = new Array;
  var _g = 0;
  while (_g < length) {
    var i = _g++;
    a.push(0);
  }
  return new haxe.io.Bytes(length, a);
};
haxe.io.Bytes.ofString = function(s) {
  var a = new Array;
  var _g1 = 0, _g = s.length;
  while (_g1 < _g) {
    var i = _g1++;
    var c = s.charCodeAt(i);
    if (c <= 127) {
      a.push(c);
    } else {
      if (c <= 2047) {
        a.push(192 | c >> 6);
        a.push(128 | c & 63);
      } else {
        if (c <= 65535) {
          a.push(224 | c >> 12);
          a.push(128 | c >> 6 & 63);
          a.push(128 | c & 63);
        } else {
          a.push(240 | c >> 18);
          a.push(128 | c >> 12 & 63);
          a.push(128 | c >> 6 & 63);
          a.push(128 | c & 63);
        }
      }
    }
  }
  return new haxe.io.Bytes(a.length, a);
};
haxe.io.Bytes.ofData = function(b) {
  return new haxe.io.Bytes(b.length, b);
};
haxe.io.Bytes.prototype.getData = function() {
  return this.b;
};
haxe.io.Bytes.prototype.toHex = function() {
  var s = new StringBuf;
  var chars = [];
  var str = "0123456789abcdef";
  var _g1 = 0, _g = str.length;
  while (_g1 < _g) {
    var i = _g1++;
    chars.push(HxOverrides.cca(str, i));
  }
  var _g1 = 0, _g = this.length;
  while (_g1 < _g) {
    var i = _g1++;
    var c = this.b[i];
    s.b += String.fromCharCode(chars[c >> 4]);
    s.b += String.fromCharCode(chars[c & 15]);
  }
  return s.b;
};
haxe.io.Bytes.prototype.toString = function() {
  return this.readString(0, this.length);
};
haxe.io.Bytes.prototype.readString = function(pos, len) {
  if (pos < 0 || len < 0 || pos + len > this.length) {
    throw haxe.io.Error.OutsideBounds;
  }
  var s = "";
  var b = this.b;
  var fcc = String.fromCharCode;
  var i = pos;
  var max = pos + len;
  while (i < max) {
    var c = b[i++];
    if (c < 128) {
      if (c == 0) {
        break;
      }
      s += fcc(c);
    } else {
      if (c < 224) {
        s += fcc((c & 63) << 6 | b[i++] & 127);
      } else {
        if (c < 240) {
          var c2 = b[i++];
          s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
        } else {
          var c2 = b[i++];
          var c3 = b[i++];
          s += fcc((c & 15) << 18 | (c2 & 127) << 12 | c3 << 6 & 127 | b[i++] & 127);
        }
      }
    }
  }
  return s;
};
haxe.io.Bytes.prototype.compare = function(other) {
  var b1 = this.b;
  var b2 = other.b;
  var len = this.length < other.length ? this.length : other.length;
  var _g = 0;
  while (_g < len) {
    var i = _g++;
    if (b1[i] != b2[i]) {
      return b1[i] - b2[i];
    }
  }
  return this.length - other.length;
};
haxe.io.Bytes.prototype.sub = function(pos, len) {
  if (pos < 0 || len < 0 || pos + len > this.length) {
    throw haxe.io.Error.OutsideBounds;
  }
  return new haxe.io.Bytes(len, this.b.slice(pos, pos + len));
};
haxe.io.Bytes.prototype.blit = function(pos, src, srcpos, len) {
  if (pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
    throw haxe.io.Error.OutsideBounds;
  }
  var b1 = this.b;
  var b2 = src.b;
  if (b1 == b2 && pos > srcpos) {
    var i = len;
    while (i > 0) {
      i--;
      b1[i + pos] = b2[i + srcpos];
    }
    return;
  }
  var _g = 0;
  while (_g < len) {
    var i = _g++;
    b1[i + pos] = b2[i + srcpos];
  }
};
haxe.io.Bytes.prototype.set = function(pos, v) {
  this.b[pos] = v & 255;
};
haxe.io.Bytes.prototype.get = function(pos) {
  return this.b[pos];
};
haxe.io.Bytes.prototype.b = null;
haxe.io.Bytes.prototype.length = null;
haxe.io.Bytes.prototype.__class__ = haxe.io.Bytes;
if (!haxe.xml) {
  haxe.xml = {};
}
if (!haxe.xml._Fast) {
  haxe.xml._Fast = {};
}
;haxe.xml._Fast.NodeAccess = function(x) {
  this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeAccess"] = haxe.xml._Fast.NodeAccess;
haxe.xml._Fast.NodeAccess.__name__ = ["haxe", "xml", "_Fast", "NodeAccess"];
haxe.xml._Fast.NodeAccess.prototype.resolve = function(name) {
  var x = this.__x.elementsNamed(name).next();
  if (x == null) {
    var xname = this.__x.nodeType == Xml.Document ? "Document" : this.__x.getNodeName();
    throw xname + " is missing element " + name;
  }
  return new haxe.xml.Fast(x);
};
haxe.xml._Fast.NodeAccess.prototype.__x = null;
haxe.xml._Fast.NodeAccess.prototype.__class__ = haxe.xml._Fast.NodeAccess;
haxe.xml._Fast.AttribAccess = function(x) {
  this.__x = x;
};
$hxClasses["haxe.xml._Fast.AttribAccess"] = haxe.xml._Fast.AttribAccess;
haxe.xml._Fast.AttribAccess.__name__ = ["haxe", "xml", "_Fast", "AttribAccess"];
haxe.xml._Fast.AttribAccess.prototype.resolve = function(name) {
  if (this.__x.nodeType == Xml.Document) {
    throw "Cannot access document attribute " + name;
  }
  var v = this.__x.get(name);
  if (v == null) {
    throw this.__x.getNodeName() + " is missing attribute " + name;
  }
  return v;
};
haxe.xml._Fast.AttribAccess.prototype.__x = null;
haxe.xml._Fast.AttribAccess.prototype.__class__ = haxe.xml._Fast.AttribAccess;
haxe.xml._Fast.HasAttribAccess = function(x) {
  this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe.xml._Fast.HasAttribAccess;
haxe.xml._Fast.HasAttribAccess.__name__ = ["haxe", "xml", "_Fast", "HasAttribAccess"];
haxe.xml._Fast.HasAttribAccess.prototype.resolve = function(name) {
  if (this.__x.nodeType == Xml.Document) {
    throw "Cannot access document attribute " + name;
  }
  return this.__x.exists(name);
};
haxe.xml._Fast.HasAttribAccess.prototype.__x = null;
haxe.xml._Fast.HasAttribAccess.prototype.__class__ = haxe.xml._Fast.HasAttribAccess;
haxe.xml._Fast.HasNodeAccess = function(x) {
  this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe.xml._Fast.HasNodeAccess;
haxe.xml._Fast.HasNodeAccess.__name__ = ["haxe", "xml", "_Fast", "HasNodeAccess"];
haxe.xml._Fast.HasNodeAccess.prototype.resolve = function(name) {
  return this.__x.elementsNamed(name).hasNext();
};
haxe.xml._Fast.HasNodeAccess.prototype.__x = null;
haxe.xml._Fast.HasNodeAccess.prototype.__class__ = haxe.xml._Fast.HasNodeAccess;
haxe.xml._Fast.NodeListAccess = function(x) {
  this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe.xml._Fast.NodeListAccess;
haxe.xml._Fast.NodeListAccess.__name__ = ["haxe", "xml", "_Fast", "NodeListAccess"];
haxe.xml._Fast.NodeListAccess.prototype.resolve = function(name) {
  var l = new List;
  var $it0 = this.__x.elementsNamed(name);
  while ($it0.hasNext()) {
    var x = $it0.next();
    l.add(new haxe.xml.Fast(x));
  }
  return l;
};
haxe.xml._Fast.NodeListAccess.prototype.__x = null;
haxe.xml._Fast.NodeListAccess.prototype.__class__ = haxe.xml._Fast.NodeListAccess;
haxe.xml.Fast = function(x) {
  if (x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
    throw "Invalid nodeType " + Std.string(x.nodeType);
  }
  this.x = x;
  this.node = new haxe.xml._Fast.NodeAccess(x);
  this.nodes = new haxe.xml._Fast.NodeListAccess(x);
  this.att = new haxe.xml._Fast.AttribAccess(x);
  this.has = new haxe.xml._Fast.HasAttribAccess(x);
  this.hasNode = new haxe.xml._Fast.HasNodeAccess(x);
};
$hxClasses["haxe.xml.Fast"] = haxe.xml.Fast;
haxe.xml.Fast.__name__ = ["haxe", "xml", "Fast"];
haxe.xml.Fast.prototype.getElements = function() {
  var it = this.x.elements();
  return {hasNext:$bind(it, it.hasNext), next:function() {
    var x = it.next();
    if (x == null) {
      return null;
    }
    return new haxe.xml.Fast(x);
  }};
};
haxe.xml.Fast.prototype.getInnerHTML = function() {
  var s = new StringBuf;
  var $it0 = this.x.iterator();
  while ($it0.hasNext()) {
    var x = $it0.next();
    s.b += Std.string(x.toString());
  }
  return s.b;
};
haxe.xml.Fast.prototype.getInnerData = function() {
  var it = this.x.iterator();
  if (!it.hasNext()) {
    throw this.getName() + " does not have data";
  }
  var v = it.next();
  var n = it.next();
  if (n != null) {
    if (v.nodeType == Xml.PCData && n.nodeType == Xml.CData && StringTools.trim(v.getNodeValue()) == "") {
      var n2 = it.next();
      if (n2 == null || n2.nodeType == Xml.PCData && StringTools.trim(n2.getNodeValue()) == "" && it.next() == null) {
        return n.getNodeValue();
      }
    }
    throw this.getName() + " does not only have data";
  }
  if (v.nodeType != Xml.PCData && v.nodeType != Xml.CData) {
    throw this.getName() + " does not have data";
  }
  return v.getNodeValue();
};
haxe.xml.Fast.prototype.getName = function() {
  return this.x.nodeType == Xml.Document ? "Document" : this.x.getNodeName();
};
haxe.xml.Fast.prototype.elements = null;
haxe.xml.Fast.prototype.hasNode = null;
haxe.xml.Fast.prototype.has = null;
haxe.xml.Fast.prototype.att = null;
haxe.xml.Fast.prototype.nodes = null;
haxe.xml.Fast.prototype.node = null;
haxe.xml.Fast.prototype.innerHTML = null;
haxe.xml.Fast.prototype.innerData = null;
haxe.xml.Fast.prototype.name = null;
haxe.xml.Fast.prototype.x = null;
haxe.xml.Fast.prototype.__class__ = haxe.xml.Fast;
haxe.xml.Parser = function() {
};
$hxClasses["haxe.xml.Parser"] = haxe.xml.Parser;
haxe.xml.Parser.__name__ = ["haxe", "xml", "Parser"];
haxe.xml.Parser.parse = function(str) {
  var doc = Xml.createDocument();
  haxe.xml.Parser.doParse(str, 0, doc);
  return doc;
};
haxe.xml.Parser.doParse = function(str, p, parent) {
  if (p == null) {
    p = 0;
  }
  var xml = null;
  var state = 1;
  var next = 1;
  var aname = null;
  var start = 0;
  var nsubs = 0;
  var nbrackets = 0;
  var c = str.charCodeAt(p);
  while (!(c != c)) {
    switch(state) {
      case 0:
        switch(c) {
          case 10:
          ;
          case 13:
          ;
          case 9:
          ;
          case 32:
            break;
          default:
            state = next;
            continue;
        }
        break;
      case 1:
        switch(c) {
          case 60:
            state = 0;
            next = 2;
            break;
          default:
            start = p;
            state = 13;
            continue;
        }
        break;
      case 13:
        if (c == 60) {
          var child = Xml.createPCData(HxOverrides.substr(str, start, p - start));
          parent.addChild(child);
          nsubs++;
          state = 0;
          next = 2;
        }
        break;
      case 17:
        if (c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
          var child = Xml.createCData(HxOverrides.substr(str, start, p - start));
          parent.addChild(child);
          nsubs++;
          p += 2;
          state = 1;
        }
        break;
      case 2:
        switch(c) {
          case 33:
            if (str.charCodeAt(p + 1) == 91) {
              p += 2;
              if (HxOverrides.substr(str, p, 6).toUpperCase() != "CDATA[") {
                throw "Expected <![CDATA[";
              }
              p += 5;
              state = 17;
              start = p + 1;
            } else {
              if (str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
                if (HxOverrides.substr(str, p + 2, 6).toUpperCase() != "OCTYPE") {
                  throw "Expected <!DOCTYPE";
                }
                p += 8;
                state = 16;
                start = p + 1;
              } else {
                if (str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
                  throw "Expected \x3c!--";
                } else {
                  p += 2;
                  state = 15;
                  start = p + 1;
                }
              }
            }
            break;
          case 63:
            state = 14;
            start = p;
            break;
          case 47:
            if (parent == null) {
              throw "Expected node name";
            }
            start = p + 1;
            state = 0;
            next = 10;
            break;
          default:
            state = 3;
            start = p;
            continue;
        }
        break;
      case 3:
        if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
          if (p == start) {
            throw "Expected node name";
          }
          xml = Xml.createElement(HxOverrides.substr(str, start, p - start));
          parent.addChild(xml);
          state = 0;
          next = 4;
          continue;
        }
        break;
      case 4:
        switch(c) {
          case 47:
            state = 11;
            nsubs++;
            break;
          case 62:
            state = 9;
            nsubs++;
            break;
          default:
            state = 5;
            start = p;
            continue;
        }
        break;
      case 5:
        if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
          var tmp;
          if (start == p) {
            throw "Expected attribute name";
          }
          tmp = HxOverrides.substr(str, start, p - start);
          aname = tmp;
          if (xml.exists(aname)) {
            throw "Duplicate attribute";
          }
          state = 0;
          next = 6;
          continue;
        }
        break;
      case 6:
        switch(c) {
          case 61:
            state = 0;
            next = 7;
            break;
          default:
            throw "Expected =";;
        }
        break;
      case 7:
        switch(c) {
          case 34:
          ;
          case 39:
            state = 8;
            start = p;
            break;
          default:
            throw 'Expected "';;
        }
        break;
      case 8:
        if (c == str.charCodeAt(start)) {
          var val = HxOverrides.substr(str, start + 1, p - start - 1);
          xml.set(aname, val);
          state = 0;
          next = 4;
        }
        break;
      case 9:
        p = haxe.xml.Parser.doParse(str, p, xml);
        start = p;
        state = 1;
        break;
      case 11:
        switch(c) {
          case 62:
            state = 1;
            break;
          default:
            throw "Expected >";;
        }
        break;
      case 12:
        switch(c) {
          case 62:
            if (nsubs == 0) {
              parent.addChild(Xml.createPCData(""));
            }
            return p;
          default:
            throw "Expected >";;
        }
        break;
      case 10:
        if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
          if (start == p) {
            throw "Expected node name";
          }
          var v = HxOverrides.substr(str, start, p - start);
          if (v != parent.getNodeName()) {
            throw "Expected </" + parent.getNodeName() + ">";
          }
          state = 0;
          next = 12;
          continue;
        }
        break;
      case 15:
        if (c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
          parent.addChild(Xml.createComment(HxOverrides.substr(str, start, p - start)));
          p += 2;
          state = 1;
        }
        break;
      case 16:
        if (c == 91) {
          nbrackets++;
        } else {
          if (c == 93) {
            nbrackets--;
          } else {
            if (c == 62 && nbrackets == 0) {
              parent.addChild(Xml.createDocType(HxOverrides.substr(str, start, p - start)));
              state = 1;
            }
          }
        }
        break;
      case 14:
        if (c == 63 && str.charCodeAt(p + 1) == 62) {
          p++;
          var str1 = HxOverrides.substr(str, start + 1, p - start - 2);
          parent.addChild(Xml.createProlog(str1));
          state = 1;
        }
        break;
    }
    c = str.charCodeAt(++p);
  }
  if (state == 1) {
    start = p;
    state = 13;
  }
  if (state == 13) {
    if (p != start || nsubs == 0) {
      parent.addChild(Xml.createPCData(HxOverrides.substr(str, start, p - start)));
    }
    return p;
  }
  throw "Unexpected end";
};
haxe.xml.Parser.isValidChar = function(c) {
  return c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45;
};
haxe.xml.Parser.prototype.__class__ = haxe.xml.Parser;
js.Lib = function() {
};
$hxClasses["js.Lib"] = js.Lib;
js.Lib.__name__ = ["js", "Lib"];
js.Lib.document = null;
js.Lib.window = null;
js.Lib.debug = function() {
  debugger;
};
js.Lib.alert = function(v) {
  alert(js.Boot.__string_rec(v, ""));
};
js.Lib.eval = function(code) {
  return eval(code);
};
js.Lib.setErrorHandler = function(f) {
  js.Lib.onerror = f;
};
js.Lib.prototype.__class__ = js.Lib;
js.Lib.onerror = null;
function $bind(o, m) {
  var f = function() {
    return f.method.apply(f.scope, arguments);
  };
  f.scope = o;
  f.method = m;
  return f;
}
function $bindAll(o, ms) {
  function isUnboundFunction(f) {
    return typeof f === "function" && !("scope" in f);
  }
  if (ms) {
    ms.forEach(function(m) {
      if (isUnboundFunction(o[m])) {
        o[m] = $bind(o, o[m]);
      }
    });
  } else {
    for (m in o) {
      if (isUnboundFunction(o[m])) {
        o[m] = $bind(o, o[m]);
      }
    }
  }
}
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
Array.prototype.__class__ = $hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = {__name__:["Int"]};
var Dynamic = $hxClasses.Dynamic = {__name__:["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = {__name__:["Class"]};
var Enum = {};
var Void = $hxClasses.Void = {__ename__:["Void"]};
Array.prototype.indexOf ? HxOverrides.remove = function(a, o) {
  var i = a.indexOf(o);
  if (i == -1) {
    return false;
  }
  a.splice(i, 1);
  return true;
} : null;
Math.__name__ = ["Math"];
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
$hxClasses.Math = Math;
Math.isFinite = function(i) {
  return isFinite(i);
};
Math.isNaN = function(i) {
  return isNaN(i);
};
Xml.Element = "element";
Xml.PCData = "pcdata";
Xml.CData = "cdata";
Xml.Comment = "comment";
Xml.DocType = "doctype";
Xml.Prolog = "prolog";
Xml.Document = "document";
haxe.Resource.content = [];
if (typeof document != "undefined") {
  js.Lib.document = document;
}
if (typeof window != "undefined") {
  js.Lib.window = window;
  js.Lib.window.onerror = function(msg, url, line) {
    var f = js.Lib.onerror;
    if (f == null) {
      return false;
    }
    return f(msg, [url + ":" + line]);
  };
}
if (com.inq.flash.client.control.FlashPeer.getIsSkinLocal() && com.inq.utils.Capabilities.getIeVersion() == 8) {
  window.com = com;
  window.Application = Application;
}
Application.main();

